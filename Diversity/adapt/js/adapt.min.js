require(['semver', 'bowser', 'html-react-parser', 'react', 'react-dom', 'handlebars', 'libraries/mediaelement-and-player', 'libraries/rangeslider', 'libraries/jquery-ui.interactions', 'libraries/jquery.ui.touch-punch', 'libraries/codemirror/lib/codemirror', 'libraries/codemirror/mode/htmlmixed/htmlmixed', 'libraries/jquery.actual.min', 'libraries/SCORM_API_wrapper', 'underscore', 'libraries/lottie.min.js', 'libraries/jquery-ui.scrollParent.js'], function (semver, Bowser, HTMLReactParser, React, ReactDOM$1, Handlebars$1, mediaelementAndPlayer, rangeslider, jqueryUi_interactions, jquery_ui_touchPunch, CodeMirror, htmlmixed, jquery_actual_min, pipwerks, _$1, Lottie, jqueryUi_scrollParent_js) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var semver__default = /*#__PURE__*/_interopDefaultLegacy(semver);
  var Bowser__default = /*#__PURE__*/_interopDefaultLegacy(Bowser);
  var HTMLReactParser__default = /*#__PURE__*/_interopDefaultLegacy(HTMLReactParser);
  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
  var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM$1);
  var Handlebars__default = /*#__PURE__*/_interopDefaultLegacy(Handlebars$1);
  var CodeMirror__default = /*#__PURE__*/_interopDefaultLegacy(CodeMirror);
  var pipwerks__default = /*#__PURE__*/_interopDefaultLegacy(pipwerks);
  var ___default = /*#__PURE__*/_interopDefaultLegacy(_$1);
  var Lottie__default = /*#__PURE__*/_interopDefaultLegacy(Lottie);

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _readOnlyError(name) {
    throw new TypeError("\"" + name + "\" is read-only");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var Wait = __AMD("core/js/wait", function (_Backbone$Controller) {
    _inherits(Wait, _Backbone$Controller);

    var _super = _createSuper(Wait);

    function Wait() {
      _classCallCheck(this, Wait);

      return _super.apply(this, arguments);
    }

    _createClass(Wait, [{
      key: "initialize",
      value: function initialize() {
        this._waitCount = 0;
        this._callbackHandle = null;
        this.being = this.begin.bind(this);
        this.end = this.end.bind(this);
      }
    }, {
      key: "isWaiting",
      value: function isWaiting() {
        return this._waitCount !== 0;
      }
    }, {
      key: "begin",
      value: function begin() {
        if (!this.isWaiting()) this.trigger('wait');
        this._waitCount++;

        if (this._callbackHandle) {
          clearTimeout(this._callbackHandle);
          this._callbackHandle = null;
        }

        return this;
      }
    }, {
      key: "end",
      value: function end() {
        if (!this.isWaiting()) return this;
        this._waitCount--;
        if (this.isWaiting() || this._callbackHandle) return this;
        this._callbackHandle = setTimeout(function () {
          this._callbackHandle = null;
          this.trigger('ready');
        }.bind(this), 0);
        return this;
      }
    }, {
      key: "queue",
      value: function queue(callback) {
        var _this = this;

        if (!callback) {
          this.begin();
          return new Promise(function (resolve) {
            _this.once('ready', resolve);

            _this.end();
          });
        }

        this.begin();
        this.once('ready', callback);
        this.end();
        return this;
      }
    }, {
      key: "for",
      value: function _for(callback) {
        var _this2 = this;

        this.begin();

        _.defer(function () {
          return callback(_.once(_this2.end));
        });

        return this;
      }
    }]);

    return Wait;
  }(Backbone.Controller));

  var LockingModel = __AMD("core/js/models/lockingModel", function (_Backbone$Model) {
    _inherits(LockingModel, _Backbone$Model);

    var _super = _createSuper(LockingModel);

    function LockingModel() {
      _classCallCheck(this, LockingModel);

      return _super.apply(this, arguments);
    }

    _createClass(LockingModel, [{
      key: "set",
      value: function set(attrName, attrVal) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var stopProcessing = _typeof(attrName) === 'object' || typeof attrVal !== 'boolean' || !this.isLocking(attrName);
        if (stopProcessing) return _get(_getPrototypeOf(LockingModel.prototype), "set", this).apply(this, arguments);
        var isSettingValueForSpecificPlugin = options === null || options === void 0 ? void 0 : options.pluginName;

        if (!isSettingValueForSpecificPlugin) {
          console.error('Must supply a pluginName to change a locked attribute');
          options.pluginName = 'compatibility';
        }

        var pluginName = options.pluginName;

        if (this.defaults[attrName] !== undefined) {
          this._lockedAttributes[attrName] = !this.defaults[attrName];
        }

        var lockingValue = this._lockedAttributes[attrName];
        var isAttemptingToLock = lockingValue === attrVal;

        if (isAttemptingToLock) {
          this.setLockState(attrName, true, {
            pluginName: pluginName,
            skipcheck: true
          });
          return _get(_getPrototypeOf(LockingModel.prototype), "set", this).call(this, attrName, lockingValue);
        }

        this.setLockState(attrName, false, {
          pluginName: pluginName,
          skipcheck: true
        });
        var totalLockValue = this.getLockCount(attrName, {
          skipcheck: true
        });

        if (totalLockValue === 0) {
          return _get(_getPrototypeOf(LockingModel.prototype), "set", this).call(this, attrName, !lockingValue);
        }

        return this;
      }
    }, {
      key: "setLocking",
      value: function setLocking(attrName, defaultLockValue) {
        if (this.isLocking(attrName)) return;
        if (!this._lockedAttributes) this._lockedAttributes = {};
        this._lockedAttributes[attrName] = defaultLockValue;
      }
    }, {
      key: "unsetLocking",
      value: function unsetLocking(attrName) {
        if (!this.isLocking(attrName)) return;
        if (!this._lockedAttributes) return;
        delete this._lockedAttributes[attrName];
        delete this._lockedAttributesValues[attrName];

        if (Object.keys(this._lockedAttributes).length === 0) {
          delete this._lockedAttributes;
          delete this._lockedAttributesValues;
        }
      }
    }, {
      key: "isLocking",
      value: function isLocking(attrName) {
        var isCheckingGeneralLockingState = attrName === undefined;
        var isUsingLockedAttributes = Boolean(this.lockedAttributes || this._lockedAttributes);

        if (isCheckingGeneralLockingState) {
          return isUsingLockedAttributes;
        }

        if (!isUsingLockedAttributes) return false;

        if (!this._lockedAttributes) {
          this._lockedAttributes = _.result(this, 'lockedAttributes');
        }

        var isAttributeALockingAttribute = this._lockedAttributes.hasOwnProperty(attrName);

        if (!isAttributeALockingAttribute) return false;

        if (!this._lockedAttributesValues) {
          this._lockedAttributesValues = {};
        }

        if (!this._lockedAttributesValues[attrName]) {
          this._lockedAttributesValues[attrName] = {};
        }

        return true;
      }
    }, {
      key: "isLocked",
      value: function isLocked(attrName, options) {
        var shouldSkipCheck = options === null || options === void 0 ? void 0 : options.skipcheck;

        if (!shouldSkipCheck) {
          var stopProcessing = !this.isLocking(attrName);
          if (stopProcessing) return;
        }

        return this.getLockCount(attrName) > 0;
      }
    }, {
      key: "getLockCount",
      value: function getLockCount(attrName, options) {
        var shouldSkipCheck = options === null || options === void 0 ? void 0 : options.skipcheck;

        if (!shouldSkipCheck) {
          var stopProcessing = !this.isLocking(attrName);
          if (stopProcessing) return;
        }

        var isGettingValueForSpecificPlugin = options === null || options === void 0 ? void 0 : options.pluginName;

        if (isGettingValueForSpecificPlugin) {
          return this._lockedAttributesValues[attrName][options.pluginName] ? 1 : 0;
        }

        var lockingAttributeValues = Object.values(this._lockedAttributesValues[attrName]);
        var lockingAttributeValuesSum = lockingAttributeValues.reduce(function (sum, value) {
          return sum + (value ? 1 : 0);
        }, 0);
        return lockingAttributeValuesSum;
      }
    }, {
      key: "setLockState",
      value: function setLockState(attrName, value, options) {
        var shouldSkipCheck = options === null || options === void 0 ? void 0 : options.skipcheck;

        if (!shouldSkipCheck) {
          var stopProcessing = !this.isLocking(attrName);
          if (stopProcessing) return this;
        }

        var isSettingValueForSpecificPlugin = options === null || options === void 0 ? void 0 : options.pluginName;

        if (!isSettingValueForSpecificPlugin) {
          console.error('Must supply a pluginName to set a locked attribute lock value');
          options.pluginName = 'compatibility';
        }

        if (value) {
          this._lockedAttributesValues[attrName][options.pluginName] = value;
        } else {
          delete this._lockedAttributesValues[attrName][options.pluginName];
        }

        return this;
      }
    }]);

    return LockingModel;
  }(Backbone.Model));

  var AdaptSingleton = function (_LockingModel) {
    _inherits(AdaptSingleton, _LockingModel);

    var _super = _createSuper(AdaptSingleton);

    function AdaptSingleton() {
      _classCallCheck(this, AdaptSingleton);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptSingleton, [{
      key: "initialize",
      value: function initialize() {
        this.loadScript = window.__loadScript;
        this.location = {};
        this.store = {};
        this.setupWait();
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return {
          _canScroll: true,
          _outstandingCompletionChecks: 0,
          _pluginWaitCount: 0,
          _isStarted: false,
          _shouldDestroyContentObjects: true
        };
      }
    }, {
      key: "lockedAttributes",
      value: function lockedAttributes() {
        return {
          _canScroll: false
        };
      }
    }, {
      key: "componentStore",
      get: function () {
        this.log.deprecated('Adapt.componentStore, please use Adapt.store instead');
        return this.store;
      }
    }, {
      key: "init",
      value: function init() {
        var _this = this;

        this.addDirection();
        this.disableAnimation();
        this.trigger('adapt:preInitialize');
        this.deferUntilCompletionChecked(function () {
          _this.trigger('adapt:start');

          if (!Backbone.History.started) {
            Backbone.history.start();
          }

          _this.set('_isStarted', true);

          _this.trigger('adapt:initialize');
        });
      }
    }, {
      key: "checkingCompletion",
      value: function checkingCompletion() {
        var outstandingChecks = this.get('_outstandingCompletionChecks');
        this.set('_outstandingCompletionChecks', outstandingChecks + 1);
      }
    }, {
      key: "checkedCompletion",
      value: function checkedCompletion() {
        var outstandingChecks = this.get('_outstandingCompletionChecks');
        this.set('_outstandingCompletionChecks', outstandingChecks - 1);
      }
    }, {
      key: "deferUntilCompletionChecked",
      value: function () {
        var _deferUntilCompletionChecked = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          var _this2 = this;

          var callback,
              _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  callback = _args.length > 0 && _args[0] !== undefined ? _args[0] : function () {};

                  if (!(this.get('_outstandingCompletionChecks') === 0)) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return", callback());

                case 3:
                  return _context.abrupt("return", new Promise(function (resolve) {
                    var checkIfAnyChecksOutstanding = function (model, outstandingChecks) {
                      if (outstandingChecks !== 0) return;

                      _this2.off('change:_outstandingCompletionChecks', checkIfAnyChecksOutstanding);

                      callback();
                      resolve();
                    };

                    _this2.on('change:_outstandingCompletionChecks', checkIfAnyChecksOutstanding);
                  }));

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function deferUntilCompletionChecked() {
          return _deferUntilCompletionChecked.apply(this, arguments);
        }

        return deferUntilCompletionChecked;
      }()
    }, {
      key: "setupWait",
      value: function setupWait() {
        var _this3 = this;

        this.wait = new Wait();

        var beginWait = function () {
          _this3.log.deprecated("Use Adapt.wait.begin() as Adapt.trigger('plugin:beginWait') may be removed in the future");

          _this3.wait.begin();
        };

        var endWait = function () {
          _this3.log.deprecated("Use Adapt.wait.end() as Adapt.trigger('plugin:endWait') may be removed in the future");

          _this3.wait.end();
        };

        var ready = function () {
          if (_this3.wait.isWaiting()) {
            return;
          }

          var isEventListening = _this3._events['plugins:ready'];

          if (!isEventListening) {
            return;
          }

          _this3.log.deprecated("Use Adapt.wait.queue(callback) as Adapt.on('plugins:ready', callback) may be removed in the future");

          _this3.trigger('plugins:ready');
        };

        this.listenTo(this.wait, 'ready', ready);
        this.listenTo(this, {
          'plugin:beginWait': beginWait,
          'plugin:endWait': endWait
        });
      }
    }, {
      key: "isWaitingForPlugins",
      value: function isWaitingForPlugins() {
        this.log.deprecated('Use Adapt.wait.isWaiting() as Adapt.isWaitingForPlugins() may be removed in the future');
        return this.wait.isWaiting();
      }
    }, {
      key: "checkPluginsReady",
      value: function checkPluginsReady() {
        this.log.deprecated('Use Adapt.wait.isWaiting() as Adapt.checkPluginsReady() may be removed in the future');

        if (this.isWaitingForPlugins()) {
          return;
        }

        this.trigger('plugins:ready');
      }
    }, {
      key: "navigateToElement",
      value: function () {
        var _navigateToElement = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function navigateToElement() {
          return _navigateToElement.apply(this, arguments);
        }

        return navigateToElement;
      }()
    }, {
      key: "scrollTo",
      value: function () {
        var _scrollTo = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        function scrollTo() {
          return _scrollTo.apply(this, arguments);
        }

        return scrollTo;
      }()
    }, {
      key: "register",
      value: function register(name, object) {
        var _this4 = this;

        if (Array.isArray(name)) {
          name.forEach(function (name) {
            return _this4.register(name, object);
          });
          return object;
        }

        if (name.split(' ').length > 1) {
          this.register(name.split(' '), object);
          return object;
        }

        if (!object.view && !object.model || object instanceof Backbone.View) {
          this.log.deprecated('View-only registrations are no longer supported');
          object = {
            view: object
          };
        }

        if (object.view && !object.view.template) {
          object.view.template = name;
        }

        var isModelSetAndInvalid = object.model && !(object.model.prototype instanceof Backbone.Model) && !(object.model instanceof Function);

        if (isModelSetAndInvalid) {
          throw new Error('The registered model is not a Backbone.Model or Function');
        }

        var isViewSetAndInvalid = object.view && !(object.view.prototype instanceof Backbone.View) && !(object.view instanceof Function);

        if (isViewSetAndInvalid) {
          throw new Error('The registered view is not a Backbone.View or Function');
        }

        this.store[name] = Object.assign({}, this.store[name], object);
        return object;
      }
    }, {
      key: "getViewName",
      value: function getViewName(nameModelViewOrData) {
        var _this5 = this;

        if (typeof nameModelViewOrData === 'string') {
          return nameModelViewOrData;
        }

        if (nameModelViewOrData instanceof Backbone.Model) {
          nameModelViewOrData = nameModelViewOrData.toJSON();
        }

        if (nameModelViewOrData instanceof Backbone.View) {
          var foundName;
          Object.entries(this.store).forEach(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                key = _ref2[0],
                entry = _ref2[1];

            if (!(entry !== null && entry !== void 0 && entry.view)) return;
            if (!(nameModelViewOrData instanceof entry.view)) return;
            foundName = key;
            return true;
          });
          return foundName;
        }

        if (nameModelViewOrData instanceof Object) {
          var names = [typeof nameModelViewOrData._view === 'string' && nameModelViewOrData._view, typeof nameModelViewOrData._component === 'string' && nameModelViewOrData._component, typeof nameModelViewOrData._type === 'string' && nameModelViewOrData._type].filter(Boolean);

          if (names.length) {
            var name = names.find(function (name) {
              var _this5$store$name;

              return (_this5$store$name = _this5.store[name]) === null || _this5$store$name === void 0 ? void 0 : _this5$store$name.view;
            });
            return name || names.pop();
          }
        }

        throw new Error('Cannot derive view class name from input');
      }
    }, {
      key: "getViewClass",
      value: function getViewClass(nameModelViewOrData) {
        var _object$view;

        var name = this.getViewName(nameModelViewOrData);
        var object = this.store[name];

        if (!object) {
          this.log.warnOnce("A view for '".concat(name, "' isn't registered in your project"));
          return;
        }

        var isBackboneView = ((_object$view = object.view) === null || _object$view === void 0 ? void 0 : _object$view.prototype) instanceof Backbone.View;

        if (!isBackboneView && object.view instanceof Function) {
          return object.view();
        }

        return object.view;
      }
    }, {
      key: "getModelName",
      value: function getModelName(nameModelOrData) {
        var _this6 = this;

        if (typeof nameModelOrData === 'string') {
          return nameModelOrData;
        }

        if (nameModelOrData instanceof Backbone.Model) {
          nameModelOrData = nameModelOrData.toJSON();
        }

        if (nameModelOrData instanceof Object) {
          var _entry$view;

          var name = nameModelOrData._component;
          var entry = this.store[name];
          var isViewOnlyQuestion = entry && !entry.model && ((_entry$view = entry.view) === null || _entry$view === void 0 ? void 0 : _entry$view._isQuestionType);

          if (isViewOnlyQuestion) {
            this.log.deprecated("Assuming a question model for a view-only question: ".concat(name));
            return 'question';
          }

          var names = [typeof nameModelOrData._model === 'string' && nameModelOrData._model, typeof nameModelOrData._component === 'string' && nameModelOrData._component, typeof nameModelOrData._type === 'string' && nameModelOrData._type].filter(Boolean);

          if (names.length) {
            var _name = names.find(function (name) {
              var _this6$store$name;

              return (_this6$store$name = _this6.store[name]) === null || _this6$store$name === void 0 ? void 0 : _this6$store$name.model;
            });

            return _name || names.pop();
          }
        }

        throw new Error('Cannot derive model class name from input');
      }
    }, {
      key: "getModelClass",
      value: function getModelClass(nameModelOrData) {
        var _object$model;

        var name = this.getModelName(nameModelOrData);
        var object = this.store[name];

        if (!object) {
          this.log.warnOnce("A model for '".concat(name, "' isn't registered in your project"));
          return;
        }

        var isBackboneModel = ((_object$model = object.model) === null || _object$model === void 0 ? void 0 : _object$model.prototype) instanceof Backbone.Model;

        if (!isBackboneModel && object.model instanceof Function) {
          return object.model();
        }

        return object.model;
      }
    }, {
      key: "findById",
      value: function findById(id) {
        return this.data.findById(id);
      }
    }, {
      key: "findViewByModelId",
      value: function findViewByModelId(id) {
        var model = this.data.findById(id);
        if (!model) return;
        if (model === this.parentView.model) return this.parentView;
        var idPathToView = [id];
        var currentLocationId = this.location._currentId;
        var currentLocationModel = model.getAncestorModels().find(function (model) {
          var modelId = model.get('_id');
          if (modelId === currentLocationId) return true;
          idPathToView.unshift(modelId);
        });

        if (!currentLocationModel) {
          return console.warn("Adapt.findViewByModelId() unable to find view for model id: ".concat(id));
        }

        var foundView = idPathToView.reduce(function (view, currentId) {
          if (!view) return;
          var childViews = view.getChildViews();
          return childViews === null || childViews === void 0 ? void 0 : childViews.find(function (view) {
            return view.model.get('_id') === currentId;
          });
        }, this.parentView);
        return foundView;
      }
    }, {
      key: "findByTrackingPosition",
      value: function findByTrackingPosition(trackingPosition) {
        return this.data.findByTrackingPosition(trackingPosition);
      }
    }, {
      key: "parseRelativeString",
      value: function parseRelativeString(relativeString) {
        var splitIndex = relativeString.search(/[ +\-\d]{1}/);
        var type = relativeString.slice(0, splitIndex).replace(/^@/, '');
        var offset = parseInt(relativeString.slice(splitIndex).trim() || 0);
        return {
          type: type,
          offset: offset
        };
      }
    }, {
      key: "addDirection",
      value: function addDirection() {
        var defaultDirection = this.config.get('_defaultDirection');
        $('html').addClass('dir-' + defaultDirection).attr('dir', defaultDirection);
      }
    }, {
      key: "disableAnimation",
      value: function disableAnimation() {
        var disableAnimationArray = this.config.get('_disableAnimationFor');
        var disableAnimation = this.config.get('_disableAnimation');

        if (disableAnimationArray) {
          for (var i = 0, l = disableAnimationArray.length; i < l; i++) {
            if (!$('html').is(disableAnimationArray[i])) continue;
            this.config.set('_disableAnimation', true);
            $('html').addClass('disable-animation');
            console.log('Animation disabled.');
          }

          return;
        }

        $('html').toggleClass('disable-animation', disableAnimation === true);
      }
    }, {
      key: "remove",
      value: function () {
        var _remove = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          var currentView;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  currentView = this.parentView;

                  if (currentView) {
                    currentView.model.setOnChildren({
                      '_isReady': false,
                      '_isRendered': false
                    });
                  }

                  this.trigger('preRemove', currentView);
                  _context4.next = 5;
                  return this.wait.queue();

                case 5:
                  if (currentView && this.get('_shouldDestroyContentObjects')) {
                    currentView.destroy();
                  }

                  this.trigger('remove', currentView);

                  _.defer(this.trigger.bind(this), 'postRemove', currentView);

                case 8:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function remove() {
          return _remove.apply(this, arguments);
        }

        return remove;
      }()
    }]);

    return AdaptSingleton;
  }(LockingModel);

  var Adapt = __AMD("core/js/adapt", new AdaptSingleton());

  var TemplateRenderEvent = __AMD("core/js/templateRenderEvent", function (_Backbone$Controller) {
    _inherits(TemplateRenderEvent, _Backbone$Controller);

    var _super = _createSuper(TemplateRenderEvent);

    function TemplateRenderEvent() {
      _classCallCheck(this, TemplateRenderEvent);

      return _super.apply(this, arguments);
    }

    _createClass(TemplateRenderEvent, [{
      key: "initialize",
      value: function initialize(type, name, mode, value, args) {
        this.type = type;
        this.name = name;
        this.mode = mode;
        this.value = value;
        this.args = args;
      }
    }]);

    return TemplateRenderEvent;
  }(Backbone.Controller));

  function onRender(cb) {
    var intercept = function (object, name, mode, cb) {
      return object[name] = cb.bind(object, object[name], name, mode);
    };

    Object.keys(Handlebars.templates).forEach(function (name) {
      intercept(Handlebars.templates, name, 'template', cb);
    });
    Object.keys(Handlebars.partials).forEach(function (name) {
      intercept(Handlebars.partials, name, 'partial', cb);
    });
  }

  onRender(function (template, name, mode) {
    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      args[_key - 3] = arguments[_key];
    }

    var preRenderEvent = new TemplateRenderEvent("".concat(mode, ":preRender"), name, mode, null, args);
    Adapt.trigger(preRenderEvent.type, preRenderEvent);
    var value = template.apply(void 0, _toConsumableArray(preRenderEvent.args));
    var postRenderEvent = new TemplateRenderEvent("".concat(mode, ":postRender"), name, mode, value, preRenderEvent.args);
    Adapt.trigger(postRenderEvent.type, postRenderEvent);
    return postRenderEvent.value;
  });

  Adapt.on('app:dataReady', function () {
    var config = Adapt.config.get('_fixes');
    if ((config === null || config === void 0 ? void 0 : config._imgLazyLoad) === false) return;
    applyImgLoadingFix();
  });

  function applyImgLoadingFix() {
    var findImgTag = /<img([^>]*)>/gi;
    var hasLoadingAttr = / loading=/gi;
    Adapt.on('template:postRender partial:postRender', function (event) {
      var imgTagsFound = event.value.match(findImgTag);

      if (!imgTagsFound) {
        return;
      }

      event.value = imgTagsFound.reduce(function (value, img) {
        if (hasLoadingAttr.test(img)) {
          return value;
        }

        return value.replace(img, img.replace(findImgTag, '<img loading="eager"$1>'));
      }, event.value);
    });
    Adapt.on('reactElement:preRender', function (event) {
      if (event.name !== 'img') return;
      var options = event.args[1] = event.args[1] || {};
      if (options && options.hasOwnProperty('loading')) return;
      options.loading = 'eager';
    });
  }

  var BrowserFocus = __AMD("core/js/a11y/browserFocus", function (_Backbone$Controller) {
    _inherits(BrowserFocus, _Backbone$Controller);

    var _super = _createSuper(BrowserFocus);

    function BrowserFocus() {
      _classCallCheck(this, BrowserFocus);

      return _super.apply(this, arguments);
    }

    _createClass(BrowserFocus, [{
      key: "initialize",
      value: function initialize() {
        this._onBlur = this._onBlur.bind(this);
        this._onClick = this._onClick.bind(this);
        this.$body = $('body');
        this.listenTo(Adapt, {
          'accessibility:ready': this._attachEventListeners
        });
      }
    }, {
      key: "_attachEventListeners",
      value: function _attachEventListeners() {
        this.$body.on('blur', '*', this._onBlur).on('blur', this._onBlur);
        this.$body[0].addEventListener('click', this._onClick, true);
      }
    }, {
      key: "_onBlur",
      value: function _onBlur(event) {
        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isFocusNextOnDisabled) {
          return;
        }

        var $element = $(event.target);

        if ($element.is('[data-a11y-force-focus]')) {
          _.defer(function () {
            return $element.removeAttr('tabindex data-a11y-force-focus');
          });
        }

        if (event.target !== event.currentTarget) {
          return;
        }

        if (!$element.is('[disabled]')) {
          return;
        }

        Adapt.a11y.focusNext($element);
      }
    }, {
      key: "_onClick",
      value: function _onClick(event) {
        var $element = $(event.target);

        if ($element.is('[aria-disabled=true]')) {
          event.preventDefault();
          event.stopImmediatePropagation();
        }

        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isFocusOnClickEnabled) {
          return;
        }

        var $stack = $([].concat(_toConsumableArray($element.toArray()), _toConsumableArray($element.parents().toArray())));
        var $focusable = $stack.filter(config._options._tabbableElements);

        if (!$focusable.length) {
          return;
        }

        $focusable[0].focus();
      }
    }]);

    return BrowserFocus;
  }(Backbone.Controller));

  var FocusOptions = __AMD("core/js/a11y/focusOptions", function FocusOptions() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$preventScroll = _ref.preventScroll,
        preventScroll = _ref$preventScroll === void 0 ? false : _ref$preventScroll,
        _ref$defer = _ref.defer,
        defer = _ref$defer === void 0 ? false : _ref$defer;

    _classCallCheck(this, FocusOptions);

    this.preventScroll = preventScroll;
    this.defer = defer;
  });

  var KeyboardFocusOutline = __AMD("core/js/a11y/keyboardFocusOutline", function (_Backbone$Controller) {
    _inherits(KeyboardFocusOutline, _Backbone$Controller);

    var _super = _createSuper(KeyboardFocusOutline);

    function KeyboardFocusOutline() {
      _classCallCheck(this, KeyboardFocusOutline);

      return _super.apply(this, arguments);
    }

    _createClass(KeyboardFocusOutline, [{
      key: "initialize",
      value: function initialize() {
        this._onKeyDown = this._onKeyDown.bind(this);
        this.$html = $('html');
        this.showOnKeys = {
          9: true,
          13: true,
          32: true,
          37: true,
          38: true,
          39: true,
          40: true
        };
        this.listenTo(Adapt, {
          'accessibility:ready': this._attachEventListeners
        });
      }
    }, {
      key: "_attachEventListeners",
      value: function _attachEventListeners() {
        document.addEventListener('keydown', this._onKeyDown);

        this._start();
      }
    }, {
      key: "_start",
      value: function _start() {
        var config = Adapt.a11y.config;

        if (config._options._isFocusOutlineDisabled) {
          this.$html.addClass('a11y-disable-focusoutline');
          return;
        }

        if (!config._isEnabled || !config._options._isFocusOutlineKeyboardOnlyEnabled) {
          return;
        }

        this.$html.addClass('a11y-disable-focusoutline');
      }
    }, {
      key: "_onKeyDown",
      value: function _onKeyDown(event) {
        var config = Adapt.a11y.config;

        if (config._options._isFocusOutlineDisabled) {
          this.$html.addClass('a11y-disable-focusoutline');
          return;
        }

        if (!config._isEnabled || !config._options._isFocusOutlineKeyboardOnlyEnabled || !this.showOnKeys[event.keyCode]) {
          return;
        }

        var $element = $(event.target);

        if (!$element.is(config._options._tabbableElements) || $element.is(config._options._focusOutlineKeyboardOnlyIgnore)) {
          return;
        }

        this.$html.removeClass('a11y-disable-focusoutline');
      }
    }]);

    return KeyboardFocusOutline;
  }(Backbone.Controller));

  var Log = __AMD("core/js/a11y/log", function (_Backbone$Controller) {
    _inherits(Log, _Backbone$Controller);

    var _super = _createSuper(Log);

    function Log() {
      _classCallCheck(this, Log);

      return _super.apply(this, arguments);
    }

    _createClass(Log, [{
      key: "initialize",
      value: function initialize() {
        this._warned = {};
      }
    }, {
      key: "_hasWarned",
      value: function _hasWarned(args) {
        var config = Adapt.a11y.config;

        if (!config._options._warnFirstOnly) {
          return false;
        }

        var hash = args.map(String).join(':');

        if (this._warned[hash]) {
          return true;
        }

        this._warned[hash] = true;
        return false;
      }
    }, {
      key: "_canWarn",
      value: function _canWarn() {
        var config = Adapt.a11y.config;
        return Boolean(config._options._warn);
      }
    }, {
      key: "removed",
      value: function removed() {
        var _Adapt$log;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (!this._canWarn) {
          return;
        }

        args = ['A11Y'].concat(args);

        if (this._hasWarned(args)) {
          return;
        }

        (_Adapt$log = Adapt.log).removed.apply(_Adapt$log, _toConsumableArray(args));

        return this;
      }
    }, {
      key: "deprecated",
      value: function deprecated() {
        var _Adapt$log2;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        if (!this._canWarn) {
          return;
        }

        args = ['A11Y'].concat(args);

        if (this._hasWarned(args)) {
          return;
        }

        (_Adapt$log2 = Adapt.log).deprecated.apply(_Adapt$log2, _toConsumableArray(args));

        return this;
      }
    }]);

    return Log;
  }(Backbone.Controller));

  var Scroll = __AMD("core/js/a11y/scroll", function (_Backbone$Controller) {
    _inherits(Scroll, _Backbone$Controller);

    var _super = _createSuper(Scroll);

    function Scroll() {
      _classCallCheck(this, Scroll);

      return _super.apply(this, arguments);
    }

    _createClass(Scroll, [{
      key: "initialize",
      value: function initialize() {
        this._onTouchStart = this._onTouchStart.bind(this);
        this._onTouchEnd = this._onTouchEnd.bind(this);
        this._onScrollEvent = this._onScrollEvent.bind(this);
        this._onKeyDown = this._onKeyDown.bind(this);
        this._scrollDisabledElements = $([]);
        this.$window = $(window);
        this.$body = $('body');
        this._preventScrollOnKeys = {
          37: true,
          38: true,
          39: true,
          40: true
        };
        this._ignoreKeysOnElementsMatching = 'textarea, input, select';
        this._isRunning = false;
        this._touchStartEventObject = null;
      }
    }, {
      key: "disable",
      value: function disable($elements) {
        $elements = $($elements);
        this._scrollDisabledElements = this._scrollDisabledElements.add($elements);

        this._checkRunning();

        return this;
      }
    }, {
      key: "enable",
      value: function enable($elements) {
        $elements = $($elements);

        if (!$elements.length) {
          this.clear();
          return this;
        }

        this._scrollDisabledElements = this._scrollDisabledElements.not($elements);

        this._checkRunning();

        return this;
      }
    }, {
      key: "clear",
      value: function clear() {
        this._scrollDisabledElements = $([]);

        this._checkRunning();

        return this;
      }
    }, {
      key: "_checkRunning",
      value: function _checkRunning() {
        if (!this._scrollDisabledElements.length) {
          this._stop();

          return;
        }

        this._start();
      }
    }, {
      key: "_start",
      value: function _start() {
        if (this._isRunning) {
          return;
        }

        this._isRunning = true;
        window.addEventListener('touchstart', this._onTouchStart);
        window.addEventListener('touchend', this._onTouchEnd);
        window.addEventListener('touchmove', this._onScrollEvent, {
          passive: false
        });
        window.addEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.addEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.addEventListener('keydown', this._onKeyDown);
      }
    }, {
      key: "_onTouchStart",
      value: function _onTouchStart(event) {
        event = $.event.fix(event);
        this._touchStartEventObject = event;
        return true;
      }
    }, {
      key: "_onTouchEnd",
      value: function _onTouchEnd() {
        this._touchStartEventObject = null;
        return true;
      }
    }, {
      key: "_onScrollEvent",
      value: function _onScrollEvent(event) {
        event = $.event.fix(event);
        return this._preventScroll(event);
      }
    }, {
      key: "_onKeyDown",
      value: function _onKeyDown(event) {
        event = $.event.fix(event);

        if (!this._preventScrollOnKeys[event.keyCode]) {
          return;
        }

        var $target = $(event.target);

        if ($target.is(this._ignoreKeysOnElementsMatching)) {
          return;
        }

        return this._preventScroll(event);
      }
    }, {
      key: "_preventScroll",
      value: function _preventScroll(event) {
        var _event$touches;

        var isGesture = ((_event$touches = event.touches) === null || _event$touches === void 0 ? void 0 : _event$touches.length) > 1;

        if (isGesture) {
          return;
        }

        var $target = $(event.target);

        if (this._scrollDisabledElements.length) {
          var scrollingParent = this._getScrollingParent(event, $target);

          if (scrollingParent.filter(this._scrollDisabledElements).length === 0) {
            this.$window.scroll();
            return;
          }
        }

        event.preventDefault();
        return false;
      }
    }, {
      key: "_getScrollingParent",
      value: function _getScrollingParent(event, $target) {
        var _this$_touchStartEven;

        var isTouchEvent = event.type === 'touchmove';
        var hasTouchStartEvent = (_this$_touchStartEven = this._touchStartEventObject) === null || _this$_touchStartEven === void 0 ? void 0 : _this$_touchStartEven.originalEvent;

        if (isTouchEvent && !hasTouchStartEvent) {
          return $target;
        }

        var directionY = this._getScrollDirection(event);

        if (directionY === 'none') {
          return this.$body;
        }

        var parents = $target.parents();

        for (var i = 0, l = parents.length; i < l; i++) {
          var $parent = $(parents[i]);

          if ($parent.is('body')) {
            return this.$body;
          }

          if (!this._isScrollable($parent)) {
            continue;
          }

          if (!this._isScrolling($parent, directionY)) {
            continue;
          }

          return $parent;
        }

        return this.$body;
      }
    }, {
      key: "_isScrollable",
      value: function _isScrollable($target) {
        var scrollType = $target.css('overflow-y');

        if (scrollType !== 'auto' && scrollType !== 'scroll') {
          return false;
        }

        var pointerEvents = $target.css('pointer-events');

        if (pointerEvents === 'none') {
          return false;
        }

        return true;
      }
    }, {
      key: "_isScrolling",
      value: function _isScrolling($target, directionY) {
        var scrollTop = Math.ceil($target.scrollTop());
        var innerHeight = $target.outerHeight();
        var scrollHeight = $target[0].scrollHeight;
        var hasScrollingSpace = false;

        switch (directionY) {
          case 'down':
            hasScrollingSpace = scrollTop + innerHeight < scrollHeight;

            if (hasScrollingSpace) {
              return true;
            }

            break;

          case 'up':
            hasScrollingSpace = scrollTop > 0;

            if (hasScrollingSpace) {
              return true;
            }

            break;
        }

        return false;
      }
    }, {
      key: "_getScrollDirection",
      value: function _getScrollDirection(event) {
        var deltaY = this._getScrollDelta(event);

        if (deltaY === 0) {
          return 'none';
        }

        return deltaY > 0 ? 'up' : 'down';
      }
    }, {
      key: "_getScrollDelta",
      value: function _getScrollDelta(event) {
        var deltaY = 0;
        var isTouchEvent = event.type === 'touchmove';
        var originalEvent = event.originalEvent;

        if (isTouchEvent) {
          var startOriginalEvent = this._touchStartEventObject.originalEvent;
          var currentY = originalEvent.pageY;
          var previousY = startOriginalEvent.pageY;

          if (currentY === 0 || currentY === previousY) {
            currentY = originalEvent.touches[0].pageY;
            previousY = startOriginalEvent.touches[0].pageY;
          }

          deltaY = currentY - previousY;
        } else {
          var hasDeltaY = originalEvent.wheelDeltaY || originalEvent.deltaY !== undefined;

          if (hasDeltaY) {
            deltaY = -originalEvent.deltaY;
          } else {
            deltaY = originalEvent.wheelDelta || 0;
          }
        }

        return deltaY;
      }
    }, {
      key: "_stop",
      value: function _stop() {
        if (!this._isRunning) {
          return;
        }

        this._isRunning = false;
        window.removeEventListener('touchstart', this._onTouchStart);
        window.removeEventListener('touchend', this._onTouchEnd);
        window.removeEventListener('touchmove', this._onScrollEvent, {
          passive: false
        });
        window.removeEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.removeEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.removeEventListener('keydown', this._onKeyDown);
      }
    }]);

    return Scroll;
  }(Backbone.Controller));

  var WrapFocus = __AMD("core/js/a11y/wrapFocus", function (_Backbone$Controller) {
    _inherits(WrapFocus, _Backbone$Controller);

    var _super = _createSuper(WrapFocus);

    function WrapFocus() {
      _classCallCheck(this, WrapFocus);

      return _super.apply(this, arguments);
    }

    _createClass(WrapFocus, [{
      key: "initialize",
      value: function initialize() {
        _.bindAll(this, '_onWrapAround');

        this.listenTo(Adapt, {
          'accessibility:ready': this._attachEventListeners
        });
      }
    }, {
      key: "_attachEventListeners",
      value: function _attachEventListeners() {
        var config = Adapt.a11y.config;
        $('body').on('click focus', config._options._focusguard, this._onWrapAround);
      }
    }, {
      key: "_onWrapAround",
      value: function _onWrapAround(event) {
        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isPopupWrapFocusEnabled) {
          return;
        }

        event.preventDefault();
        event.stopPropagation();
        Adapt.a11y.focusFirst('body', {
          defer: false
        });
      }
    }]);

    return WrapFocus;
  }(Backbone.Controller));

  var Popup = __AMD("core/js/a11y/popup", function (_Backbone$Controller) {
    _inherits(Popup, _Backbone$Controller);

    var _super = _createSuper(Popup);

    function Popup() {
      _classCallCheck(this, Popup);

      return _super.apply(this, arguments);
    }

    _createClass(Popup, [{
      key: "initialize",
      value: function initialize() {
        this._floorStack = [$('body')];
        this._focusStack = [];
        this._tabIndexes = {};
        this._ariaHiddens = {};
        this._elementUIDIndex = 0;
        this.listenTo(Adapt, {
          'popup:opened': function ($element, ignoreInternalTrigger) {
            if (ignoreInternalTrigger) {
              return;
            }

            Adapt.a11y.log.deprecated('Adapt.trigger("popup:opened", $element) is replaced with Adapt.a11y.popupOpened($element);');
            this.opened($element, true);
          },
          'popup:closed': function ($target, ignoreInternalTrigger) {
            if (ignoreInternalTrigger) {
              return;
            }

            Adapt.a11y.log.deprecated('Adapt.trigger("popup:closed", $target) is replaced with Adapt.a11y.popupClosed($target);');
            this.closed($target, true);
          }
        });
      }
    }, {
      key: "opened",
      value: function opened($popupElement, silent) {
        $popupElement = $popupElement || $(document.activeElement);

        this._addPopupLayer($popupElement);

        if (!silent) {
          Adapt.trigger('popup:opened', $popupElement, true);
        }

        return this;
      }
    }, {
      key: "_addPopupLayer",
      value: function _addPopupLayer($popupElement) {
        var _this = this;

        $popupElement = $($popupElement);
        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isPopupManagementEnabled || $popupElement.length === 0) {
          return $popupElement;
        }

        this._floorStack.push($popupElement);

        this._focusStack.push($(document.activeElement));

        var $elements = $(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
        var $branch = $popupElement.add($popupElement.parents());
        var $siblings = $branch.siblings().filter(config._options._tabbableElementsExcludes);
        $elements = $elements.add($siblings);
        $elements.each(function (index, item) {
          var $item = $(item);
          var elementUID;

          if (typeof item.a11y_uid === 'undefined') {
            item.a11y_uid = 'UID' + ++_this._elementUIDIndex;
          }

          elementUID = item.a11y_uid;

          if (_this._tabIndexes[elementUID] === undefined) {
            _this._tabIndexes[elementUID] = [];
          }

          if (_this._ariaHiddens[elementUID] === undefined) {
            _this._ariaHiddens[elementUID] = [];
          }

          var tabindex = $item.attr('tabindex');
          var ariaHidden = $item.attr('aria-hidden');

          _this._tabIndexes[elementUID].push(tabindex === undefined ? '' : tabindex);

          _this._ariaHiddens[elementUID].push(ariaHidden === undefined ? '' : ariaHidden);

          if (config._options._isPopupTabIndexManagementEnabled) {
            $item.attr('tabindex', -1);
          }

          if (config._options._isPopupAriaHiddenManagementEnabled) {
            $item.attr('aria-hidden', true);
          }
        });
        var $items = $popupElement.find(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);

        if (config._options._isPopupTabIndexManagementEnabled) {
          $items.attr('tabindex', 0);
        }

        if (config._options._isPopupAriaHiddenManagementEnabled) {
          $items.removeAttr('aria-hidden').removeClass('aria-hidden').parents(config._options._ariaHiddenExcludes).removeAttr('aria-hidden').removeClass('aria-hidden');
        }
      }
    }, {
      key: "closed",
      value: function closed($focusElement, silent) {
        var $previousFocusElement = this._removeLastPopupLayer();

        $focusElement = $focusElement || $previousFocusElement || $('body');

        if (!silent) {
          Adapt.trigger('popup:closed', $focusElement, true);
        }

        Adapt.a11y.focusFirst($($focusElement), {
          preventScroll: true
        });
        return this;
      }
    }, {
      key: "_removeLastPopupLayer",
      value: function _removeLastPopupLayer() {
        var _this2 = this;

        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isPopupManagementEnabled) {
          return $(document.activeElement);
        }

        if (this._floorStack.length <= 1) {
          return;
        }

        this._floorStack.pop();

        $(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes).each(function (index, item) {
          var _this2$_tabIndexes$el, _this2$_tabIndexes$el2;

          var $item = $(item);
          var previousTabIndex = '';
          var previousAriaHidden = '';
          var elementUID;

          if (typeof item.a11y_uid === 'undefined') {
            item.a11y_uid = 'UID' + ++_this2._elementUIDIndex;
          }

          elementUID = item.a11y_uid;

          if ((_this2$_tabIndexes$el = _this2._tabIndexes[elementUID]) !== null && _this2$_tabIndexes$el !== void 0 && _this2$_tabIndexes$el.length) {
            previousTabIndex = _this2._tabIndexes[elementUID].pop();
            previousAriaHidden = _this2._ariaHiddens[elementUID].pop();
          }

          if ((_this2$_tabIndexes$el2 = _this2._tabIndexes[elementUID]) !== null && _this2$_tabIndexes$el2 !== void 0 && _this2$_tabIndexes$el2.length) {
            delete _this2._tabIndexes[elementUID];
            delete _this2._ariaHiddens[elementUID];
          }

          if (config._options._isPopupTabIndexManagementEnabled) {
            if (previousTabIndex === '') {
              $item.removeAttr('tabindex');
            } else {
              $item.attr({
                'tabindex': previousTabIndex
              });
            }
          }

          if (config._options._isPopupAriaHiddenManagementEnabled) {
            if (previousAriaHidden === '') {
              $item.removeAttr('aria-hidden');
            } else {
              $item.attr({
                'aria-hidden': previousAriaHidden
              });
            }
          }
        });
        return this._focusStack.pop();
      }
    }, {
      key: "setCloseTo",
      value: function setCloseTo($focusElement) {
        var $original = this._focusStack.pop();

        this._focusStack.push($focusElement);

        return $original;
      }
    }]);

    return Popup;
  }(Backbone.Controller));

  Object.assign($.fn, {
    isFixedPostion: function () {
      Adapt.a11y.log.removed('$("..").isFixedPostion was unneeded and has been removed, let us know if you need it back.');
      return false;
    },
    a11y_aria_label: function () {
      Adapt.a11y.log.removed('$("..").a11y_aria_label was incorrect behaviour.');
      return this;
    },
    limitedScrollTo: function () {
      Adapt.a11y.log.removed('$.limitedScrollTo had no impact on the screen reader cursor.');
      return this;
    },
    a11y_text: function () {
      Adapt.a11y.log.removed('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return this;
    },
    a11y_selected: function () {
      Adapt.a11y.log.removed('$("..").a11y_selected is removed. Please use aria-live instead.');
      return this;
    },
    a11y_on: function (isOn) {
      Adapt.a11y.log.deprecated('$("..").a11y_on, use Adapt.a11y.findTabbable($element); and Adapt.a11y.toggleAccessible($elements, isAccessible); instead.');
      var $tabbable = Adapt.a11y.findTabbable(this);
      Adapt.a11y.toggleAccessible($tabbable, isOn);
      return this;
    },
    a11y_only: function () {
      Adapt.a11y.log.removed('$("..").a11y_only, use Adapt.a11y.popupOpened($popupElement); instead.');
      return this;
    },
    scrollDisable: function () {
      if (Adapt.a11y.config._options._isScrollDisableEnabled === false) {
        return this;
      }

      Adapt.a11y.log.deprecated('$("..").scrollDisable, use Adapt.a11y.scrollDisable($elements); instead.');
      Adapt.a11y.scrollDisable(this);
      return this;
    },
    scrollEnable: function () {
      if (Adapt.a11y.config._options._isScrollDisableEnabled === false) {
        return this;
      }

      Adapt.a11y.log.deprecated('$("..").scrollEnable, use Adapt.a11y.scrollEnable($elements); instead.');
      Adapt.a11y.scrollEnable(this);
      return this;
    },
    a11y_popup: function () {
      Adapt.a11y.log.deprecated('$("..").a11y_popup, use Adapt.a11y.popupOpened($popupElement); instead.');
      return Adapt.a11y.popupOpened(this);
    },
    a11y_cntrl: function (isOn, withDisabled) {
      Adapt.a11y.log.deprecated('$("..").a11y_cntrl, use Adapt.a11y.toggleAccessible($elements, isAccessible); and if needed Adapt.a11y.toggleEnabled($elements, isEnabled); instead.');
      Adapt.a11y.toggleAccessible(this, isOn);
      if (withDisabled) Adapt.a11y.toggleEnabled(this, isOn);
      return this;
    },
    a11y_cntrl_enabled: function (isOn) {
      Adapt.a11y.log.deprecated('$("..").a11y_cntrl_enabled, use Adapt.a11y.toggleAccessibleEnabled($elements, isAccessibleEnabled); instead.');
      Adapt.a11y.toggleAccessibleEnabled(this, isOn);
      return this;
    },
    isReadable: function () {
      Adapt.a11y.log.deprecated('$("..").isReadable, use Adapt.a11y.isReadable($element); instead.');
      return Adapt.a11y.isReadable(this);
    },
    findForward: function (selector) {
      Adapt.a11y.log.removed('$("..").findForward has been removed as the use cases are very small, let us know if you need it back.');
      return Adapt.a11y._findFirstForward(this, selector);
    },
    findWalk: function (selector) {
      Adapt.a11y.log.removed('$("..").findWalk has been removed as the use cases are very small, let us know if you need it back.');
      return Adapt.a11y._findFindForwardDescendant(this, selector);
    },
    focusNoScroll: function () {
      Adapt.a11y.log.deprecated('$("..").focusNoScroll, use Adapt.a11y.focus($element); instead.');
      return Adapt.a11y.focus(this);
    },
    focusNext: function (returnOnly) {
      Adapt.a11y.log.deprecated('$("..").focusNext, use Adapt.a11y.focusNext($element); or if needed Adapt.a11y.findFirstReadable($element); instead.');

      if (returnOnly) {
        return Adapt.a11y.findFirstReadable(this);
      }

      return Adapt.a11y.focusNext(this);
    },
    focusOrNext: function (returnOnly) {
      Adapt.a11y.log.deprecated('$("..").focusOrNext, use Adapt.a11y.focusFirst($element); or if needed Adapt.a11y.findFirstReadable($element); or Adapt.a11y.isReadable($element); instead.');

      if (returnOnly) {
        if (Adapt.a11y.isReadable(this)) return this;
        return Adapt.a11y.findFirstReadable(this);
      }

      return Adapt.a11y.focusFirst(this);
    },
    a11y_focus: function (dontDefer) {
      Adapt.a11y.log.deprecated('$("..").a11y_focus, use Adapt.a11y.focusFirst($element, { defer: true }); instead.');
      Adapt.a11y.focusFirst(this, {
        defer: !dontDefer
      });
      return this;
    }
  });
  Object.assign($, {
    a11y_alert: function () {
      Adapt.a11y.log.removed('$.a11y_alert is removed. Please use aria-live instead.');
      return this;
    },
    a11y_update: function () {
      Adapt.a11y.log.removed('a11y_update is no longer required.');
      return this;
    },
    a11y_text: function (text) {
      Adapt.a11y.log.removed('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return text;
    },
    a11y_on: function (isOn, selector) {
      Adapt.a11y.log.deprecated('$("..").a11y_on, use Adapt.a11y.toggleHidden($elements, isHidden); instead.');
      return Adapt.a11y.toggleHidden(selector, !isOn);
    },
    a11y_popdown: function ($focusTarget) {
      Adapt.a11y.log.removed('$.a11y_popdown, use Adapt.a11y.popupClosed($focusTarget); instead.');
      return Adapt.a11y.popupClosed($focusTarget);
    },
    a11y_focus: function (dontDefer) {
      Adapt.a11y.log.deprecated('$.a11y_focus, use Adapt.a11y.focusFirst("body", { defer: true }); instead.');
      Adapt.a11y.focusFirst('body', {
        defer: !dontDefer
      });
      return this;
    },
    a11y_normalize: function (html) {
      Adapt.a11y.log.deprecated('$.a11y_normalize, use Adapt.a11y.normalize("html"); instead.');
      return Adapt.a11y.normalize(html);
    },
    a11y_remove_breaks: function (html) {
      Adapt.a11y.log.deprecated('$.a11y_remove_breaks, use Adapt.a11y.removeBreaks("html"); instead.');
      return Adapt.a11y.removeBreaks(html);
    }
  });

  var A11y = function (_Backbone$Controller) {
    _inherits(A11y, _Backbone$Controller);

    var _super = _createSuper(A11y);

    function A11y() {
      _classCallCheck(this, A11y);

      return _super.apply(this, arguments);
    }

    _createClass(A11y, [{
      key: "defaults",
      value: function defaults() {
        return {
          _isFocusOutlineKeyboardOnlyEnabled: true,
          _isFocusOutlineDisabled: false,
          _isFocusAssignmentEnabled: true,
          _isFocusOnClickEnabled: true,
          _isFocusNextOnDisabled: true,
          _isScrollDisableEnabled: true,
          _isAriaHiddenManagementEnabled: true,
          _isPopupManagementEnabled: true,
          _isPopupWrapFocusEnabled: true,
          _isPopupAriaHiddenManagementEnabled: true,
          _isPopupTabIndexManagementEnabled: true,
          _ariaHiddenExcludes: ':not(#wrapper):not(body)',
          _tabbableElements: 'a,button,input,select,textarea,[tabindex]:not([data-a11y-force-focus])',
          _focusOutlineKeyboardOnlyIgnore: 'input,textarea',
          _tabbableElementsExcludes: ':not(.a11y-ignore):not([data-a11y-force-focus])',
          _focusableElements: 'a,button,input,select,textarea,[tabindex],label',
          _readableElements: '[role=heading],[aria-label],[aria-labelledby],[alt]',
          _focusguard: '.a11y-focusguard',
          _wrapStyleElements: 'b,i,abbr,strong,em,small,sub,sup,ins,del,mark,zw,nb',
          _warnFirstOnly: true,
          _warn: true
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.isReadable = this.isReadable.bind(this);
        this.isTabbable = this.isTabbable.bind(this);
        this.$html = $('html');
        this._htmlCharRegex = /&.*;/g;
        this.config = null;
        this._browserFocus = new BrowserFocus();
        this._keyboardFocusOutline = new KeyboardFocusOutline();
        this._wrapFocus = new WrapFocus();
        this._popup = new Popup();
        this._scroll = new Scroll();
        this.log = new Log();

        this._removeLegacyElements();

        this.listenToOnce(Adapt, {
          'app:dataLoaded': this._onDataLoaded,
          'navigationView:postRender': this._removeLegacyElements
        }, this);
        Adapt.on('device:changed', this._setupNoSelect);
        this.listenTo(Adapt, {
          'router:location': this._onNavigationStart,
          'contentObjectView:ready router:plugin': this._onNavigationEnd
        });
      }
    }, {
      key: "_onDataLoaded",
      value: function _onDataLoaded() {
        this.config = Adapt.config.get('_accessibility');
        this.config._isActive = false;
        this.config._options = _.defaults(this.config._options || {}, this.defaults());
        Adapt.offlineStorage.set('a11y', false);
        this.$html.toggleClass('has-accessibility', this.isEnabled());

        this._setupNoSelect();

        this._addFocuserDiv();

        if (this._isReady) {
          return;
        }

        this._isReady = true;
        Adapt.trigger('accessibility:ready');
      }
    }, {
      key: "_setupNoSelect",
      value: function _setupNoSelect() {
        var _this$config,
            _this = this;

        if (!((_this$config = this.config) !== null && _this$config !== void 0 && _this$config._disableTextSelectOnClasses)) {
          return;
        }

        var classes = this.config._disableTextSelectOnClasses.split(' ');

        var isMatch = classes.some(function (className) {
          return _this.$html.is(className);
        });
        this.$html.toggleClass('u-no-select', isMatch);
      }
    }, {
      key: "_addFocuserDiv",
      value: function _addFocuserDiv() {
        if ($('#a11y-focuser').length) {
          return;
        }

        $('body').append($('<div id="a11y-focuser" class="a11y-ignore" tabindex="-1">&nbsp;</div>'));
      }
    }, {
      key: "_removeLegacyElements",
      value: function _removeLegacyElements() {
        var $legacyElements = $('body').children('#accessibility-toggle, #accessibility-instructions');
        var $navigationElements = $('.nav').find('#accessibility-toggle, #accessibility-instructions');

        if (!$legacyElements.length && !$navigationElements.length) {
          return;
        }

        Adapt.log.warn('REMOVED: #accessibility-toggle and #accessibility-instructions have been removed. Please remove them from all of your .html files.');
        $legacyElements.remove();
        $navigationElements.remove();
      }
    }, {
      key: "_onNavigationStart",
      value: function _onNavigationStart() {
        var _this2 = this;

        if (!this.isEnabled()) {
          return;
        }

        _.defer(function () {
          return _this2.toggleHidden('.contentobject', true);
        });
      }
    }, {
      key: "_onNavigationEnd",
      value: function _onNavigationEnd(view) {
        var _view$model;

        if ((view === null || view === void 0 ? void 0 : (_view$model = view.model) === null || _view$model === void 0 ? void 0 : _view$model.get('_id')) !== Adapt.location._currentId || !this.isEnabled()) {
          return;
        }

        this.toggleHidden('.contentobject', false);
      }
    }, {
      key: "isActive",
      value: function isActive() {
        this.log.removed('Accessibility is now always active when enabled. Please unify your user experiences.');
        return false;
      }
    }, {
      key: "isEnabled",
      value: function isEnabled() {
        var _this$config2;

        return (_this$config2 = this.config) === null || _this$config2 === void 0 ? void 0 : _this$config2._isEnabled;
      }
    }, {
      key: "toggleHidden",
      value: function toggleHidden($elements) {
        var isHidden = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        $elements = $($elements);
        var config = this.config;

        if (!config._isEnabled || !config._options._isAriaHiddenManagementEnabled) {
          return this;
        }

        if (isHidden === true) {
          $elements.attr('aria-hidden', true);
        } else {
          $elements.removeAttr('aria-hidden');
        }

        return this;
      }
    }, {
      key: "toggleAccessibleEnabled",
      value: function toggleAccessibleEnabled($elements, isAccessibleEnabled) {
        this.toggleAccessible($elements, isAccessibleEnabled);
        this.toggleEnabled($elements, isAccessibleEnabled);
        return this;
      }
    }, {
      key: "toggleAccessible",
      value: function toggleAccessible($elements) {
        var isReadable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        $elements = $($elements);
        var config = this.config;

        if (!config._isEnabled || !config._options._isAriaHiddenManagementEnabled || $elements.length === 0) {
          return this;
        }

        if (!isReadable) {
          $elements.attr({
            tabindex: '-1',
            'aria-hidden': 'true'
          }).addClass('aria-hidden');
        } else {
          $elements.removeAttr('aria-hidden tabindex').removeClass('aria-hidden');
          $elements.parents(config._options._ariaHiddenExcludes).removeAttr('aria-hidden').removeClass('aria-hidden');
        }

        return this;
      }
    }, {
      key: "toggleEnabled",
      value: function toggleEnabled($elements) {
        var isEnabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        $elements = $($elements);

        if ($elements.length === 0) {
          return this;
        }

        if (!isEnabled) {
          $elements.attr({
            tabindex: '-1',
            'aria-disabled': 'true'
          }).addClass('is-disabled');
        } else {
          $elements.removeAttr('aria-disabled tabindex').removeClass('is-disabled');
        }

        return this;
      }
    }, {
      key: "findFirstTabbable",
      value: function findFirstTabbable($element) {
        $element = $($element).first();
        return this._findFirstForward($element, this.isTabbable);
      }
    }, {
      key: "findFirstReadable",
      value: function findFirstReadable($element) {
        $element = $($element).first();
        return this._findFirstForward($element, this.isReadable);
      }
    }, {
      key: "findTabbable",
      value: function findTabbable($element) {
        var config = this.config;
        return $($element).find(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
      }
    }, {
      key: "findReadable",
      value: function findReadable($element) {
        var _this3 = this;

        return $($element).find('*').filter(function (index, element) {
          return _this3.isReadable(element);
        });
      }
    }, {
      key: "isTabbable",
      value: function isTabbable($element) {
        var config = this.config;
        var value = $($element).is(config._options._tabbableElements).is(config._options._tabbableElementsExcludes);

        if (!value) {
          return undefined;
        }

        return value;
      }
    }, {
      key: "isReadable",
      value: function isReadable($element) {
        var checkParents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var config = this.config;
        $element = $($element).first();
        var $branch = checkParents ? $element.add($element.parents()) : $element;
        var isNotVisible = $branch.toArray().some(function (item) {
          var $item = $(item);
          return $item.css('display') === 'none' || $item.css('visibility') === 'hidden' || $item.attr('aria-hidden') === 'true';
        });

        if (isNotVisible) {
          return false;
        }

        var hasNativeFocusOrIsScreenReadable = $element.is(config._options._focusableElements) || $element.is(config._options._readableElements);

        if (hasNativeFocusOrIsScreenReadable) {
          return true;
        }

        var childNodes = $element[0].childNodes;

        for (var c = 0, cl = childNodes.length; c < cl; c++) {
          var childNode = childNodes[c];
          var isTextNode = childNode.nodeType === 3;

          if (!isTextNode) {
            continue;
          }

          var isOnlyWhiteSpace = /^\s*$/.test(childNode.nodeValue);

          if (isOnlyWhiteSpace) {
            continue;
          }

          return true;
        }

        return undefined;
      }
    }, {
      key: "_findFirstForward",
      value: function _findFirstForward($element, selector) {
        var _this4 = this;

        $element = $($element).first();
        var iterator;

        switch (_typeof(selector)) {
          case 'string':
            iterator = function ($tag) {
              return $tag.is(selector) || undefined;
            };

            break;

          case 'function':
            iterator = selector;
            break;

          case 'undefined':
            iterator = Boolean;
        }

        if ($element.length === 0) {
          return $element.not('*');
        }

        var $found = this._findFirstForwardDescendant($element, iterator);

        if ($found.length) {
          return $found;
        }

        $element.nextAll().toArray().some(function (sibling) {
          var $sibling = $(sibling);
          var value = iterator($sibling);

          if (value === false) {
            return;
          }

          if (value) {
            $found = $sibling;
            return true;
          }

          $found = _this4._findFirstForwardDescendant($sibling, iterator);
          if ($found.length) return true;
        });

        if ($found.length) {
          return $found;
        }

        $element.add($element.parents()).toArray().reverse().some(function (parent) {
          var $parent = $(parent);

          if (iterator($parent) === false) {
            return false;
          }

          return $parent.nextAll().toArray().some(function (sibling) {
            var $sibling = $(sibling);
            var value = iterator($sibling);

            if (value === false) {
              return;
            }

            if (value) {
              $found = $sibling;
              return true;
            }

            $found = _this4._findFirstForwardDescendant($sibling, iterator);

            if ($found.length) {
              return true;
            }
          });
        });

        if (!$found.length) {
          return $element.not('*');
        }

        return $found;
      }
    }, {
      key: "_findFirstForwardDescendant",
      value: function _findFirstForwardDescendant($element, selector) {
        $element = $($element).first();
        var iterator;

        switch (_typeof(selector)) {
          case 'string':
            iterator = function ($tag) {
              return $tag.is(selector) || undefined;
            };

            break;

          case 'function':
            iterator = selector;
            break;

          case 'undefined':
            iterator = Boolean;
        }

        var $notFound = $element.not('*');

        if ($element.length === 0) {
          return $notFound;
        }

        var stack = [{
          item: $element[0],
          value: undefined
        }];
        var stackIndexPosition = 0;
        var childIndexPosition = stackIndexPosition + 1;

        do {
          var stackEntry = stack[stackIndexPosition];
          var $stackItem = $(stackEntry.item);

          switch (stackEntry.value) {
            case true:
              return $stackItem;

            case false:
              return $notFound;
          }

          $stackItem.children().toArray().forEach(function (item) {
            var $item = $(item);
            var value = iterator($item);

            if (value === false) {
              return;
            }

            stack.splice(childIndexPosition++, 0, {
              item: item,
              value: value
            });
          });
          stackIndexPosition++;
          childIndexPosition = stackIndexPosition + 1;
        } while (stackIndexPosition < stack.length);

        return $notFound;
      }
    }, {
      key: "focusNext",
      value: function focusNext($element, options) {
        options = new FocusOptions(options);
        $element = $($element).first();
        $element = this.findFirstReadable($element);
        this.focus($element, options);
        return this;
      }
    }, {
      key: "focusFirst",
      value: function focusFirst($element, options) {
        options = new FocusOptions(options);
        $element = $($element).first();

        if (this.isReadable($element)) {
          this.focus($element, options);
          return $element;
        }

        $element = this.findFirstReadable($element);
        this.focus($element, options);
        return $element;
      }
    }, {
      key: "focus",
      value: function focus($element, options) {
        options = new FocusOptions(options);
        $element = $($element).first();
        var config = this.config;

        if (!config._isEnabled || !config._options._isFocusAssignmentEnabled || $element.length === 0) {
          return this;
        }

        function perform() {
          if ($element.attr('tabindex') === undefined) {
            $element.attr({
              'tabindex': '-1',
              'data-a11y-force-focus': 'true'
            });
          }

          if (options.preventScroll) {
            var y = $(window).scrollTop();

            try {
              $element[0].focus({
                preventScroll: true
              });
            } catch (e) {}

            switch (Adapt.device.browser) {
              case 'internet explorer':
              case 'microsoft edge':
              case 'safari':
                window.scrollTo(null, y);
            }
          } else {
            $element[0].focus();
          }
        }

        if (options.defer) {
          _.defer(perform);
        } else {
          perform();
        }

        return this;
      }
    }, {
      key: "normalize",
      value: function normalize(htmls) {
        htmls = Array.prototype.slice.call(arguments).filter(Boolean).filter(_.isString).join(' ');
        var text = $('<div>' + htmls + '</div>').text();
        return text.replace(this._htmlCharRegex, '');
      }
    }, {
      key: "removeBreaks",
      value: function removeBreaks(htmls) {
        var _this5 = this;

        htmls = Array.prototype.slice.call(arguments).filter(Boolean).filter(_.isString).join(' ');
        var $div = $('<div>' + htmls + '</div>');
        var stack = [$div[0]];
        var stackIndex = 0;
        var outputs = [];

        do {
          if (stack[stackIndex].childNodes.length) {
            var nodes = stack[stackIndex].childNodes;
            var usable = nodes.filter(function (node) {
              var isTextNode = node.nodeType === 3;

              if (isTextNode) {
                return true;
              }

              var isStyleElement = $(node).is(_this5.config._options._wrapStyleElements);

              if (isStyleElement) {
                return true;
              }

              return false;
            });
            outputs.push.apply(outputs, usable);
            stack.push.apply(stack, nodes);
          }

          stackIndex++;
        } while (stackIndex < stack.length);

        var rtnText = '';
        outputs.forEach(function (item) {
          rtnText += item.outerHTML || item.textContent;
        });
        return rtnText;
      }
    }, {
      key: "scrollEnable",
      value: function scrollEnable($elements) {
        this._scroll.enable($elements);

        return this;
      }
    }, {
      key: "scrollDisable",
      value: function scrollDisable($elements) {
        this._scroll.disable($elements);

        return this;
      }
    }, {
      key: "popupOpened",
      value: function popupOpened($popupElement) {
        this._popup.opened($popupElement);

        return this;
      }
    }, {
      key: "popupClosed",
      value: function popupClosed($focusElement) {
        this._popup.closed($focusElement);

        return this;
      }
    }, {
      key: "setPopupCloseTo",
      value: function setPopupCloseTo($focusElement) {
        return this._popup.setCloseTo($focusElement);
      }
    }]);

    return A11y;
  }(Backbone.Controller);

  var a11y = __AMD("core/js/a11y", Adapt.a11y = new A11y());

  Object.defineProperty(Adapt, 'accessibility', {
    get: function () {
      a11y.log.deprecated('Adapt.accessibility has moved to Adapt.a11y');
      return a11y;
    }
  });

  var AdaptCollection = __AMD("core/js/collections/adaptCollection", function (_Backbone$Collection) {
    _inherits(AdaptCollection, _Backbone$Collection);

    var _super = _createSuper(AdaptCollection);

    function AdaptCollection() {
      _classCallCheck(this, AdaptCollection);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptCollection, [{
      key: "initialize",
      value: function initialize(models, options) {
        this.once('reset', this.loadedData, this);
      }
    }, {
      key: "loadedData",
      value: function loadedData() {
        Adapt.trigger('adaptCollection:dataLoaded');
      }
    }]);

    return AdaptCollection;
  }(Backbone.Collection));

  var LOG_LEVEL = ENUM(['DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL']);
  var LOG_LEVEL$1 = __AMD("core/js/enums/logLevelEnum", LOG_LEVEL);

  var Logging = function (_Backbone$Controller) {
    _inherits(Logging, _Backbone$Controller);

    var _super = _createSuper(Logging);

    function Logging() {
      _classCallCheck(this, Logging);

      return _super.apply(this, arguments);
    }

    _createClass(Logging, [{
      key: "initialize",
      value: function initialize() {
        this._config = {
          _isEnabled: true,
          _level: LOG_LEVEL$1.INFO.asLowerCase,
          _console: true,
          _warnFirstOnly: true
        };
        this._warned = {};
        this.listenToOnce(Adapt, 'configModel:dataLoaded', this.onLoadConfigData);
      }
    }, {
      key: "onLoadConfigData",
      value: function onLoadConfigData() {
        this.loadConfig();
        this.debug('Logging config loaded');
        this.trigger('log:ready');
      }
    }, {
      key: "loadConfig",
      value: function loadConfig() {
        if (Adapt.config.has('_logging')) {
          this._config = Adapt.config.get('_logging');
        }

        this.checkQueryStringOverride();
      }
    }, {
      key: "checkQueryStringOverride",
      value: function checkQueryStringOverride() {
        var matches = window.location.search.match(/[?&]loglevel=([a-z]*)/i);
        if (!matches || matches.length < 2) return;
        var override = LOG_LEVEL$1(matches[1].toUpperCase());
        if (!override) return;
        this._config._level = override.asLowerCase;
        this.debug('Loglevel override in query string:', this._config._level);
      }
    }, {
      key: "debug",
      value: function debug() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this._log(LOG_LEVEL$1.DEBUG, args);
      }
    }, {
      key: "info",
      value: function info() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        this._log(LOG_LEVEL$1.INFO, args);
      }
    }, {
      key: "warn",
      value: function warn() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._log(LOG_LEVEL$1.WARN, args);
      }
    }, {
      key: "error",
      value: function error() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        this._log(LOG_LEVEL$1.ERROR, args);
      }
    }, {
      key: "fatal",
      value: function fatal() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        this._log(LOG_LEVEL$1.FATAL, args);
      }
    }, {
      key: "removed",
      value: function removed() {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }

        args = ['REMOVED'].concat(args);
        this.warnOnce.apply(this, _toConsumableArray(args));
      }
    }, {
      key: "deprecated",
      value: function deprecated() {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }

        args = ['DEPRECATED'].concat(args);
        this.warnOnce.apply(this, _toConsumableArray(args));
      }
    }, {
      key: "warnOnce",
      value: function warnOnce() {
        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }

        if (this._hasWarned(args)) {
          return;
        }

        this._log(LOG_LEVEL$1.WARN, args);
      }
    }, {
      key: "_log",
      value: function _log(level, data) {
        var isEnabled = this._config._isEnabled;
        if (!isEnabled) return;
        var configLevel = LOG_LEVEL$1(this._config._level.toUpperCase());
        var isLogLevelAllowed = level >= configLevel;
        if (!isLogLevelAllowed) return;

        this._logToConsole(level, data);

        this.trigger('log', level, data);
        this.trigger('log:' + level.asLowerCase, level, data);
      }
    }, {
      key: "_logToConsole",
      value: function _logToConsole(level, data) {
        var shouldLogToConsole = this._config._console;
        if (!shouldLogToConsole) return;
        var log = [level.asUpperCase + ':'];
        data && log.push.apply(log, _toConsumableArray(data));

        if (console[level.asLowerCase]) {
          var _console;

          (_console = console)[level.asLowerCase].apply(_console, log);
        } else {
          var _console2;

          (_console2 = console).log.apply(_console2, log);
        }
      }
    }, {
      key: "_hasWarned",
      value: function _hasWarned(args) {
        if (!this._config._warnFirstOnly) {
          return false;
        }

        var hash = args.map(String).join(':');

        if (this._warned[hash]) {
          return true;
        }

        this._warned[hash] = true;
        return false;
      }
    }]);

    return Logging;
  }(Backbone.Controller);

  __AMD("core/js/logging", Adapt.log = new Logging());

  var BuildModel = __AMD("core/js/models/buildModel", function (_LockingModel) {
    _inherits(BuildModel, _LockingModel);

    var _super = _createSuper(BuildModel);

    function BuildModel() {
      _classCallCheck(this, BuildModel);

      return _super.apply(this, arguments);
    }

    _createClass(BuildModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          jsonext: 'json'
        };
      }
    }, {
      key: "initialize",
      value: function initialize(attrs, options) {
        var _this = this;

        this.url = options.url;
        this.fetch({
          success: function () {
            _this.isLoaded = true;
            Adapt.trigger('buildModel:dataLoaded');
          },
          error: function () {
            console.log('Unable to load adapt/js/build.js');
            Adapt.trigger('buildModel:dataLoaded');
          }
        });
      }
    }, {
      key: "isFrameworkVersion",
      value: function isFrameworkVersion(version) {
        return semver__default['default'].satisfies(this.get('package').version, version, {
          includePrerelease: true
        });
      }
    }, {
      key: "isPluginInstalled",
      value: function isPluginInstalled(name) {
        var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '*';
        var plugin = this.get('plugins').find(function (plugin) {
          if (plugin.name !== name) return false;
          return semver__default['default'].satisfies(plugin.version, version, {
            includePrerelease: true
          });
        });
        return Boolean(plugin);
      }
    }, {
      key: "whenReady",
      value: function whenReady() {
        if (this.isLoaded) return Promise.resolve();
        return new Promise(function (resolve) {
          Adapt.once('buildModel:dataLoaded', resolve);
        });
      }
    }]);

    return BuildModel;
  }(LockingModel));

  var ConfigModel = __AMD("core/js/models/configModel", function (_LockingModel) {
    _inherits(ConfigModel, _LockingModel);

    var _super = _createSuper(ConfigModel);

    function ConfigModel() {
      _classCallCheck(this, ConfigModel);

      return _super.apply(this, arguments);
    }

    _createClass(ConfigModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          screenSize: {
            large: 900,
            medium: 760,
            small: 520
          },
          _forceRouteLocking: false,
          _canLoadData: true,
          _disableAnimation: false
        };
      }
    }, {
      key: "setValuesFromURLParams",
      value: function setValuesFromURLParams() {
        var _this = this;

        var paramMappings = {
          dir: '_defaultDirection',
          lang: '_defaultLanguage'
        };
        var params = new URLSearchParams(window.location.search);
        Object.entries(paramMappings).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          var passedVal = params.get(key);
          if (!passedVal) return;

          _this.set(value, passedVal);
        });
      }
    }, {
      key: "initialize",
      value: function initialize(attrs, options) {
        var _this2 = this;

        this.url = options.url;
        this.fetch({
          success: function () {
            _this2.setValuesFromURLParams();

            Adapt.trigger('offlineStorage:prepare');
            Adapt.wait.queue(function () {
              Adapt.trigger('configModel:dataLoaded');
              if (!_this2.get('_canLoadData')) return;
              Adapt.trigger('configModel:loadCourseData');
            });
          },
          error: function () {
            return console.log('Unable to load course/config.json');
          }
        });
      }
    }, {
      key: "loadData",
      value: function loadData() {}
    }]);

    return ConfigModel;
  }(LockingModel));

  var ModelEvent = __AMD("core/js/modelEvent", function (_Backbone$Controller) {
    _inherits(ModelEvent, _Backbone$Controller);

    var _super = _createSuper(ModelEvent);

    function ModelEvent() {
      _classCallCheck(this, ModelEvent);

      return _super.apply(this, arguments);
    }

    _createClass(ModelEvent, [{
      key: "initialize",
      value: function initialize(type, target, value) {
        this.type = type;
        this.target = target;
        this.value = value;
        this.canBubble = true;
        this.deepPath = [target];
        this.timeStamp = null;
      }
    }, {
      key: "stopPropagation",
      value: function stopPropagation() {
        this.canBubble = false;
      }
    }, {
      key: "addPath",
      value: function addPath(target) {
        this.deepPath.unshift(target);
      }
    }]);

    return ModelEvent;
  }(Backbone.Controller));

  var AdaptModel = __AMD("core/js/models/adaptModel", function (_LockingModel) {
    _inherits(AdaptModel, _LockingModel);

    var _super = _createSuper(AdaptModel);

    function AdaptModel() {
      _classCallCheck(this, AdaptModel);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptModel, [{
      key: "toJSON",
      value: function toJSON() {
        var json = _objectSpread2({}, this.attributes);

        delete json._children;
        delete json._parent;
        return $.extend(true, {}, json);
      }
    }, {
      key: "get",
      value: function get(name) {
        switch (name) {
          case '_parent':
          case '_children':
            Adapt.log.deprecated("Use model.getChildren() or model.getParent() instead of model.get('_children') or model.get('_parent')");
        }

        return _get(_getPrototypeOf(AdaptModel.prototype), "get", this).call(this, name);
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return {
          _canShowFeedback: true,
          _classes: '',
          _canReset: false,
          _canRequestChild: false,
          _isComplete: false,
          _isInteractionComplete: false,
          _isA11yRegionEnabled: false,
          _isA11yCompletionDescriptionEnabled: true,
          _requireCompletionOf: -1,
          _isEnabled: true,
          _isResetOnRevisit: false,
          _isAvailable: true,
          _isOptional: false,
          _isRendered: false,
          _isReady: false,
          _isVisible: true,
          _isLocked: false,
          _isHidden: false
        };
      }
    }, {
      key: "trackingPosition",
      get: function () {
        var _this = this;

        var firstDescendant = this.getAllDescendantModels(false).concat([this])[0];
        var nearestTrackingIdModel = [firstDescendant].concat(firstDescendant.getAncestorModels()).find(function (model) {
          return model.has('_trackingId');
        });
        if (!nearestTrackingIdModel) return;
        var trackingId = nearestTrackingIdModel.get('_trackingId');
        var trackingIdDescendants = [nearestTrackingIdModel].concat(nearestTrackingIdModel.getAllDescendantModels(true));
        var indexInTrackingIdDescendants = trackingIdDescendants.findIndex(function (descendant) {
          return descendant === _this;
        });

        if (indexInTrackingIdDescendants >= 0) {
          return [trackingId, indexInTrackingIdDescendants];
        }

        var trackingIdAncestors = nearestTrackingIdModel.getAncestorModels();
        var ancestorDistance = trackingIdAncestors.findIndex(function (ancestor) {
          return ancestor === _this;
        });
        return [trackingId, -(ancestorDistance + 1)];
      }
    }, {
      key: "parse",
      value: function parse(data) {
        if (data._isResetOnRevisit === 'false') {
          data._isResetOnRevisit = false;
        }

        return data;
      }
    }, {
      key: "trackable",
      value: function trackable() {
        return ['_id', '_isComplete', '_isInteractionComplete'];
      }
    }, {
      key: "trackableType",
      value: function trackableType() {
        return [String, Boolean, Boolean];
      }
    }, {
      key: "bubblingEvents",
      value: function bubblingEvents() {
        return ['change:_isComplete', 'change:_isInteractionComplete', 'change:_isActive'];
      }
    }, {
      key: "setupModel",
      value: function setupModel() {
        var _this2 = this;

        if (this.hasManagedChildren) {
          this.setupChildListeners();
        }

        this.init();

        _.defer(function () {
          if (_this2.hasManagedChildren) {
            _this2.checkCompletionStatus();

            _this2.checkInteractionCompletionStatus();

            _this2.checkLocking();
          }

          _this2.setupTrackables();
        });
      }
    }, {
      key: "setupTrackables",
      value: function setupTrackables() {
        var _this3 = this;

        var originalTrackableStateFunction = this.triggerTrackableState;
        this.triggerTrackableState = _.compose(function () {
          _this3.triggerTrackableState.isQueued = true;
        }, _.debounce(function () {
          originalTrackableStateFunction.apply(_this3);
          _this3.triggerTrackableState.isQueued = false;
        }, 17));
        this.listenTo(this, 'change', function (_ref) {
          var changed = _ref.changed;

          if (_this3.triggerTrackableState.isQueued || !Adapt.attributes._isStarted) {
            return;
          }

          var trackablePropertyNames = _.result(_this3, 'trackable', []);

          var changedPropertyNames = Object.keys(changed);
          var isTrackable = changedPropertyNames.find(function (item) {
            return trackablePropertyNames.includes(item);
          });

          if (isTrackable) {
            _this3.triggerTrackableState();
          }
        });
      }
    }, {
      key: "setupChildListeners",
      value: function setupChildListeners() {
        var children = this.getChildren();

        if (!children.length) {
          return;
        }

        this.listenTo(children, {
          'all': this.onAll,
          'bubble': this.bubble,
          'change:_isReady': this.checkReadyStatus,
          'change:_isComplete': this.onIsComplete,
          'change:_isInteractionComplete': this.checkInteractionCompletionStatus
        });
      }
    }, {
      key: "init",
      value: function init() {}
    }, {
      key: "getTrackableState",
      value: function getTrackableState() {
        var _ref2;

        var trackable = this.resultExtend('trackable', []);
        var json = this.toJSON();
        var args = trackable;
        args.unshift(json);
        return (_ref2 = _).pick.apply(_ref2, _toConsumableArray(args));
      }
    }, {
      key: "setTrackableState",
      value: function setTrackableState(state) {
        var _ref3;

        var trackable = this.resultExtend('trackable', []);
        var args = trackable;
        args.unshift(state);
        state = (_ref3 = _).pick.apply(_ref3, _toConsumableArray(args));
        this.set(state);
        return this;
      }
    }, {
      key: "triggerTrackableState",
      value: function triggerTrackableState() {
        Adapt.trigger('state:change', this, this.getTrackableState());
      }
    }, {
      key: "reset",
      value: function reset(type, force) {
        if (!this.get('_canReset') && !force) return;
        type = type || true;

        switch (type) {
          case 'hard':
          case true:
            this.set({
              _isEnabled: true,
              _isComplete: false,
              _isInteractionComplete: false
            });
            break;

          case 'soft':
            this.set({
              _isEnabled: true,
              _isInteractionComplete: false
            });
            break;
        }
      }
    }, {
      key: "checkReadyStatus",
      value: function checkReadyStatus(model, value) {
        if (value === false) {
          return false;
        }

        var children = this.getAvailableChildModels();

        if (children.find(function (child) {
          return child.get('_isReady') === false && child.get('_isRendered');
        })) {
          return false;
        }

        this.set('_isReady', true);
        return true;
      }
    }, {
      key: "setCompletionStatus",
      value: function setCompletionStatus() {
        if (!this.get('_isVisible')) return;
        this.set({
          _isComplete: true,
          _isInteractionComplete: true
        });
      }
    }, {
      key: "checkCompletionStatus",
      value: function checkCompletionStatus() {
        Adapt.checkingCompletion();

        _.defer(this.checkCompletionStatusFor.bind(this), '_isComplete');
      }
    }, {
      key: "checkInteractionCompletionStatus",
      value: function checkInteractionCompletionStatus() {
        Adapt.checkingCompletion();

        _.defer(this.checkCompletionStatusFor.bind(this), '_isInteractionComplete');
      }
    }, {
      key: "checkCompletionStatusFor",
      value: function checkCompletionStatusFor() {
        var completionAttribute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '_isComplete';
        var completed = false;
        var children = this.getAvailableChildModels();
        var requireCompletionOf = this.get('_requireCompletionOf');

        if (requireCompletionOf === -1) {
          completed = children.every(function (child) {
            return child.get(completionAttribute) || child.get('_isOptional');
          });
        } else {
          completed = children.filter(function (child) {
            return child.get(completionAttribute) && !child.get('_isOptional');
          }).length >= requireCompletionOf;
        }

        this.set(completionAttribute, completed);
        Adapt.checkedCompletion();
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {}
    }, {
      key: "isTypeGroup",
      value: function isTypeGroup(typeGroup) {
        var hasUpperCase = /[A-Z]+/.test(typeGroup);
        var isPluralized = typeGroup.slice(-1) === 's';
        var lowerCased = typeGroup.toLowerCase();
        var singular = isPluralized && lowerCased.slice(0, -1);
        var singularLowerCased = (singular || lowerCased).toLowerCase();

        if (isPluralized || hasUpperCase) {
          Adapt.log.deprecated("'".concat(typeGroup, "' appears pluralized or contains uppercase characters, suggest using the singular, lowercase type group '").concat(singularLowerCased, "'."));
        }

        var pluralizedLowerCaseTypes = [singularLowerCased, !isPluralized && "".concat(lowerCased, "s")].filter(Boolean);
        var typeGroups = this.getTypeGroups();

        if (_.intersection(pluralizedLowerCaseTypes, typeGroups).length) {
          return true;
        }

        return false;
      }
    }, {
      key: "getTypeGroups",
      value: function getTypeGroups() {
        if (this._typeGroups) return this._typeGroups;
        var typeGroups = [this.get('_type')];
        var parentClass = this;

        while (parentClass = Object.getPrototypeOf(parentClass)) {
          if (!parentClass.hasOwnProperty('getTypeGroup')) continue;
          typeGroups.push(parentClass.getTypeGroup.call(this));
        }

        return this._typeGroups = _.uniq(typeGroups.filter(Boolean).map(function (s) {
          return s.toLowerCase();
        }));
      }
    }, {
      key: "findAncestor",
      value: function findAncestor(ancestorType) {
        var parent = this.getParent();
        if (!parent) return;

        if (!ancestorType || parent.isTypeGroup(ancestorType)) {
          return parent;
        }

        return parent.findAncestor(ancestorType);
      }
    }, {
      key: "findDescendantModels",
      value: function findDescendantModels(descendants, options) {
        var allDescendantsModels = this.getAllDescendantModels();
        var returnedDescendants = allDescendantsModels.filter(function (model) {
          return model.isTypeGroup(descendants);
        });

        if (!options) {
          return returnedDescendants;
        }

        if (options.where) {
          return returnedDescendants.filter(function (descendant) {
            for (var property in options.where) {
              var value = options.where[property];

              if (descendant.get(property) !== value) {
                return false;
              }
            }

            return true;
          });
        }
      }
    }, {
      key: "getAllDescendantModels",
      value: function getAllDescendantModels(isParentFirst) {
        var descendants = [];

        if (!this.hasManagedChildren) {
          return descendants;
        }

        var children = this.getChildren();
        children.models.forEach(function (child) {
          if (!child.hasManagedChildren) {
            descendants.push(child);
            return;
          }

          var subDescendants = child.getAllDescendantModels(isParentFirst);

          if (isParentFirst === true) {
            descendants.push(child);
          }

          descendants.push.apply(descendants, _toConsumableArray(subDescendants));

          if (isParentFirst !== true) {
            descendants.push(child);
          }
        });
        return descendants;
      }
    }, {
      key: "findRelativeModel",
      value: function findRelativeModel(relativeString) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var rootModel = options.limitParentId ? Adapt.findById(options.limitParentId) : Adapt.course;
        var relativeDescriptor = Adapt.parseRelativeString(relativeString);
        var searchBackwards = relativeDescriptor.offset < 0;
        var moveBy = Math.abs(relativeDescriptor.offset);
        var movementCount = 0;
        var hasDescendantsOfType = Boolean(this.findDescendantModels(relativeDescriptor.type).length);

        if (hasDescendantsOfType) {
          moveBy--;
        }

        var pageDescendants;

        if (searchBackwards) {
          var _pageDescendants;

          pageDescendants = [rootModel];

          (_pageDescendants = pageDescendants).push.apply(_pageDescendants, _toConsumableArray(rootModel.getAllDescendantModels(true)));

          pageDescendants.reverse();
        } else {
          pageDescendants = rootModel.getAllDescendantModels(false);
          pageDescendants.push(rootModel);
        }

        var modelId = this.get('_id');
        var modelIndex = pageDescendants.findIndex(function (pageDescendant) {
          if (pageDescendant.get('_id') === modelId) {
            return true;
          }

          return false;
        });
        var isFilterFunction = typeof options.filter === 'function';

        if (options.loop) {
          var totalOfType = pageDescendants.reduce(function (count, model) {
            if (!model.isTypeGroup(relativeDescriptor.type)) return count;
            return ++count;
          }, 0);
          moveBy = moveBy % totalOfType;
          pageDescendants = pageDescendants.concat(pageDescendants.slice(0));
        }

        for (var i = modelIndex, l = pageDescendants.length; i < l; i++) {
          var descendant = pageDescendants[i];
          if (!descendant.isTypeGroup(relativeDescriptor.type)) continue;
          var isSelf = i === modelIndex;
          if (!isSelf && isFilterFunction && !options.filter(descendant)) continue;

          if (movementCount > moveBy) {
            break;
          }

          if (movementCount === moveBy) {
            return Adapt.findById(descendant.get('_id'));
          }

          movementCount++;
        }
      }
    }, {
      key: "hasManagedChildren",
      get: function () {
        return true;
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        if (this._childrenCollection) {
          return this._childrenCollection;
        }

        var childrenCollection;

        if (!this.hasManagedChildren) {
          childrenCollection = new Backbone.Collection();
        } else {
          var id = this.get('_id');
          var children = Adapt.data.filter(function (model) {
            return model.get('_parentId') === id;
          });
          childrenCollection = new Backbone.Collection(children);
        }

        if (this.get('_type') === 'block' && childrenCollection.length === 2 && childrenCollection.models[0].get('_layout') !== 'left') {
          childrenCollection.comparator = '_layout';
          childrenCollection.sort();
        }

        this.setChildren(childrenCollection);
        return this._childrenCollection;
      }
    }, {
      key: "setChildren",
      value: function setChildren(children) {
        this._childrenCollection = children;
        this.set('_children', children);
      }
    }, {
      key: "getAvailableChildModels",
      value: function getAvailableChildModels() {
        return this.getChildren().where({
          _isAvailable: true
        });
      }
    }, {
      key: "getParent",
      value: function getParent() {
        if (this._parentModel) {
          return this._parentModel;
        }

        var parentId = this.get('_parentId');
        if (!parentId) return;
        this.setParent(Adapt.findById(parentId));
        return this._parentModel;
      }
    }, {
      key: "setParent",
      value: function setParent(parent) {
        this._parentModel = parent;
        this.set('_parentId', this._parentModel.get('_id'));
        this.set('_parent', this._parentModel);
      }
    }, {
      key: "getAncestorModels",
      value: function getAncestorModels(shouldIncludeChild) {
        var parents = [];
        var context = this;
        if (shouldIncludeChild) parents.push(context);

        while (context.has('_parentId')) {
          context = context.getParent();
          parents.push(context);
        }

        return parents.length ? parents : null;
      }
    }, {
      key: "getSiblings",
      value: function getSiblings(passSiblingsAndIncludeSelf) {
        var id = this.get('_id');
        var parentId = this.get('_parentId');
        var siblings;

        if (!passSiblingsAndIncludeSelf) {
          if (this._hasSiblingsAndSelf === false) {
            return this.get('_siblings');
          }

          siblings = Adapt.data.filter(function (model) {
            return model.get('_parentId') === parentId && model.get('_id') !== id;
          });
          this._hasSiblingsAndSelf = false;
        } else {
          if (this._hasSiblingsAndSelf) {
            return this.get('_siblings');
          }

          siblings = Adapt.data.filter(function (model) {
            return model.get('_parentId') === parentId;
          });
          this._hasSiblingsAndSelf = true;
        }

        var siblingsCollection = new Backbone.Collection(siblings);
        this.set('_siblings', siblingsCollection);
        return siblingsCollection;
      }
    }, {
      key: "setOnChildren",
      value: function setOnChildren() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this.set.apply(this, args);
        if (!this.hasManagedChildren) return;
        var children = this.getChildren();
        children.models.forEach(function (child) {
          return child.setOnChildren.apply(child, args);
        });
      }
    }, {
      key: "setOptional",
      value: function setOptional(value) {
        Adapt.log.deprecated("Use model.set('_isOptional', value) as setOptional() may be removed in the future");
        this.set({
          _isOptional: value
        });
      }
    }, {
      key: "checkLocking",
      value: function checkLocking() {
        var lockType = this.get('_lockType');
        if (!lockType) return;

        switch (lockType) {
          case 'sequential':
            this.setSequentialLocking();
            break;

          case 'unlockFirst':
            this.setUnlockFirstLocking();
            break;

          case 'lockLast':
            this.setLockLastLocking();
            break;

          case 'custom':
            this.setCustomLocking();
            break;

          default:
            console.warn("AdaptModel.checkLocking: unknown _lockType '".concat(lockType, "' found on ").concat(this.get('_id')));
        }
      }
    }, {
      key: "setSequentialLocking",
      value: function setSequentialLocking() {
        var children = this.getAvailableChildModels();

        for (var i = 1, j = children.length; i < j; i++) {
          children[i].set('_isLocked', !children[i - 1].get('_isComplete'));
        }
      }
    }, {
      key: "setUnlockFirstLocking",
      value: function setUnlockFirstLocking() {
        var children = this.getAvailableChildModels();
        var isFirstChildComplete = children[0].get('_isComplete');

        for (var i = 1, j = children.length; i < j; i++) {
          children[i].set('_isLocked', !isFirstChildComplete);
        }
      }
    }, {
      key: "setLockLastLocking",
      value: function setLockLastLocking() {
        var children = this.getAvailableChildModels();
        var lastIndex = children.length - 1;

        for (var i = lastIndex - 1; i >= 0; i--) {
          if (!children[i].get('_isComplete')) {
            return children[lastIndex].set('_isLocked', true);
          }
        }

        children[lastIndex].set('_isLocked', false);
      }
    }, {
      key: "setCustomLocking",
      value: function setCustomLocking() {
        var _this4 = this;

        var children = this.getAvailableChildModels();
        children.forEach(function (child) {
          child.set('_isLocked', _this4.shouldLock(child));
        });
      }
    }, {
      key: "shouldLock",
      value: function shouldLock(child) {
        var lockedBy = child.get('_lockedBy');
        if (!lockedBy) return false;

        for (var i = lockedBy.length - 1; i >= 0; i--) {
          var id = lockedBy[i];

          try {
            var model = Adapt.findById(id);
            if (!model.get('_isAvailable')) continue;
            if (!model.get('_isComplete')) return true;
          } catch (e) {
            console.warn("AdaptModel.shouldLock: unknown _lockedBy ID '".concat(id, "' found on ").concat(child.get('_id')));
          }
        }

        return false;
      }
    }, {
      key: "onIsComplete",
      value: function onIsComplete() {
        this.checkCompletionStatus();
        this.checkLocking();
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.get('_isResetOnRevisit');

        if (!isResetOnRevisit) {
          return;
        }

        this.reset(isResetOnRevisit);
      }
    }, {
      key: "deepClone",
      value: function deepClone() {
        var modifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var ModelClass = this.constructor;
        var clonedModel = new ModelClass(this.toJSON());

        if (modifier) {
          modifier(clonedModel, this);
        }

        var clonedId = clonedModel.get('_id');
        var hasId = Boolean(clonedId);
        var shouldAssignUniqueId = this.get('_id') === clonedId;

        if (hasId && shouldAssignUniqueId) {
          var cid = _.uniqueId(ModelClass.prototype.cidPrefix || 'c');

          clonedId = "".concat(clonedId, "_").concat(cid);
          clonedModel.set('_id', clonedId);
        }

        if (hasId) {
          Adapt.data.add(clonedModel);
        }

        if (this.hasManagedChildren) {
          this.getChildren().each(function (child) {
            if (!child.deepClone) {
              throw new Error('Cannot deepClone child.');
            }

            child.deepClone(function (clone, child) {
              if (hasId) {
                clone.set('_parentId', clonedId);
              }

              if (modifier) {
                modifier(clone, child);
              }
            });
          });
        }

        clonedModel.getParent().getChildren().add(clonedModel);
        clonedModel.setupModel();
        return clonedModel;
      }
    }, {
      key: "onAll",
      value: function onAll(type, model, value) {
        if (!_.result(this, 'bubblingEvents').includes(type)) return;
        var event = new ModelEvent(type, model, value);
        this.bubble(event);
      }
    }, {
      key: "bubble",
      value: function bubble(event) {
        if (!event.canBubble) return;
        event.addPath(this);
        this.trigger("bubble:".concat(event.type, " bubble"), event);
      }
    }]);

    return AdaptModel;
  }(LockingModel));

  var ContentObjectModel = __AMD("core/js/models/contentObjectModel", function (_AdaptModel) {
    _inherits(ContentObjectModel, _AdaptModel);

    var _super = _createSuper(ContentObjectModel);

    function ContentObjectModel() {
      _classCallCheck(this, ContentObjectModel);

      return _super.apply(this, arguments);
    }

    _createClass(ContentObjectModel, [{
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('contentObjectModel._parent, use contentObjectModel.getParent() instead, parent models are defined by the JSON');
        var isParentCourse = this.get('_parentId') === Adapt.course.get('_id');

        if (isParentCourse) {
          return 'course';
        }

        return 'contentObjects';
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('contentObjectModel._siblings, use contentObjectModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'contentObjects';
      }
    }, {
      key: "_children",
      get: function () {
        Adapt.log.deprecated('contentObjectModel._children, use contentObjectModel.hasManagedChildren instead, child models are defined by the JSON');
        return null;
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'contentobject';
      }
    }]);

    return ContentObjectModel;
  }(AdaptModel));

  var MenuModel = function (_ContentObjectModel) {
    _inherits(MenuModel, _ContentObjectModel);

    var _super = _createSuper(MenuModel);

    function MenuModel() {
      _classCallCheck(this, MenuModel);

      return _super.apply(this, arguments);
    }

    _createClass(MenuModel, [{
      key: "_children",
      get: function () {
        Adapt.log.deprecated('menuModel._children, use menuModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'contentObjects';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'menu';
      }
    }, {
      key: "setCustomLocking",
      value: function setCustomLocking() {
        var _this = this;

        var children = this.getAvailableChildModels();
        children.forEach(function (child) {
          child.set('_isLocked', _this.shouldLock(child));
          if (!(child instanceof MenuModel)) return;
          child.checkLocking();
        });
      }
    }]);

    return MenuModel;
  }(ContentObjectModel);

  Adapt.register('menu', {
    model: MenuModel
  });
  var MenuModel$1 = __AMD("core/js/models/menuModel", MenuModel);

  var CourseModel = function (_MenuModel) {
    _inherits(CourseModel, _MenuModel);

    var _super = _createSuper(CourseModel);

    function CourseModel() {
      _classCallCheck(this, CourseModel);

      return _super.apply(this, arguments);
    }

    _createClass(CourseModel, [{
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('courseModel._parent, use courseModel.getParent() instead, parent models are defined by the JSON');
        return null;
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('courseModel._siblings, use courseModel.getSiblings() instead, sibling models are defined by the JSON');
        return null;
      }
    }]);

    return CourseModel;
  }(MenuModel$1);

  Adapt.register('course', {
    model: CourseModel
  });
  var CourseModel$1 = __AMD("core/js/models/courseModel", CourseModel);

  var StartController = function (_Backbone$Controller) {
    _inherits(StartController, _Backbone$Controller);

    var _super = _createSuper(StartController);

    function StartController() {
      _classCallCheck(this, StartController);

      return _super.apply(this, arguments);
    }

    _createClass(StartController, [{
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(StartController.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this.model = null;
      }
    }, {
      key: "loadCourseData",
      value: function loadCourseData() {
        this.model = new LockingModel(Adapt.course.get('_start'));
      }
    }, {
      key: "setStartLocation",
      value: function setStartLocation() {
        if (!this.isEnabled()) return;
        window.history.replaceState('', '', this.getStartHash());
      }
    }, {
      key: "returnToStartLocation",
      value: function returnToStartLocation() {
        var startIds = this.model.get('_startIds');

        if (startIds) {
          startIds.forEach(function (startId) {
            return startId._skipIfComplete = false;
          });
        }

        window.location.hash = this.getStartHash(true);
      }
    }, {
      key: "getStartHash",
      value: function getStartHash(alwaysForce) {
        var startId = this.getStartId();
        var isRouteSpecified = window.location.href.indexOf('#') > -1;
        var shouldForceStartId = alwaysForce || this.model.get('_force');
        var shouldNavigateToStartId = startId && (!isRouteSpecified || shouldForceStartId);

        if (shouldNavigateToStartId && startId !== Adapt.course.get('_id')) {
          return '#/id/' + startId;
        }

        return window.location.hash || '#/';
      }
    }, {
      key: "isEnabled",
      value: function isEnabled() {
        var _this$model;

        return Boolean((_this$model = this.model) === null || _this$model === void 0 ? void 0 : _this$model.get('_isEnabled'));
      }
    }, {
      key: "getStartId",
      value: function getStartId() {
        var startId = this.model.get('_id');
        var startIds = this.model.get('_startIds');
        if (!(startIds !== null && startIds !== void 0 && startIds.length)) return startId;
        var $html = $('html');

        for (var i = 0, l = startIds.length; i < l; i++) {
          var item = startIds[i];
          var className = item._className;
          var skipIfComplete = item._skipIfComplete;
          var model = Adapt.findById(item._id);

          if (!model) {
            console.log('startController: cannot find id', item._id);
            continue;
          }

          if (skipIfComplete) {
            if (model.get('_isComplete')) continue;
          }

          if (!className || $html.is(className) || $html.hasClass(className)) {
            startId = item._id;
            break;
          }
        }

        return startId;
      }
    }]);

    return StartController;
  }(Backbone.Controller);

  Adapt.once('adapt:start', function () {
    Adapt.startController.loadCourseData();
    Adapt.startController.setStartLocation();
  });
  Adapt.on('navigation:returnToStart', function () {
    Adapt.startController.returnToStartLocation();
  });
  __AMD("core/js/startController", Adapt.startController = new StartController());

  var Data = function (_AdaptCollection) {
    _inherits(Data, _AdaptCollection);

    var _super = _createSuper(Data);

    function Data() {
      _classCallCheck(this, Data);

      return _super.apply(this, arguments);
    }

    _createClass(Data, [{
      key: "model",
      value: function model(json) {
        var ModelClass = Adapt.getModelClass(json);

        if (!ModelClass) {
          return new LockingModel(json);
        }

        return new ModelClass(json, {
          parse: true
        });
      }
    }, {
      key: "initialize",
      value: function initialize() {
        _get(_getPrototypeOf(Data.prototype), "initialize", this).call(this);

        this.on({
          'add': this.onAdded,
          'remove': this.onRemoved
        });
      }
    }, {
      key: "init",
      value: function () {
        var _init = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.reset();
                  this._byAdaptID = {};
                  Adapt.build = new BuildModel(null, {
                    url: 'adapt/js/build.min.js',
                    reset: true
                  });
                  _context.next = 5;
                  return Adapt.build.whenReady();

                case 5:
                  $('html').attr('data-adapt-framework-version', Adapt.build.get('package').version);
                  this.loadConfigData();

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function init() {
          return _init.apply(this, arguments);
        }

        return init;
      }()
    }, {
      key: "onAdded",
      value: function onAdded(model) {
        this._byAdaptID[model.get('_id')] = model;
      }
    }, {
      key: "onRemoved",
      value: function onRemoved(model) {
        delete this._byAdaptID[model.get('_id')];
      }
    }, {
      key: "loadConfigData",
      value: function loadConfigData() {
        Adapt.config = new ConfigModel(null, {
          url: 'course/config.' + Adapt.build.get('jsonext'),
          reset: true
        });
        this.listenToOnce(Adapt, 'configModel:loadCourseData', this.onLoadCourseData);
        this.listenTo(Adapt.config, {
          'change:_activeLanguage': this.onLanguageChange,
          'change:_defaultDirection': this.onDirectionChange
        });
      }
    }, {
      key: "onDirectionChange",
      value: function onDirectionChange(model, direction) {
        if (direction === 'rtl') {
          $('html').removeClass('dir-ltr').addClass('dir-rtl').attr('dir', 'rtl');
        } else {
          $('html').removeClass('dir-rtl').addClass('dir-ltr').attr('dir', 'ltr');
        }
      }
    }, {
      key: "onLoadCourseData",
      value: function onLoadCourseData() {
        if (!Adapt.config.get('_activeLanguage')) {
          Adapt.config.set('_activeLanguage', Adapt.config.get('_defaultLanguage'));
          return;
        }

        this.loadCourseData();
      }
    }, {
      key: "onLanguageChange",
      value: function onLanguageChange(model, language) {
        Adapt.offlineStorage.set('lang', language);

        if (Adapt.get('_isStarted')) {
          Adapt.set('_isStarted', false);
        }

        this.loadCourseData(language);
      }
    }, {
      key: "loadCourseData",
      value: function () {
        var _loadCourseData = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(newLanguage) {
          var language, courseFolder;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  language = Adapt.config.get('_activeLanguage');
                  courseFolder = 'course/' + language + '/';
                  $('html').attr('lang', language);
                  _context2.next = 5;
                  return this.loadManifestFiles(courseFolder);

                case 5:
                  _context2.next = 7;
                  return this.triggerDataLoaded();

                case 7:
                  _context2.next = 9;
                  return this.triggerDataReady(newLanguage);

                case 9:
                  this.triggerInit();

                case 10:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function loadCourseData(_x) {
          return _loadCourseData.apply(this, arguments);
        }

        return loadCourseData;
      }()
    }, {
      key: "getJSON",
      value: function getJSON(path) {
        return new Promise(function (resolve, reject) {
          $.getJSON(path, function (data) {
            data.__path__ = path;
            resolve(data);
          }).fail(reject);
        });
      }
    }, {
      key: "loadManifestFiles",
      value: function () {
        var _loadManifestFiles = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(languagePath) {
          var _this = this;

          var manifestPath, manifest, allFileData, allModelData, course;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  this.trigger('loading');
                  this.reset();
                  manifestPath = languagePath + 'language_data_manifest.js';
                  _context3.prev = 3;
                  _context3.next = 6;
                  return this.getJSON(manifestPath);

                case 6:
                  manifest = _context3.sent;
                  _context3.next = 13;
                  break;

                case 9:
                  _context3.prev = 9;
                  _context3.t0 = _context3["catch"](3);
                  manifest = ['course.json', 'contentObjects.json', 'articles.json', 'blocks.json', 'components.json'];
                  Adapt.log.warnOnce("Manifest path '".concat(manifestPath, " not found. Using traditional files: ").concat(manifest.join(', ')));

                case 13:
                  _context3.next = 15;
                  return Promise.all(manifest.map(function (filePath) {
                    return _this.getJSON("".concat(languagePath).concat(filePath));
                  }));

                case 15:
                  allFileData = _context3.sent;
                  allModelData = allFileData.reduce(function (result, fileData) {
                    if (Array.isArray(fileData)) {
                      result.push.apply(result, _toConsumableArray(fileData));
                    } else if (fileData instanceof Object) {
                      result.push(fileData);
                    } else {
                      Adapt.log.warnOnce("File data isn't an array or object: ".concat(fileData.__path__));
                    }

                    return result;
                  }, []);
                  course = allModelData.find(function (modelData) {
                    return modelData._type === 'course';
                  });

                  if (course) {
                    _context3.next = 20;
                    break;
                  }

                  throw new Error("Expected a model data with \"_type\": \"course\", none found.");

                case 20:
                  Adapt.trigger('courseModel:dataLoading');
                  Adapt.course = this.push(course);
                  Adapt.trigger('courseModel:dataLoaded');
                  allModelData.forEach(function (modelData) {
                    if (modelData._type === 'course') {
                      return;
                    }

                    _this.push(modelData);
                  });
                  this.trigger('reset');
                  this.trigger('loaded');
                  _context3.next = 28;
                  return Adapt.wait.queue();

                case 28:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this, [[3, 9]]);
        }));

        function loadManifestFiles(_x2) {
          return _loadManifestFiles.apply(this, arguments);
        }

        return loadManifestFiles;
      }()
    }, {
      key: "triggerDataLoaded",
      value: function () {
        var _triggerDataLoaded = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  Adapt.log.debug('Firing app:dataLoaded');

                  try {
                    this.forEach(function (model) {
                      var _model$setupModel;

                      return (_model$setupModel = model.setupModel) === null || _model$setupModel === void 0 ? void 0 : _model$setupModel.call(model);
                    });
                    Adapt.trigger('app:dataLoaded');
                  } catch (e) {
                    Adapt.log.error('Error during app:dataLoading trigger', e);
                  }

                  _context4.next = 4;
                  return Adapt.wait.queue();

                case 4:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function triggerDataLoaded() {
          return _triggerDataLoaded.apply(this, arguments);
        }

        return triggerDataLoaded;
      }()
    }, {
      key: "triggerDataReady",
      value: function () {
        var _triggerDataReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(newLanguage) {
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (newLanguage) {
                    Adapt.trigger('app:languageChanged', newLanguage);

                    _.defer(function () {
                      Adapt.startController.loadCourseData();
                      var hash = Adapt.startController.isEnabled() ? Adapt.startController.getStartHash(false) : '#/';
                      Adapt.router.navigate(hash, {
                        trigger: true,
                        replace: true
                      });
                    });
                  }

                  Adapt.log.debug('Firing app:dataReady');

                  try {
                    Adapt.trigger('app:dataReady');
                  } catch (e) {
                    Adapt.log.error('Error during app:dataReady trigger', e);
                  }

                  _context5.next = 5;
                  return Adapt.wait.queue();

                case 5:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }));

        function triggerDataReady(_x3) {
          return _triggerDataReady.apply(this, arguments);
        }

        return triggerDataReady;
      }()
    }, {
      key: "triggerInit",
      value: function triggerInit() {
        this.isReady = true;
        this.trigger('ready');
      }
    }, {
      key: "whenReady",
      value: function whenReady() {
        var _this2 = this;

        if (this.isReady) return Promise.resolve();
        return new Promise(function (resolve) {
          _this2.once('ready', resolve);
        });
      }
    }, {
      key: "findById",
      value: function findById(id) {
        var model = this._byAdaptID[id];

        if (!model) {
          console.warn("Adapt.findById() unable to find id: ".concat(id));
          return;
        }

        return model;
      }
    }, {
      key: "findByTrackingPosition",
      value: function findByTrackingPosition(trackingPosition) {
        var _trackingPosition = _slicedToArray(trackingPosition, 2),
            trackingId = _trackingPosition[0],
            indexInTrackingIdDescendants = _trackingPosition[1];

        var trackingIdModel = this.find(function (model) {
          return model.get('_trackingId') === trackingId;
        });

        if (!trackingIdModel) {
          console.warn("Adapt.findByTrackingPosition() unable to find trackingPosition: ".concat(trackingPosition));
          return;
        }

        if (indexInTrackingIdDescendants >= 0) {
          var trackingIdDescendants = [trackingIdModel].concat(trackingIdModel.getAllDescendantModels(true));
          return trackingIdDescendants[indexInTrackingIdDescendants];
        }

        var trackingIdAncestors = trackingIdModel.getAncestorModels();
        var ancestorDistance = Math.abs(indexInTrackingIdDescendants) - 1;
        return trackingIdAncestors[ancestorDistance];
      }
    }]);

    return Data;
  }(AdaptCollection);

  var Data$1 = __AMD("core/js/data", Adapt.data = new Data());

  var OfflineStorage$2 = function (_Backbone$Controller) {
    _inherits(OfflineStorage, _Backbone$Controller);

    var _super = _createSuper(OfflineStorage);

    function OfflineStorage() {
      _classCallCheck(this, OfflineStorage);

      return _super.apply(this, arguments);
    }

    _createClass(OfflineStorage, [{
      key: "initialize",
      value: function initialize(handler) {
        this.ready = true;
        this._handler = undefined;

        if (!handler) {
          return;
        }

        this.ready = false;
        this._handler = handler;
      }
    }, {
      key: "hasHandler",
      value: function hasHandler() {
        return this._handler !== undefined;
      }
    }, {
      key: "save",
      value: function save() {
        var _this$_handler, _this$_handler$save;

        Adapt.trigger('tracking:save');
        return (_this$_handler = this._handler) === null || _this$_handler === void 0 ? void 0 : (_this$_handler$save = _this$_handler.save) === null || _this$_handler$save === void 0 ? void 0 : _this$_handler$save.apply(this._handler, arguments);
      }
    }, {
      key: "serialize",
      value: function serialize(value) {
        var _this$_handler2;

        if ((_this$_handler2 = this._handler) !== null && _this$_handler2 !== void 0 && _this$_handler2.serialize) {
          return this._handler.serialize.apply(this._handler, arguments);
        }

        return JSON.stringify(value);
      }
    }, {
      key: "deserialize",
      value: function deserialize(value) {
        var _this$_handler3;

        if ((_this$_handler3 = this._handler) !== null && _this$_handler3 !== void 0 && _this$_handler3.deserialize) {
          return this._handler.deserialize.apply(this._handler, arguments);
        }

        return JSON.parse(value);
      }
    }, {
      key: "set",
      value: function set(name, value) {
        var _this$_handler4;

        if ((_this$_handler4 = this._handler) !== null && _this$_handler4 !== void 0 && _this$_handler4.set) {
          return this._handler.set.apply(this._handler, arguments);
        }

        this[name] = value;
      }
    }, {
      key: "get",
      value: function get(name) {
        var _this$_handler5;

        if ((_this$_handler5 = this._handler) !== null && _this$_handler5 !== void 0 && _this$_handler5.get) {
          return this._handler.get.apply(this._handler, arguments);
        }

        return this[name];
      }
    }, {
      key: "setReadyStatus",
      value: function setReadyStatus() {
        this.ready = true;
        Adapt.trigger('offlineStorage:ready');
      }
    }]);

    return OfflineStorage;
  }(Backbone.Controller);

  Adapt.offlineStorage = new OfflineStorage$2();
  __AMD("core/js/offlineStorage", Adapt.offlineStorage);

  var COMPLETION_STATE = ENUM(['INCOMPLETE', 'COMPLETED', 'PASSED', 'FAILED']);
  var COMPLETION_STATE$1 = __AMD("core/js/enums/completionStateEnum", COMPLETION_STATE);

  var Tracking = function (_Backbone$Controller) {
    _inherits(Tracking, _Backbone$Controller);

    var _super = _createSuper(Tracking);

    function Tracking() {
      _classCallCheck(this, Tracking);

      return _super.apply(this, arguments);
    }

    _createClass(Tracking, [{
      key: "initialize",
      value: function initialize() {
        this._config = {
          _requireContentCompleted: true,
          _requireAssessmentCompleted: false
        };
        this._assessmentState = null;
        Adapt.once('configModel:dataLoaded', this.loadConfig.bind(this));
        Adapt.on('app:dataReady', this.setupEventListeners.bind(this));
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        if (this._config._requireAssessmentCompleted) {
          this.listenTo(Adapt, {
            'assessment:complete': this.onAssessmentComplete,
            'assessment:restored': this.onAssessmentRestored
          });
        }

        if (this._config._requireContentCompleted) {
          this.listenTo(Adapt.course, 'change:_isComplete', this.checkCompletion);
        }
      }
    }, {
      key: "onAssessmentComplete",
      value: function onAssessmentComplete(assessmentState) {
        this._assessmentState = assessmentState;
        this.checkCompletion();
      }
    }, {
      key: "onAssessmentRestored",
      value: function onAssessmentRestored(assessmentState) {
        this._assessmentState = assessmentState;
      }
    }, {
      key: "checkCompletion",
      value: function checkCompletion() {
        var completionData = this.getCompletionData();

        if (completionData.status === COMPLETION_STATE$1.INCOMPLETE) {
          return;
        }

        Adapt.trigger('tracking:complete', completionData);
        Adapt.log.debug('tracking:complete', completionData);
      }
    }, {
      key: "getCompletionData",
      value: function getCompletionData() {
        var completionData = {
          status: COMPLETION_STATE$1.INCOMPLETE,
          assessment: null
        };

        if (this._config._requireContentCompleted && !Adapt.course.get('_isComplete')) {
          return completionData;
        }

        if (this._config._requireAssessmentCompleted) {
          if (!this._assessmentState) {
            return completionData;
          }

          completionData.status = this._assessmentState.isPass ? COMPLETION_STATE$1.PASSED : COMPLETION_STATE$1.FAILED;
          completionData.assessment = this._assessmentState;
          return completionData;
        }

        completionData.status = COMPLETION_STATE$1.COMPLETED;
        return completionData;
      }
    }, {
      key: "loadConfig",
      value: function loadConfig() {
        if (Adapt.config.has('_completionCriteria')) {
          this._config = Adapt.config.get('_completionCriteria');
        }
      }
    }]);

    return Tracking;
  }(Backbone.Controller);

  Adapt.tracking = new Tracking();
  __AMD("core/js/tracking", Adapt.tracking);

  var Device = function (_Backbone$Controller) {
    _inherits(Device, _Backbone$Controller);

    var _super = _createSuper(Device);

    function Device() {
      _classCallCheck(this, Device);

      return _super.apply(this, arguments);
    }

    _createClass(Device, [{
      key: "initialize",
      value: function initialize() {
        this.$html = $('html');
        this.$window = $(window);
        this.touch = Modernizr.touchevents;
        this.screenWidth = this.getScreenWidth();
        this.screenHeight = this.getScreenHeight();
        this.browser = (Bowser__default['default'].name || '').toLowerCase();
        this.version = (Bowser__default['default'].version || '').toLowerCase();
        this.OS = this.getOperatingSystem().toLowerCase();
        this.osVersion = Bowser__default['default'].osversion || '';
        this.renderingEngine = this.getRenderingEngine();
        this.onWindowResize = _.debounce(this.onWindowResize.bind(this), 100);
        this.listenTo(Adapt, {
          'configModel:dataLoaded': this.onConfigDataLoaded
        });
        var browser = this.browser.toLowerCase();
        var browserString = browser.replace(/msie|internet explorer/, 'ie');
        browserString += " version-".concat(this.version, " OS-").concat(this.OS, " ").concat(this.getAppleDeviceType());
        browserString += browserString.replace('.', '-').toLowerCase();
        browserString += " pixel-density-".concat(this.pixelDensity());
        this.$html.addClass(browserString);
      }
    }, {
      key: "orientation",
      get: function () {
        return this.screenWidth >= this.screenHeight ? 'landscape' : 'portrait';
      }
    }, {
      key: "aspectRatio",
      get: function () {
        return this.screenWidth / this.screenHeight;
      }
    }, {
      key: "onConfigDataLoaded",
      value: function onConfigDataLoaded() {
        this.screenSize = this.checkScreenSize();
        this.$html.addClass('size-' + this.screenSize);

        if (this.orientation) {
          this.$html.addClass('orientation-' + this.orientation);
        }

        this.$window.on('resize orientationchange', this.onWindowResize);
      }
    }, {
      key: "checkScreenSize",
      value: function checkScreenSize() {
        var screenSizeConfig = Adapt.config.get('screenSize');
        var screenSize;
        var screensizeEmThreshold = 300;
        var baseFontSize = 16;
        var mediumEmBreakpoint = screenSizeConfig.medium > screensizeEmThreshold ? screenSizeConfig.medium / baseFontSize : screenSizeConfig.medium;
        var smallEmBreakpoint = screenSizeConfig.small > screensizeEmThreshold ? screenSizeConfig.small / baseFontSize : screenSizeConfig.small;
        var fontSize = parseFloat($('html').css('font-size'));
        var screenSizeEmWidth = this.screenWidth / fontSize;

        if (screenSizeEmWidth >= mediumEmBreakpoint) {
          screenSize = 'large';
        } else if (screenSizeEmWidth >= smallEmBreakpoint) {
          screenSize = 'medium';
        } else {
          screenSize = 'small';
        }

        return screenSize;
      }
    }, {
      key: "getScreenWidth",
      value: function getScreenWidth() {
        return this.isAppleDevice() ? this.getAppleScreenWidth() : window.innerWidth || this.$window.width();
      }
    }, {
      key: "getScreenHeight",
      value: function getScreenHeight() {
        return this.isAppleDevice() ? this.getAppleScreenHeight() : window.innerHeight || this.$window.height();
      }
    }, {
      key: "getOperatingSystem",
      value: function getOperatingSystem() {
        var flags = ['windows', 'mac', 'linux', 'windowsphone', 'chromeos', 'android', 'ios', 'blackberry', 'firefoxos', 'webos', 'bada', 'tizen', 'sailfish'];
        var os = flags.find(function (name) {
          return Bowser__default['default'][name];
        }) || '';

        if (os === '') {
          var platform = navigator.platform.toLowerCase();
          var match = platform.match(/win|mac|linux/);
          if (match) os = match[0];
          if (os === 'win') os = 'windows';
          if (!os) os = 'PlatformUnknown';
        }

        return os;
      }
    }, {
      key: "getRenderingEngine",
      value: function getRenderingEngine() {
        var flags = ['webkit', 'blink', 'gecko', 'msie', 'msedge'];
        return flags.find(function (name) {
          return Bowser__default['default'][name];
        }) || '';
      }
    }, {
      key: "onWindowResize",
      value: function onWindowResize() {
        var previousWidth = this.screenWidth;
        var previousHeight = this.screenHeight;
        this.screenWidth = this.getScreenWidth();
        this.screenHeight = this.getScreenHeight();

        if (previousWidth === this.screenWidth && previousHeight === this.screenHeight) {
          return;
        }

        var newScreenSize = this.checkScreenSize();

        if (newScreenSize !== this.screenSize) {
          this.screenSize = newScreenSize;
          this.$html.removeClass('size-small size-medium size-large').addClass('size-' + this.screenSize);

          if (this.orientation) {
            this.$html.removeClass('orientation-landscape orientation-portrait').addClass('orientation-' + this.orientation);
          }

          Adapt.trigger('device:changed', this.screenSize);
        }

        Adapt.trigger('device:preResize device:resize device:postResize', this.screenWidth);
      }
    }, {
      key: "isAppleDevice",
      value: function isAppleDevice() {
        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
      }
    }, {
      key: "getAppleScreenWidth",
      value: function getAppleScreenWidth() {
        return Math.abs(window.orientation) === 90 ? window.screen.height : window.screen.width;
      }
    }, {
      key: "getAppleScreenHeight",
      value: function getAppleScreenHeight() {
        return Math.abs(window.orientation) === 90 ? window.screen.width : window.screen.height;
      }
    }, {
      key: "getAppleDeviceType",
      value: function getAppleDeviceType() {
        var flags = ['iphone', 'ipad', 'ipod'];
        return flags.find(function (name) {
          return Bowser__default['default'][name];
        }) || '';
      }
    }, {
      key: "pixelDensity",
      value: function pixelDensity() {
        var pixelDensity = window.devicePixelRatio || 1;

        if (pixelDensity >= 3) {
          return 'ultra-high';
        } else if (pixelDensity >= 2) {
          return 'high';
        } else if (pixelDensity >= 1.5) {
          return 'medium';
        } else {
          return 'low';
        }
      }
    }]);

    return Device;
  }(Backbone.Controller);

  __AMD("core/js/device", Adapt.device = new Device());

  var DrawerItemView = function (_Backbone$View) {
    _inherits(DrawerItemView, _Backbone$View);

    var _super = _createSuper(DrawerItemView);

    function DrawerItemView() {
      _classCallCheck(this, DrawerItemView);

      return _super.apply(this, arguments);
    }

    _createClass(DrawerItemView, [{
      key: "className",
      value: function className() {
        return 'drawer__menu drawer__item';
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          role: 'list'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'drawer:empty', this.remove);
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .drawer__item-btn': 'onDrawerItemClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates['drawerItem'];
        $(this.el).html(template(data)).appendTo('.drawer__holder');
        return this;
      }
    }, {
      key: "onDrawerItemClicked",
      value: function onDrawerItemClicked(event) {
        event.preventDefault();
        var eventCallback = this.model.get('eventCallback');
        Adapt.trigger(eventCallback);
      }
    }]);

    return DrawerItemView;
  }(Backbone.View);

  DrawerItemView.type = 'drawerItem';
  var DrawerItemView$1 = __AMD("core/js/views/drawerItemView", DrawerItemView);

  var DrawerView = function (_Backbone$View) {
    _inherits(DrawerView, _Backbone$View);

    var _super = _createSuper(DrawerView);

    function DrawerView() {
      _classCallCheck(this, DrawerView);

      return _super.apply(this, arguments);
    }

    _createClass(DrawerView, [{
      key: "className",
      value: function className() {
        return 'drawer u-display-none';
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          'role': 'dialog',
          'aria-modal': 'true',
          'aria-labelledby': 'drawer-heading',
          'aria-hidden': 'true'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _Adapt$config$get$_du, _Adapt$config$get;

        this._isVisible = false;
        this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
        this.drawerDir = Adapt.config.get('_defaultDirection') === 'rtl' ? 'left' : 'right';
        this.drawerDuration = (_Adapt$config$get$_du = (_Adapt$config$get = Adapt.config.get('_drawer')) === null || _Adapt$config$get === void 0 ? void 0 : _Adapt$config$get._duration) !== null && _Adapt$config$get$_du !== void 0 ? _Adapt$config$get$_du : 400;
        this.setupEventListeners();
        this.render();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(Adapt, {
          'navigation:toggleDrawer': this.toggleDrawer,
          'drawer:triggerCustomView': this.openCustomView,
          'drawer:closeDrawer': this.onCloseDrawer,
          'remove': this.onRemove,
          'drawer:remove': this.remove
        });
        this.onKeyUp = this.onKeyUp.bind(this);
        this.setupEscapeKey();
      }
    }, {
      key: "setupEscapeKey",
      value: function setupEscapeKey() {
        $(window).on('keyup', this.onKeyUp);
      }
    }, {
      key: "onKeyUp",
      value: function onKeyUp(event) {
        if (event.which !== 27) return;
        event.preventDefault();
        this.onCloseDrawer();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .drawer__back': 'onBackButtonClicked',
          'click .drawer__close': 'onCloseClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates.drawer;
        $(this.el).html(template({
          _globals: Adapt.course.get('_globals')
        })).prependTo('body');
        var shadowTemplate = Handlebars.templates.shadow;
        $(shadowTemplate()).prependTo('body');

        _.defer(this.postRender.bind(this));

        return this;
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$('a, button, input, select, textarea').attr('tabindex', -1);
        this.checkIfDrawerIsAvailable();
      }
    }, {
      key: "openCustomView",
      value: function openCustomView(view, hasBackButton) {
        this._hasBackButton = hasBackButton;
        this._isCustomViewVisible = true;
        Adapt.trigger('drawer:empty');
        this.showDrawer();
        this.$('.drawer__holder').html(view);
      }
    }, {
      key: "checkIfDrawerIsAvailable",
      value: function checkIfDrawerIsAvailable() {
        var isEmptyDrawer = this.collection.length === 0;
        $('.js-nav-drawer-btn').toggleClass('u-display-none', isEmptyDrawer);

        if (isEmptyDrawer) {
          Adapt.trigger('drawer:noItems');
        }
      }
    }, {
      key: "onBackButtonClicked",
      value: function onBackButtonClicked(event) {
        event.preventDefault();
        this.showDrawer(true);
      }
    }, {
      key: "onCloseClicked",
      value: function onCloseClicked(event) {
        event.preventDefault();
        this.hideDrawer();
      }
    }, {
      key: "onCloseDrawer",
      value: function onCloseDrawer($toElement) {
        this.hideDrawer($toElement);
      }
    }, {
      key: "onRemove",
      value: function onRemove() {
        this.hideDrawer();
      }
    }, {
      key: "toggleDrawer",
      value: function toggleDrawer() {
        if (this._isVisible && this._isCustomViewVisible === false) {
          this.hideDrawer();
          return;
        }

        this.showDrawer(true);
      }
    }, {
      key: "showDrawer",
      value: function showDrawer(emptyDrawer) {
        var _this = this;

        this.$el.removeClass('u-display-none').removeAttr('aria-hidden');

        if (!this._isVisible) {
          Adapt.a11y.popupOpened(this.$el);
          Adapt.a11y.scrollDisable('body');
          this._isVisible = true;
        }

        this.$('a, button, input, select, textarea').attr('tabindex', 0);

        if (emptyDrawer) {
          this.$('.drawer__back').addClass('u-display-none');
          this._isCustomViewVisible = false;
          this.emptyDrawer();

          if (this.collection.models.length === 1) {
            Adapt.trigger(this.collection.models[0].get('eventCallback'));
            this._isCustomViewVisible = false;
          } else {
            this.renderItems();
            Adapt.trigger('drawer:openedItemView');
          }
        } else {
          var hideDrawerBackButton = !this._hasBackButton || this.collection.models.length <= 1;
          this.$('.drawer__back').toggleClass('u-display-none', hideDrawerBackButton);
          Adapt.trigger('drawer:openedCustomView');
        }

        var complete = function () {
          _this.addShadowEvent();

          Adapt.trigger('drawer:opened');
          Adapt.a11y.focusFirst(_this.$el, {
            defer: true
          });
        };

        var direction = {};

        if (this.disableAnimation) {
          $('.js-shadow').removeClass('u-display-none');
          $('.js-drawer-holder').scrollTop(0);
          direction[this.drawerDir] = 0;
          this.$el.css(direction);
          complete();
        } else {
          var _Adapt$config$get2;

          $('.js-shadow').velocity({
            opacity: 1
          }, {
            duration: this.drawerDuration,
            begin: function () {
              $('.js-shadow').removeClass('u-display-none');
              $('.js-drawer-holder').scrollTop(0);
              complete();
            }
          });
          var easing = ((_Adapt$config$get2 = Adapt.config.get('_drawer')) === null || _Adapt$config$get2 === void 0 ? void 0 : _Adapt$config$get2._showEasing) || 'easeOutQuart';
          direction[this.drawerDir] = 0;
          this.$el.velocity(direction, this.drawerDuration, easing);
        }
      }
    }, {
      key: "emptyDrawer",
      value: function emptyDrawer() {
        this.$('.drawer__holder').empty();
      }
    }, {
      key: "renderItems",
      value: function renderItems() {
        Adapt.trigger('drawer:empty');
        this.emptyDrawer();
        this.collection.forEach(function (model) {
          return new DrawerItemView$1({
            model: model
          });
        });
      }
    }, {
      key: "hideDrawer",
      value: function hideDrawer($toElement) {
        var _this2 = this;

        if (!this._isVisible) return;
        var direction = {};
        Adapt.a11y.popupClosed($toElement);
        this._isVisible = false;
        Adapt.a11y.scrollEnable('body');

        if (this.disableAnimation) {
          direction[this.drawerDir] = -this.$el.width();
          this.$el.css(direction).addClass('u-display-none').attr('aria-hidden', 'true');
          $('.js-shadow').addClass('u-display-none');
          Adapt.trigger('drawer:closed');
        } else {
          var _Adapt$config$get3;

          var easing = ((_Adapt$config$get3 = Adapt.config.get('_drawer')) === null || _Adapt$config$get3 === void 0 ? void 0 : _Adapt$config$get3._hideEasing) || 'easeInQuart';
          direction[this.drawerDir] = -this.$el.width();
          this.$el.velocity(direction, this.drawerDuration, easing, function () {
            _this2.$el.addClass('u-display-none').attr('aria-hidden', 'true');

            Adapt.trigger('drawer:closed');
          });
          $('.js-shadow').velocity({
            opacity: 0
          }, {
            duration: this.drawerDuration,
            complete: function () {
              $('.js-shadow').addClass('u-display-none');
            }
          });
        }

        this._isCustomViewVisible = false;
        this.removeShadowEvent();
      }
    }, {
      key: "addShadowEvent",
      value: function addShadowEvent() {
        var _this3 = this;

        $('.js-shadow').one('click touchstart', function () {
          return _this3.onCloseDrawer();
        });
      }
    }, {
      key: "removeShadowEvent",
      value: function removeShadowEvent() {
        $('.js-shadow').off('click touchstart');
      }
    }, {
      key: "remove",
      value: function remove() {
        _get(_getPrototypeOf(DrawerView.prototype), "remove", this).call(this);

        $(window).off('keyup', this.onKeyUp);
        Adapt.trigger('drawer:empty');
        this.collection.reset();
        $('.js-shadow').remove();
      }
    }]);

    return DrawerView;
  }(Backbone.View);

  Object.assign(DrawerView, {
    childContainer: '.js-drawer-holder',
    childView: DrawerItemView$1
  });
  var DrawerView$1 = __AMD("core/js/views/drawerView", DrawerView);

  var DrawerCollection = new Backbone.Collection(null, {
    comparator: 'drawerOrder'
  });
  var Drawer = {};

  Drawer.addItem = function (drawerObject, eventCallback) {
    drawerObject.eventCallback = eventCallback;
    DrawerCollection.add(drawerObject);
  };

  Drawer.triggerCustomView = function (view, hasBackButton) {
    if (hasBackButton !== false) {
      hasBackButton = true;
    }

    Adapt.trigger('drawer:triggerCustomView', view, hasBackButton);
  };

  Adapt.on({
    'adapt:start': function () {
      new DrawerView$1({
        collection: DrawerCollection
      });
    },
    'app:languageChanged': function () {
      Adapt.trigger('drawer:remove');
    }
  });
  __AMD("core/js/drawer", Adapt.drawer = Drawer);

  var NotifyPushView = __AMD("core/js/views/notifyPushView", function (_Backbone$View) {
    _inherits(NotifyPushView, _Backbone$View);

    var _super = _createSuper(NotifyPushView);

    function NotifyPushView() {
      _classCallCheck(this, NotifyPushView);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyPushView, [{
      key: "className",
      value: function className() {
        var classes = 'notify-push ';
        classes += this.model.get('_classes') || '';
        return classes;
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          'role': 'dialog',
          'aria-labelledby': 'notify-push-heading',
          'aria-modal': 'false'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, {
          'notify:pushShown notify:pushRemoved': this.updateIndexPosition,
          'remove': this.remove
        });
        this.listenTo(this.model.collection, {
          'remove': this.updateIndexPosition,
          'change:_index': this.updatePushPosition
        });
        this.preRender();
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-notify-push-close-btn': 'closePush',
          'click .js-notify-push-inner': 'triggerEvent'
        };
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.hasBeenRemoved = false;
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates['notifyPush'];
        this.$el.html(template(data)).appendTo('#wrapper');

        _.defer(this.postRender.bind(this));

        return this;
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$el.addClass('is-active');

        _.delay(this.closePush.bind(this), this.model.get('_timeout'));

        Adapt.trigger('notify:pushShown');
      }
    }, {
      key: "closePush",
      value: function closePush(event) {
        var _this = this;

        if (event) {
          event.preventDefault();
        }

        if (this.hasBeenRemoved === false) {
          this.hasBeenRemoved = true;
          this.$el.removeClass('is-active');

          _.delay(function () {
            _this.model.collection.remove(_this.model);

            Adapt.trigger('notify:pushRemoved', _this);

            _this.remove();
          }, 600);
        }
      }
    }, {
      key: "triggerEvent",
      value: function triggerEvent(event) {
        Adapt.trigger(this.model.get('_callbackEvent'));
        this.closePush();
      }
    }, {
      key: "updateIndexPosition",
      value: function updateIndexPosition() {
        var _this2 = this;

        if (this.hasBeenRemoved) return;
        var models = this.model.collection.models;
        models.forEach(function (model, index) {
          if (!model.get('_isActive')) return;
          model.set('_index', index);

          _this2.updatePushPosition();
        });
      }
    }, {
      key: "updatePushPosition",
      value: function updatePushPosition() {
        if (this.hasBeenRemoved) {
          return;
        }

        if (typeof this.model.get('_index') !== 'undefined') {
          var elementHeight = this.$el.height();
          var offset = 20;
          var navigationHeight = $('.nav').height();
          var currentIndex = this.model.get('_index');
          var flippedIndex = currentIndex === 0 ? 1 : 0;

          if (this.model.collection.where({
            _isActive: true
          }).length === 1) {
            flippedIndex = 0;
          }

          var positionLowerPush = (elementHeight + offset) * flippedIndex + navigationHeight + offset;
          this.$el.css('top', positionLowerPush);
        }
      }
    }]);

    return NotifyPushView;
  }(Backbone.View));

  var NotifyModel = __AMD("core/js/models/notifyModel", function (_LockingModel) {
    _inherits(NotifyModel, _LockingModel);

    var _super = _createSuper(NotifyModel);

    function NotifyModel() {
      _classCallCheck(this, NotifyModel);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _isActive: false,
          _showIcon: false,
          _timeout: 3000
        };
      }
    }]);

    return NotifyModel;
  }(LockingModel));

  var NotifyPushCollection = __AMD("core/js/collections/notifyPushCollection", function (_Backbone$Collection) {
    _inherits(NotifyPushCollection, _Backbone$Collection);

    var _super = _createSuper(NotifyPushCollection);

    function NotifyPushCollection() {
      _classCallCheck(this, NotifyPushCollection);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyPushCollection, [{
      key: "initialize",
      value: function initialize() {
        this.model = NotifyModel;
        this.listenTo(this, 'add', this.onPushAdded);
        this.listenTo(Adapt, 'notify:pushRemoved', this.onRemovePush);
      }
    }, {
      key: "onPushAdded",
      value: function onPushAdded(model) {
        this.checkPushCanShow(model);
      }
    }, {
      key: "checkPushCanShow",
      value: function checkPushCanShow(model) {
        if (!this.canShowPush()) return;
        model.set('_isActive', true);
        this.showPush(model);
      }
    }, {
      key: "canShowPush",
      value: function canShowPush() {
        var availablePushNotifications = this.where({
          _isActive: true
        });
        return availablePushNotifications.length < 2;
      }
    }, {
      key: "showPush",
      value: function showPush(model) {
        new NotifyPushView({
          model: model
        });
      }
    }, {
      key: "onRemovePush",
      value: function onRemovePush(view) {
        var inactivePushNotifications = this.where({
          _isActive: false
        });

        if (inactivePushNotifications.length > 0) {
          this.checkPushCanShow(inactivePushNotifications[0]);
        }
      }
    }]);

    return NotifyPushCollection;
  }(Backbone.Collection));

  var ChildEvent = __AMD("core/js/childEvent", function (_Backbone$Controller) {
    _inherits(ChildEvent, _Backbone$Controller);

    var _super = _createSuper(ChildEvent);

    function ChildEvent() {
      _classCallCheck(this, ChildEvent);

      return _super.apply(this, arguments);
    }

    _createClass(ChildEvent, [{
      key: "initialize",
      value: function initialize(type, target, model) {
        this.type = type;
        this.target = target;
        this.isForced = false;
        this.isStoppedImmediate = false;
        this.isStoppedNext = false;
        this.hasRequestChild = false;
        this._model = model;
      }
    }, {
      key: "model",
      get: function () {
        return this._model;
      },
      set: function (model) {
        if (this.type !== 'requestChild') {
          Adapt.log.warn("Cannot change model in ".concat(this.type, " event."));
          return;
        }

        if (this._model) {
          Adapt.log.warn("Cannot inject two models in one sitting. ".concat(model.get('_id'), " attempts to overwrite ").concat(this._model.get('_id')));
          return;
        }

        this._model = model;
        this.hasRequestChild = true;
      }
    }, {
      key: "reset",
      value: function reset() {
        this.isStoppedImmediate = false;
        this.isStoppedNext = false;
      }
    }, {
      key: "force",
      value: function force() {
        this.isForced = true;
      }
    }, {
      key: "stop",
      value: function stop() {
        var immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (!immediate) {
          return this.stopNext();
        }

        this.isStoppedImmediate = true;
      }
    }, {
      key: "stopNext",
      value: function stopNext() {
        this.isStoppedNext = true;
      }
    }, {
      key: "close",
      value: function close() {
        this.trigger('closed');
      }
    }]);

    return ChildEvent;
  }(Backbone.Controller));

  var register = __AMD("core/js/reactHelpers", function register(name, component) {
    templates[name] = function () {
      var mode = 'reactTemplate';

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var preRenderEvent = new TemplateRenderEvent("".concat(mode, ":preRender"), name, mode, null, args);
      Adapt.trigger(preRenderEvent.type, preRenderEvent);
      var value = component.apply(void 0, _toConsumableArray(preRenderEvent.args));
      var postRenderEvent = new TemplateRenderEvent("".concat(mode, ":postRender"), name, mode, value, preRenderEvent.args);
      Adapt.trigger(postRenderEvent.type, postRenderEvent);
      return postRenderEvent.value;
    };
  });

  (function () {
    var original = React__default['default'].createElement;

    React__default['default'].createElement = function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var name = args[0];
      var mode = 'reactElement';
      var preRenderEvent = new TemplateRenderEvent("".concat(mode, ":preRender"), name, mode, null, args);
      Adapt.trigger(preRenderEvent.type, preRenderEvent);
      var value = original.apply(void 0, _toConsumableArray(preRenderEvent.args));
      var postRenderEvent = new TemplateRenderEvent("".concat(mode, ":postRender"), name, mode, value, preRenderEvent.args);
      Adapt.trigger(postRenderEvent.type, postRenderEvent);
      return postRenderEvent.value;
    };
  })();

  var templates = {};
  function html(html) {
    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (!html) return;
    var node = html ? HTMLReactParser__default['default'](html) : '';

    if (_typeof(node) === 'object' && ref) {
      node = Array.isArray(node) ? node[0] : node;
      node = React__default['default'].cloneElement(node, {
        ref: ref
      });
    }

    return node;
  }
  function compile(template) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    var output = Handlebars.compile(template).apply(void 0, args);
    return output;
  }
  function helper(name) {
    var output = Handlebars.helpers[name].call(arguments.length <= 1 ? undefined : arguments[1]);
    return output && output.string || output;
  }
  function classes() {
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    return _.uniq(_.flatten(args).filter(Boolean).join(' ').split(' ')).join(' ');
  }
  function prefixClasses(prefixes) {
    for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      args[_key6 - 1] = arguments[_key6];
    }

    var classes = _.flatten(args).filter(Boolean);

    var prefixed = _.flatten(prefixes.map(function (prefix) {
      return classes.map(function (className) {
        return "".concat(prefix).concat(className);
      });
    }));

    return _.uniq(prefixed.join(' ').split(' ')).join(' ');
  }

  var AdaptView = function (_Backbone$View) {
    _inherits(AdaptView, _Backbone$View);

    var _super = _createSuper(AdaptView);

    function AdaptView() {
      _classCallCheck(this, AdaptView);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptView, [{
      key: "attributes",
      value: function attributes() {
        return {
          'data-adapt-id': this.model.get('_id')
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(this.model, {
          'change:_isVisible': this.toggleVisibility,
          'change:_isHidden': this.toggleHidden,
          'change:_isComplete': this.onIsCompleteChange
        });
        this.isJSX = (this.constructor.template || '').includes('.jsx');

        if (this.isJSX) {
          var _this$model, _this$model$getChildr;

          this._classSet = new Set(_.result(this, 'className').trim().split(/\s+/));
          this.listenTo(this.model, 'all', this.changed);
          var children = (_this$model = this.model) === null || _this$model === void 0 ? void 0 : (_this$model$getChildr = _this$model.getChildren) === null || _this$model$getChildr === void 0 ? void 0 : _this$model$getChildr.call(_this$model);
          children && this.listenTo(children, 'all', this.changed);
          this.listenTo(Adapt, 'device:changed', this.changed);
        }

        this.model.set({
          _globals: Adapt.course.get('_globals'),
          _isReady: false
        });
        this._isRemoved = false;

        if (Adapt.location._currentId === this.model.get('_id')) {
          Adapt.parentView = this;
        }

        this.preRender();
        this.render();
        this.setupOnScreenHandler();
      }
    }, {
      key: "preRender",
      value: function preRender() {}
    }, {
      key: "postRender",
      value: function () {
        var _postRender = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.addChildren();

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function postRender() {
          return _postRender.apply(this, arguments);
        }

        return postRender;
      }()
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var type = this.constructor.type;
        Adapt.trigger("".concat(type, "View:preRender view:preRender"), this);

        if (this.isJSX) {
          this.changed();
        } else {
          var data = this.model.toJSON();
          data.view = this;
          var template = Handlebars.templates[this.constructor.template];
          this.$el.html(template(data));
        }

        Adapt.trigger("".concat(type, "View:render view:render"), this);

        _.defer(_asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!_this._isRemoved) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt("return");

                case 2:
                  _context2.next = 4;
                  return _this.postRender();

                case 4:
                  Adapt.trigger("".concat(type, "View:postRender view:postRender"), _this);

                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        })));

        return this;
      }
    }, {
      key: "changed",
      value: function changed() {
        var eventName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        if (!this.isJSX) {
          throw new Error('Cannot call changed on a non-react view');
        }

        if (typeof eventName === 'string' && eventName.startsWith('bubble')) {
          return;
        }

        var props = _objectSpread2(_objectSpread2(_objectSpread2({}, this), this.model.toJSON()), {}, {
          _globals: Adapt.course.get('_globals')
        });

        var Template = templates[this.constructor.template.replace('.jsx', '')];
        this.updateViewProperties();
        ReactDOM__default['default'].render(React__default['default'].createElement(Template, props), this.el);
      }
    }, {
      key: "updateViewProperties",
      value: function updateViewProperties() {
        var _this2 = this;

        var classesToAdd = _.result(this, 'className').trim().split(/\s+/);

        classesToAdd.forEach(function (i) {
          return _this2._classSet.add(i);
        });

        var classesToRemove = _toConsumableArray(this._classSet).filter(function (i) {
          return !classesToAdd.includes(i);
        });

        classesToRemove.forEach(function (i) {
          return _this2._classSet.delete(i);
        });

        this._setAttributes(_objectSpread2(_objectSpread2({}, _.result(this, 'attributes')), {}, {
          id: _.result(this, 'id')
        }));

        this.$el.removeClass(classesToRemove).addClass(classesToAdd);
      }
    }, {
      key: "setupOnScreenHandler",
      value: function setupOnScreenHandler() {
        var _this3 = this;

        var onscreen = this.model.get('_onScreen');
        if (!(onscreen !== null && onscreen !== void 0 && onscreen._isEnabled)) return;
        this.$el.addClass("has-animation ".concat(onscreen._classes, "-before"));
        this.$el.on('onscreen.adaptView', function (e, m) {
          if (!m.onscreen) return;
          var minVerticalInview = onscreen._percentInviewVertical || 33;
          if (m.percentInviewVertical < minVerticalInview) return;

          _this3.$el.addClass("".concat(onscreen._classes, "-after")).off('onscreen.adaptView');
        });
      }
    }, {
      key: "addChildren",
      value: function () {
        var _addChildren = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
          var addedCount, models, event, subsequentModels, model, ChildView, childView;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  this.nthChild = this.nthChild || 0;
                  _context3.next = 3;
                  return this.addDescendants(false);

                case 3:
                  addedCount = _context3.sent;

                case 4:

                  models = this.model.getAvailableChildModels();
                  event = this._getAddChildEvent(models[this.nthChild]);

                  if (event) {
                    _context3.next = 9;
                    break;
                  }

                  return _context3.abrupt("break", 26);

                case 9:
                  if (event.isForced) {
                    event.reset();
                  }

                  if (!(event.isStoppedImmediate || !event.model)) {
                    _context3.next = 14;
                    break;
                  }

                  subsequentModels = models.slice(this.nthChild);
                  subsequentModels.forEach(function (model) {
                    return model.setOnChildren('_isRendered', false);
                  });
                  return _context3.abrupt("break", 26);

                case 14:
                  model = event.model;
                  model.set({
                    _isRendered: true,
                    _nthChild: ++this.nthChild
                  });
                  ChildView = this.constructor.childView || Adapt.getViewClass(model);

                  if (ChildView) {
                    _context3.next = 19;
                    break;
                  }

                  throw new Error("The component '".concat(model.attributes._id, "' ('").concat(model.attributes._component, "') has not been installed, and so is not available in your project."));

                case 19:
                  childView = new ChildView({
                    model: model
                  });
                  this.addChildView(childView);
                  addedCount++;

                  if (!event.isStoppedNext) {
                    _context3.next = 24;
                    break;
                  }

                  return _context3.abrupt("break", 26);

                case 24:
                  _context3.next = 4;
                  break;

                case 26:
                  if (addedCount) {
                    _context3.next = 28;
                    break;
                  }

                  return _context3.abrupt("return", addedCount);

                case 28:
                  this.model.set('_isReady', false);
                  return _context3.abrupt("return", addedCount);

                case 30:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function addChildren() {
          return _addChildren.apply(this, arguments);
        }

        return addChildren;
      }()
    }, {
      key: "addChildView",
      value: function addChildView(childView) {
        var childViews = this.getChildViews() || [];
        childViews.push(childView);
        this.setChildViews(childViews);
        var $parentContainer = this.$(this.constructor.childContainer);

        switch (childView.model.get('_renderPosition')) {
          case 'outer-append':
            this.$el.append(childView.$el);
            break;

          case 'inner-append':
          default:
            $parentContainer.append(childView.$el);
            break;
        }

        Adapt.trigger('view:childAdded', this, childView);
        return childView;
      }
    }, {
      key: "addDescendants",
      value: function () {
        var _addDescendants = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          var addedDescendantCount, childViews, i, l, view;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  addedDescendantCount = 0;
                  childViews = this.getChildViews();

                  if (childViews) {
                    _context4.next = 4;
                    break;
                  }

                  return _context4.abrupt("return", addedDescendantCount);

                case 4:
                  i = 0, l = childViews.length;

                case 5:
                  if (!(i < l)) {
                    _context4.next = 20;
                    break;
                  }

                  view = childViews[i];

                  if (!view.addChildren) {
                    _context4.next = 13;
                    break;
                  }

                  _context4.next = 10;
                  return view.addChildren();

                case 10:
                  _context4.t0 = _context4.sent;
                  _context4.next = 14;
                  break;

                case 13:
                  _context4.t0 = 0;

                case 14:
                  addedDescendantCount = _context4.t0;

                  if (!addedDescendantCount) {
                    _context4.next = 17;
                    break;
                  }

                  return _context4.abrupt("break", 20);

                case 17:
                  i++;
                  _context4.next = 5;
                  break;

                case 20:
                  if (addedDescendantCount) {
                    _context4.next = 23;
                    break;
                  }

                  this.model.checkReadyStatus();
                  return _context4.abrupt("return", addedDescendantCount);

                case 23:
                  this.model.set('_isReady', false);
                  return _context4.abrupt("return", addedDescendantCount);

                case 25:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function addDescendants() {
          return _addDescendants.apply(this, arguments);
        }

        return addDescendants;
      }()
    }, {
      key: "whenReady",
      value: function () {
        var _whenReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
          var _this4 = this;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (!this.model.get('_isReady')) {
                    _context5.next = 2;
                    break;
                  }

                  return _context5.abrupt("return");

                case 2:
                  return _context5.abrupt("return", new Promise(function (resolve) {
                    var onReadyChange = function (model, value) {
                      if (!value) return;

                      _this4.stopListening(_this4.model, 'change:_isReady', onReadyChange);

                      resolve();
                    };

                    _this4.listenTo(_this4.model, 'change:_isReady', onReadyChange);

                    _this4.model.checkReadyStatus();
                  }));

                case 3:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function whenReady() {
          return _whenReady.apply(this, arguments);
        }

        return whenReady;
      }()
    }, {
      key: "_getAddChildEvent",
      value: function _getAddChildEvent(model) {
        var isRequestChild = !model;
        var event = new ChildEvent(null, this, model);

        if (isRequestChild) {
          var canRequestChild = this.model.get('_canRequestChild');

          if (!canRequestChild) {
            return;
          }

          event.type = 'requestChild';
          Adapt.trigger('view:requestChild', event);

          if (!event.hasRequestChild) {
            event.close();
            return;
          }
        }

        event.type = 'addChild';
        Adapt.trigger('view:addChild', event);
        event.close();
        return event;
      }
    }, {
      key: "findDescendantViews",
      value: function findDescendantViews(isParentFirst) {
        var descendants = [];
        var childViews = this.getChildViews();
        childViews === null || childViews === void 0 ? void 0 : childViews.forEach(function (view) {
          var _view$findDescendantV;

          if (isParentFirst) descendants.push(view);
          var children = (_view$findDescendantV = view.findDescendantViews) === null || _view$findDescendantV === void 0 ? void 0 : _view$findDescendantV.call(view, isParentFirst);
          if (children) descendants.push.apply(descendants, _toConsumableArray(children));
          if (!isParentFirst) descendants.push(view);
        });
        return descendants;
      }
    }, {
      key: "setReadyStatus",
      value: function setReadyStatus() {
        this.model.set('_isReady', true);
      }
    }, {
      key: "setCompletionStatus",
      value: function setCompletionStatus() {
        if (!this.model.get('_isVisible')) return;
        this.model.set({
          _isComplete: true,
          _isInteractionComplete: true
        });
      }
    }, {
      key: "resetCompletionStatus",
      value: function resetCompletionStatus(type) {
        if (!this.model.get('_canReset')) return;
        var descendantComponents = this.model.findDescendantModels('component');

        if (descendantComponents.length === 0) {
          this.model.reset(type);
        } else {
          descendantComponents.forEach(function (model) {
            return model.reset(type);
          });
        }
      }
    }, {
      key: "preRemove",
      value: function preRemove() {
        var type = this.constructor.type;
        Adapt.trigger("".concat(type, "View:preRemove view:preRemove"), this);
      }
    }, {
      key: "remove",
      value: function remove() {
        var _this5 = this;

        var type = this.constructor.type;
        this.preRemove();
        Adapt.trigger("".concat(type, "View:remove view:remove"), this);
        this._isRemoved = true;
        this.stopListening();
        Adapt.wait.for(function (end) {
          if (_this5.isJSX) {
            ReactDOM__default['default'].unmountComponentAtNode(_this5.el);
          }

          _this5.$el.off('onscreen.adaptView');

          _get(_getPrototypeOf(AdaptView.prototype), "remove", _this5).call(_this5);

          _.defer(function () {
            Adapt.trigger("".concat(type, "View:postRemove view:postRemove"), _this5);
          });

          end();
        });
        return this;
      }
    }, {
      key: "setVisibility",
      value: function setVisibility() {
        return this.model.get('_isVisible') ? '' : 'u-visibility-hidden';
      }
    }, {
      key: "toggleVisibility",
      value: function toggleVisibility() {
        this.$el.toggleClass('u-visibility-hidden', !this.model.get('_isVisible'));
      }
    }, {
      key: "setHidden",
      value: function setHidden() {
        return this.model.get('_isHidden') ? 'u-display-none' : '';
      }
    }, {
      key: "toggleHidden",
      value: function toggleHidden() {
        this.$el.toggleClass('u-display-none', this.model.get('_isHidden'));
      }
    }, {
      key: "onIsCompleteChange",
      value: function onIsCompleteChange(model, isComplete) {
        this.$el.toggleClass('is-complete', isComplete);
      }
    }, {
      key: "getChildViews",
      value: function getChildViews() {
        if (!this._childViews) return this._childViews;
        return Object.entries(this._childViews).map(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2);
              _ref3[0];
              var value = _ref3[1];

          return value;
        });
      }
    }, {
      key: "setChildViews",
      value: function setChildViews(value) {
        this._childViews = value;
      }
    }, {
      key: "childViews",
      get: function () {
        Adapt.log.deprecated('view.childViews use view.getChildViews() and view.setChildViews([])');

        if (Array.isArray(this._childViews)) {
          return _.indexBy(this._childViews, function (view) {
            return view.model.get('_id');
          });
        }

        return this._childViews;
      },
      set: function (value) {
        Adapt.log.deprecated('view.childViews use view.getChildViews() and view.setChildViews([])');
        this.setChildViews(value);
      }
    }]);

    return AdaptView;
  }(Backbone.View);

  AdaptView.className = '';
  var AdaptView$1 = __AMD("core/js/views/adaptView", AdaptView);

  var NotifyView = __AMD("core/js/views/notifyView", function (_Backbone$View) {
    _inherits(NotifyView, _Backbone$View);

    var _super = _createSuper(NotifyView);

    function NotifyView() {
      _classCallCheck(this, NotifyView);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyView, [{
      key: "className",
      value: function className() {
        return "notify ".concat(this.model.get('_classes') || '');
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return Object.assign({
          role: 'dialog',
          'aria-labelledby': 'notify-heading',
          'aria-modal': 'true'
        }, this.model.get('_attributes'));
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-notify-btn-alert': 'onAlertButtonClicked',
          'click .js-notify-btn-prompt': 'onPromptButtonClicked',
          'click .js-notify-close-btn': 'onCloseButtonClicked',
          'click .js-notify-shadow-click': 'onShadowClicked'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        _.bindAll(this, 'resetNotifySize', 'onKeyUp');

        this.disableAnimation = Adapt.config.get('_disableAnimation') || false;
        this.isOpen = false;
        this.hasOpened = false;
        this.setupEventListeners();
        this.render();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(Adapt, {
          'remove page:scrollTo': this.closeNotify,
          'notify:resize': this.resetNotifySize,
          'notify:cancel': this.cancelNotify,
          'notify:close': this.closeNotify,
          'device:resize': this.resetNotifySize
        });
        this.setupEscapeKey();
      }
    }, {
      key: "setupEscapeKey",
      value: function setupEscapeKey() {
        $(window).on('keyup', this.onKeyUp);
      }
    }, {
      key: "onKeyUp",
      value: function onKeyUp(event) {
        if (event.which !== 27) return;
        event.preventDefault();
        this.cancelNotify();
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates.notify;
        this.$el.css('visibility', 'hidden');
        this.$el.html(template(data)).appendTo('body');
        this.$('.notify__popup').css('visibility', 'hidden');
        this.$el.css('visibility', 'visible');
        this.showNotify();
        return this;
      }
    }, {
      key: "onAlertButtonClicked",
      value: function onAlertButtonClicked(event) {
        event.preventDefault();
        this.closeNotify();
        Adapt.trigger(this.model.get('_callbackEvent'), this);
      }
    }, {
      key: "onPromptButtonClicked",
      value: function onPromptButtonClicked(event) {
        event.preventDefault();
        this.closeNotify();
        Adapt.trigger($(event.currentTarget).attr('data-event'), this);
      }
    }, {
      key: "onCloseButtonClicked",
      value: function onCloseButtonClicked(event) {
        event.preventDefault();
        this.cancelNotify();
      }
    }, {
      key: "onShadowClicked",
      value: function onShadowClicked(event) {
        event.preventDefault();
        if (this.model.get('_closeOnShadowClick') === false) return;
        this.cancelNotify();
      }
    }, {
      key: "cancelNotify",
      value: function cancelNotify() {
        if (this.model.get('_isCancellable') === false) return;
        this.closeNotify();
        Adapt.trigger('notify:cancelled', this);
      }
    }, {
      key: "resetNotifySize",
      value: function resetNotifySize() {
        if (!this.hasOpened) return;
        this.resizeNotify();
      }
    }, {
      key: "resizeNotify",
      value: function resizeNotify() {
        var windowHeight = $(window).height();
        var notifyHeight = this.$('.notify__popup-inner').outerHeight();
        var isFullWindow = notifyHeight >= windowHeight;
        this.$('.notify__popup').css({
          'height': isFullWindow ? '100%' : 'auto',
          'top': isFullWindow ? 0 : '',
          'margin-top': isFullWindow ? '' : -(notifyHeight / 2),
          'overflow-y': isFullWindow ? 'scroll' : '',
          '-webkit-overflow-scrolling': isFullWindow ? 'touch' : ''
        });
      }
    }, {
      key: "showNotify",
      value: function () {
        var _showNotify = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.isOpen = true;
                  _context.next = 3;
                  return this.addSubView();

                case 3:
                  Adapt.notify.stack.push(this);
                  this.$previousActiveElement = $(document.activeElement);
                  Adapt.trigger('notify:opened', this);
                  this.$el.imageready(this.onLoaded.bind(this));

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function showNotify() {
          return _showNotify.apply(this, arguments);
        }

        return showNotify;
      }()
    }, {
      key: "onLoaded",
      value: function onLoaded() {
        var _this = this;

        if (this.disableAnimation) {
          this.$('.notify__shadow').css('display', 'block');
        } else {
          this.$('.notify__shadow').velocity({
            opacity: 0
          }, {
            duration: 0
          }).velocity({
            opacity: 1
          }, {
            duration: 400,
            begin: function () {
              _this.$('.notify__shadow').css('display', 'block');
            }
          });
        }

        this.resizeNotify();

        if (this.disableAnimation) {
          this.$('.notify__popup').css('visibility', 'visible');
          this.onOpened();
        } else {
          this.$('.notify__popup').velocity({
            opacity: 0
          }, {
            duration: 0
          }).velocity({
            opacity: 1
          }, {
            duration: 400,
            begin: function () {
              _this.$('.notify__popup').css('visibility', 'visible');

              _this.onOpened();
            }
          });
        }
      }
    }, {
      key: "onOpened",
      value: function onOpened() {
        $.inview();
        this.hasOpened = true;
        Adapt.a11y.popupOpened(this.$('.notify__popup'));
        Adapt.a11y.scrollDisable('body');
        $('html').addClass('notify');
        Adapt.a11y.focusFirst(this.$('.notify__popup'), {
          defer: false
        });
      }
    }, {
      key: "addSubView",
      value: function () {
        var _addSubView = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var _this2 = this;

          var model, View;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  this.subView = this.model.get('_view');

                  if (this.model.get('_id')) {
                    model = Adapt.findById(this.model.get('_id'));
                    View = Adapt.getViewClass(model);
                    this.subView = new View({
                      model: model
                    });
                  }

                  if (this.subView) {
                    _context2.next = 4;
                    break;
                  }

                  return _context2.abrupt("return");

                case 4:
                  this.subView.$el.on('resize', this.resetNotifySize);
                  this.$('.notify__content-inner').prepend(this.subView.$el);

                  if (!(!(this.subView instanceof AdaptView$1) || this.subView.model.get('_isReady'))) {
                    _context2.next = 8;
                    break;
                  }

                  return _context2.abrupt("return");

                case 8:
                  return _context2.abrupt("return", new Promise(function (resolve) {
                    var check = function (model, value) {
                      if (!value) return;

                      _this2.subView.model.off('change:_isReady', check);

                      resolve();
                    };

                    _this2.subView.model.on('change:_isReady', check);
                  }));

                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function addSubView() {
          return _addSubView.apply(this, arguments);
        }

        return addSubView;
      }()
    }, {
      key: "closeNotify",
      value: function closeNotify() {
        var _this3 = this;

        var stackItem = Adapt.notify.stack[Adapt.notify.stack.length - 1];
        if (this !== stackItem) return;
        Adapt.notify.stack.pop();
        if (!this.isOpen) return;
        this.isOpen = false;

        if (this.hasOpened) {
          this.onCloseReady();
          return;
        }

        this.listenToOnce(Adapt, 'popup:opened', function () {
          _.defer(_this3.onCloseReady.bind(_this3));
        });
      }
    }, {
      key: "onCloseReady",
      value: function onCloseReady() {
        var _this4 = this;

        if (this.disableAnimation) {
          this.$('.notify__popup').css('visibility', 'hidden');
          this.$el.css('visibility', 'hidden');
          this.remove();
        } else {
          this.$('.notify__popup').velocity({
            opacity: 0
          }, {
            duration: 400,
            complete: function () {
              _this4.$('.notify__popup').css('visibility', 'hidden');
            }
          });
          this.$('.notify__shadow').velocity({
            opacity: 0
          }, {
            duration: 400,
            complete: function () {
              _this4.$el.css('visibility', 'hidden');

              _this4.remove();
            }
          });
        }

        Adapt.a11y.scrollEnable('body');
        $('html').removeClass('notify');
        Adapt.a11y.popupClosed(this.$previousActiveElement);
        Adapt.trigger('notify:closed', this);
      }
    }, {
      key: "remove",
      value: function remove() {
        var _get2;

        this.removeSubView();
        $(window).off('keyup', this.onKeyUp);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(NotifyView.prototype), "remove", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "removeSubView",
      value: function removeSubView() {
        if (!this.subView) return;
        this.subView.$el.off('resize', this.resetNotifySize);

        if (this.subView instanceof AdaptView$1) {
          var views = [].concat(_toConsumableArray(this.subView.findDescendantViews()), [this.subView]);
          views.forEach(function (view) {
            view.model.set('_isReady', false);
            view.remove();
          });
        } else {
          this.subView.remove();
        }

        this.subView = null;
      }
    }]);

    return NotifyView;
  }(Backbone.View));

  var Notify = function (_Backbone$Controller) {
    _inherits(Notify, _Backbone$Controller);

    var _super = _createSuper(Notify);

    function Notify() {
      _classCallCheck(this, Notify);

      return _super.apply(this, arguments);
    }

    _createClass(Notify, [{
      key: "initialize",
      value: function initialize() {
        this._stack = [];
        this.notifyPushes = new NotifyPushCollection();
        this.listenTo(Adapt, {
          'notify:popup': this._deprecated.bind(this, 'popup'),
          'notify:alert': this._deprecated.bind(this, 'alert'),
          'notify:prompt': this._deprecated.bind(this, 'prompt'),
          'notify:push': this._deprecated.bind(this, 'push')
        });
      }
    }, {
      key: "stack",
      get: function () {
        return this._stack;
      }
    }, {
      key: "_deprecated",
      value: function _deprecated(type, notifyObject) {
        Adapt.log.deprecated("NOTIFY DEPRECATED: Adapt.trigger('notify:".concat(type, "', notifyObject); is no longer supported, please use Adapt.notify.").concat(type, "(notifyObject);"));
        return this.create(notifyObject, {
          _type: type
        });
      }
    }, {
      key: "create",
      value: function create(notifyObject, defaults) {
        notifyObject = _.defaults({}, notifyObject, defaults, {
          _type: 'popup',
          _isCancellable: true,
          _showCloseButton: true,
          _closeOnShadowClick: true
        });

        if (notifyObject._type === 'push') {
          this.notifyPushes.push(notifyObject);
          return;
        }

        return new NotifyView({
          model: new NotifyModel(notifyObject)
        });
      }
    }, {
      key: "popup",
      value: function popup(notifyObject) {
        return this.create(notifyObject, {
          _type: 'popup'
        });
      }
    }, {
      key: "alert",
      value: function alert(notifyObject) {
        return this.create(notifyObject, {
          _type: 'alert'
        });
      }
    }, {
      key: "prompt",
      value: function prompt(notifyObject) {
        return this.create(notifyObject, {
          _type: 'prompt'
        });
      }
    }, {
      key: "push",
      value: function push(notifyObject) {
        return this.create(notifyObject, {
          _type: 'push'
        });
      }
    }]);

    return Notify;
  }(Backbone.Controller);

  __AMD("core/js/notify", Adapt.notify = new Notify());

  var RouterModel = __AMD("core/js/models/routerModel", function (_LockingModel) {
    _inherits(RouterModel, _LockingModel);

    var _super = _createSuper(RouterModel);

    function RouterModel() {
      _classCallCheck(this, RouterModel);

      return _super.apply(this, arguments);
    }

    _createClass(RouterModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _canNavigate: true,
          _shouldNavigateFocus: true
        };
      }
    }, {
      key: "lockedAttributes",
      value: function lockedAttributes() {
        return {
          _canNavigate: false,
          _shouldNavigateFocus: false
        };
      }
    }]);

    return RouterModel;
  }(LockingModel));

  var Router = function (_Backbone$Router) {
    _inherits(Router, _Backbone$Router);

    var _super = _createSuper(Router);

    function Router() {
      _classCallCheck(this, Router);

      return _super.apply(this, arguments);
    }

    _createClass(Router, [{
      key: "routes",
      value: function routes() {
        return {
          '': 'handleRoute',
          'id/:id': 'handleRoute',
          ':pluginName(/*location)(/*action)': 'handleRoute'
        };
      }
    }, {
      key: "initialize",
      value: function initialize(_ref) {
        var model = _ref.model;
        this._isBackward = false;
        this.model = model;
        this._navigationRoot = null;
        this._isCircularNavigationInProgress = false;
        this.showLoading();
        this.$wrapper = $('#wrapper');
        this.$html = $('html');
        this.listenToOnce(Adapt, 'app:dataReady', this.setDocumentTitle);
        this.listenTo(Adapt, 'router:navigateTo', this.navigateToArguments);
      }
    }, {
      key: "rootModel",
      get: function () {
        return this._navigationRoot || Adapt.course;
      },
      set: function (model) {
        this._navigationRoot = model;
      }
    }, {
      key: "showLoading",
      value: function showLoading() {
        $('.js-loading').show();
      }
    }, {
      key: "hideLoading",
      value: function hideLoading() {
        $('.js-loading').hide();
      }
    }, {
      key: "setDocumentTitle",
      value: function setDocumentTitle() {
        var currentModel = Adapt.location._currentModel;
        var hasSubTitle = currentModel && currentModel !== Adapt.router.rootModel && currentModel.get('title');
        var title = [this.rootModel.get('title'), hasSubTitle && currentModel.get('title')].filter(Boolean).join(' | ');
        this.listenToOnce(Adapt, 'contentObjectView:preRender', function () {
          var escapedTitle = $("<div>".concat(title, "</div>")).text();
          document.title = escapedTitle;
        });
      }
    }, {
      key: "navigateToArguments",
      value: function navigateToArguments(args) {
        args = args.filter(function (v) {
          return v !== null;
        });
        var options = {
          trigger: false,
          replace: false
        };

        if (args.length === 1 && Adapt.findById(args[0])) {
          this.navigate('#/id/' + args[0], options);
          return;
        }

        if (args.length <= 3) {
          this.navigate('#/' + args.join('/'), options);
          return;
        }

        Adapt.log.deprecated("Use Backbone.history.navigate or window.location.href instead of Adapt.trigger('router:navigateTo')");
        this.handleRoute.apply(this, _toConsumableArray(args));
      }
    }, {
      key: "handleRoute",
      value: function handleRoute() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        args = args.filter(function (v) {
          return v !== null;
        });
        console.log("--- Location --------------------------------");
        console.log(JSON.stringify(args));
        console.log("---------------------------------------------");

        if (this.model.get('_canNavigate')) {
          this._isCircularNavigationInProgress = false;
        }

        if (this._isCircularNavigationInProgress === false) {
          Adapt.trigger('router:navigate', args);
        }

        if (this.model.get('_canNavigate')) {
          this.model.set('_canNavigate', false, {
            pluginName: 'adapt'
          });
          this._isBackward = false;

          if (args.length <= 1) {
            return this.handleId.apply(this, _toConsumableArray(args));
          }

          return this.handlePluginRouter.apply(this, _toConsumableArray(args));
        }

        if (this._isCircularNavigationInProgress) {
          this._isCircularNavigationInProgress = false;
          return;
        }

        this._isCircularNavigationInProgress = true;
        Adapt.trigger('router:navigationCancelled', args);
        if (Adapt.isDebugEnabled()) return;
        Backbone.history.history[this._isBackward ? 'forward' : 'back']();
        this._isBackward = false;
      }
    }, {
      key: "handlePluginRouter",
      value: function () {
        var _handlePluginRouter = _asyncToGenerator(regeneratorRuntime.mark(function _callee(pluginName, location, action) {
          var pluginLocation;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  pluginLocation = [pluginName, location && "-".concat(location), action && "-".concat(action)].filter(Boolean).join('');
                  _context.next = 3;
                  return this.updateLocation(pluginLocation, null, null, null);

                case 3:
                  Adapt.trigger('router:plugin:' + pluginName, pluginName, location, action);
                  Adapt.trigger('router:plugin', pluginName, location, action);
                  this.model.set('_canNavigate', true, {
                    pluginName: 'adapt'
                  });

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function handlePluginRouter(_x, _x2, _x3) {
          return _handlePluginRouter.apply(this, arguments);
        }

        return handlePluginRouter;
      }()
    }, {
      key: "handleId",
      value: function () {
        var _handleId = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(id) {
          var _this = this;

          var rootModel, model, isContentObject, navigateToId, isRoot, startController, isCourse, type, location, ViewClass, isMenu;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  rootModel = Adapt.router.rootModel;
                  model = !id ? rootModel : Adapt.findById(id);

                  if (model) {
                    _context2.next = 5;
                    break;
                  }

                  this.model.set('_canNavigate', true, {
                    pluginName: 'adapt'
                  });
                  return _context2.abrupt("return");

                case 5:
                  isContentObject = model instanceof ContentObjectModel;
                  navigateToId = model.get('_id');
                  model = isContentObject ? model : model.findAncestor('contentobject');
                  id = model.get('_id');
                  isRoot = model === rootModel;

                  if (!(isRoot && Adapt.course.has('_start'))) {
                    _context2.next = 14;
                    break;
                  }

                  startController = Adapt.course.get('_start');

                  if (!(startController._isEnabled === true && startController._isMenuDisabled === true)) {
                    _context2.next = 14;
                    break;
                  }

                  return _context2.abrupt("return");

                case 14:
                  if (!(model.get('_isLocked') && Adapt.config.get('_forceRouteLocking'))) {
                    _context2.next = 20;
                    break;
                  }

                  Adapt.log.warn('Unable to navigate to locked id: ' + id);
                  this.model.set('_canNavigate', true, {
                    pluginName: 'adapt'
                  });

                  if (!(Adapt.location._previousId === undefined)) {
                    _context2.next = 19;
                    break;
                  }

                  return _context2.abrupt("return", this.navigate('#/', {
                    trigger: true,
                    replace: true
                  }));

                case 19:
                  return _context2.abrupt("return", this.navigateBack());

                case 20:
                  this.showLoading();
                  _context2.next = 23;
                  return Adapt.remove();

                case 23:
                  isCourse = model instanceof CourseModel$1;
                  type = isCourse ? 'menu' : model.get('_type');
                  location = isCourse ? 'course' : "".concat(type, "-").concat(id);
                  model.set('_isVisited', true);
                  _context2.next = 29;
                  return this.updateLocation(location, type, id, model);

                case 29:
                  Adapt.once('contentObjectView:ready', function () {
                    _this.model.set('_canNavigate', true, {
                      pluginName: 'adapt'
                    });

                    _this.handleNavigationFocus();
                  });
                  Adapt.trigger("router:".concat(type, " router:contentObject"), model);
                  ViewClass = Adapt.getViewClass(model);
                  isMenu = model instanceof MenuModel$1;

                  if (!(!ViewClass && isMenu)) {
                    _context2.next = 36;
                    break;
                  }

                  Adapt.log.deprecated("Using event based menu view instantiation for '".concat(Adapt.getViewName(model), "'"));
                  return _context2.abrupt("return");

                case 36:
                  if (isMenu) {
                    _context2.next = 40;
                    break;
                  }

                  _.invoke(model.getAllDescendantModels(), 'checkIfResetOnRevisit');

                  _context2.next = 40;
                  return Adapt.deferUntilCompletionChecked();

                case 40:
                  this.$wrapper.append(new ViewClass({
                    model: model
                  }).$el);

                  if (!(!isContentObject && !this.isScrolling)) {
                    _context2.next = 44;
                    break;
                  }

                  _context2.next = 44;
                  return Adapt.navigateToElement('.' + navigateToId, {
                    replace: true,
                    duration: 400
                  });

                case 44:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function handleId(_x4) {
          return _handleId.apply(this, arguments);
        }

        return handleId;
      }()
    }, {
      key: "updateLocation",
      value: function () {
        var _updateLocation = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(currentLocation, type, id, currentModel) {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  Adapt.location._previousModel = Adapt.location._currentModel;
                  Adapt.location._previousId = Adapt.location._currentId;
                  Adapt.location._previousContentType = Adapt.location._contentType;
                  Adapt.location._currentModel = currentModel;
                  Adapt.location._currentId = id;
                  Adapt.location._contentType = type;
                  Adapt.location._currentLocation = currentLocation;

                  if (type === 'menu') {
                    Adapt.location._lastVisitedType = 'menu';
                    Adapt.location._lastVisitedMenu = id;
                  } else if (type === 'page') {
                    Adapt.location._lastVisitedType = 'page';
                    Adapt.location._lastVisitedPage = id;
                  }

                  this.setDocumentTitle();
                  this.setGlobalClasses();
                  Adapt.trigger('router:location', Adapt.location);
                  _context3.next = 13;
                  return Adapt.wait.queue();

                case 13:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function updateLocation(_x5, _x6, _x7, _x8) {
          return _updateLocation.apply(this, arguments);
        }

        return updateLocation;
      }()
    }, {
      key: "setGlobalClasses",
      value: function setGlobalClasses() {
        var currentModel = Adapt.location._currentModel;
        var htmlClasses = (currentModel === null || currentModel === void 0 ? void 0 : currentModel.get('_htmlClasses')) || '';
        var classes = Adapt.location._currentId ? "location-".concat(Adapt.location._contentType, " location-id-").concat(Adapt.location._currentId) : "location-".concat(Adapt.location._currentLocation);
        var currentClasses = "".concat(classes, " ").concat(htmlClasses);
        this.$html.removeClass(Adapt.location._previousClasses).addClass(currentClasses).attr('data-location', Adapt.location._currentLocation);
        this.$wrapper.removeClass().addClass(classes).attr('data-location', Adapt.location._currentLocation);
        Adapt.location._previousClasses = currentClasses;
      }
    }, {
      key: "handleNavigationFocus",
      value: function handleNavigationFocus() {
        if (!this.model.get('_shouldNavigateFocus')) return;
        Adapt.a11y.focus('body');
      }
    }, {
      key: "navigateBack",
      value: function navigateBack() {
        this._isBackward = true;
        Backbone.history.history.back();
      }
    }, {
      key: "navigateToCurrentRoute",
      value: function navigateToCurrentRoute(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        if (!Adapt.location._currentId) {
          return;
        }

        var currentId = Adapt.location._currentModel.get('_id');

        var isRoot = Adapt.location._currentModel === this.rootModel;
        var route = isRoot ? '#/' : '#/id/' + currentId;
        this.navigate(route, {
          trigger: true,
          replace: true
        });
      }
    }, {
      key: "navigateToPreviousRoute",
      value: function navigateToPreviousRoute(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        var currentModel = Adapt.location._currentModel;
        var previousModel = Adapt.location._previousModel;

        if (!currentModel) {
          return this.navigateBack();
        }

        if (Adapt.location._currentModel instanceof MenuModel$1) {
          return this.navigateToParent();
        }

        if (previousModel) {
          return this.navigateBack();
        }

        this.navigateToParent();
      }
    }, {
      key: "navigateToParent",
      value: function navigateToParent(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        var parentId = Adapt.location._currentModel.get('_parentId');

        var parentModel = Adapt.findById(parentId);
        var isRoot = parentModel === this.rootModel;
        var route = isRoot ? '#/' : '#/id/' + parentId;
        this.navigate(route, {
          trigger: true
        });
      }
    }, {
      key: "navigateToHomeRoute",
      value: function navigateToHomeRoute(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        this.navigate('#/', {
          trigger: true
        });
      }
    }, {
      key: "navigateToElement",
      value: function () {
        var _navigateToElement = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(selector) {
          var _this2 = this;

          var settings,
              currentModelId,
              currentModel,
              shouldReplace,
              contentObject,
              contentObjectId,
              isNotInCurrentContentObject,
              location,
              disableScrollToAnimation,
              offsetTop,
              _args4 = arguments;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  settings = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                  currentModelId = selector.replace(/\./g, '').split(' ')[0];
                  currentModel = Adapt.findById(currentModelId);

                  if (!(currentModel && (!currentModel.get('_isRendered') || !currentModel.get('_isReady')))) {
                    _context4.next = 17;
                    break;
                  }

                  shouldReplace = settings.replace || false;
                  contentObject = currentModel instanceof ContentObjectModel ? currentModel : currentModel.findAncestor('contentobject');
                  contentObjectId = contentObject.get('_id');
                  isNotInCurrentContentObject = contentObjectId !== Adapt.location._currentId;

                  if (!isNotInCurrentContentObject) {
                    _context4.next = 15;
                    break;
                  }

                  this.isScrolling = true;
                  this.navigate("#/id/".concat(currentModelId), {
                    trigger: true,
                    replace: shouldReplace
                  });
                  this.model.set('_shouldNavigateFocus', false, {
                    pluginName: 'adapt'
                  });
                  _context4.next = 14;
                  return new Promise(function (resolve) {
                    return Adapt.once('contentObjectView:ready', _.debounce(function () {
                      _this2.model.set('_shouldNavigateFocus', true, {
                        pluginName: 'adapt'
                      });

                      resolve();
                    }, 1));
                  });

                case 14:
                  this.isScrolling = false;

                case 15:
                  _context4.next = 17;
                  return Adapt.parentView.renderTo(currentModelId);

                case 17:
                  if (currentModel && selector === currentModel.get('_id')) {
                    selector = ".".concat(selector);
                  }

                  location = Adapt.location._contentType ? Adapt.location._contentType : Adapt.location._currentLocation;
                  Adapt.trigger("".concat(location, ":scrollTo"), selector);
                  disableScrollToAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;

                  if (disableScrollToAnimation) {
                    settings.duration = 0;
                  } else if (!settings.duration) {
                    settings.duration = $.scrollTo.defaults.duration;
                  }

                  offsetTop = 0;

                  if (Adapt.scrolling.isLegacyScrolling) {
                    offsetTop = -$('.nav').outerHeight();

                    if ($(selector).hasClass('component')) {
                      offsetTop -= $(selector).find('.aria-label').height() || 0;
                    }
                  }

                  if (!settings.offset) settings.offset = {
                    top: offsetTop,
                    left: 0
                  };
                  if (settings.offset.top === undefined) settings.offset.top = offsetTop;
                  if (settings.offset.left === undefined) settings.offset.left = 0;
                  if (settings.offset.left === 0) settings.axis = 'y';

                  if (Adapt.get('_canScroll') !== false) {
                    $.scrollTo(selector, settings);
                  }

                  _context4.next = 31;
                  return new Promise(function (resolve) {
                    _.delay(function () {
                      Adapt.a11y.focusNext(selector);
                      Adapt.trigger("".concat(location, ":scrolledTo"), selector);
                      resolve();
                    }, settings.duration + 300);
                  });

                case 31:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function navigateToElement(_x9) {
          return _navigateToElement.apply(this, arguments);
        }

        return navigateToElement;
      }()
    }, {
      key: "get",
      value: function get() {
        var _this$model;

        Adapt.log.deprecated('Adapt.router.get, please use Adapt.router.model.get');
        return (_this$model = this.model).get.apply(_this$model, arguments);
      }
    }, {
      key: "set",
      value: function set() {
        var _this$model2;

        Adapt.log.deprecated('Adapt.router.set, please use Adapt.router.model.set');
        return (_this$model2 = this.model).set.apply(_this$model2, arguments);
      }
    }]);

    return Router;
  }(Backbone.Router);

  Adapt.router = new Router({
    model: new RouterModel(null, {
      reset: true
    })
  });
  Adapt.navigateToElement = Adapt.router.navigateToElement.bind(Adapt.router);
  __AMD("core/js/router", Adapt.router);

  var AdaptSubsetCollection = __AMD("core/js/collections/adaptSubsetCollection", function (_AdaptCollection) {
    _inherits(AdaptSubsetCollection, _AdaptCollection);

    var _super = _createSuper(AdaptSubsetCollection);

    function AdaptSubsetCollection() {
      _classCallCheck(this, AdaptSubsetCollection);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptSubsetCollection, [{
      key: "initialize",
      value: function initialize(models, options) {
        _get(_getPrototypeOf(AdaptSubsetCollection.prototype), "initialize", this).call(this, models, options);

        this.parent = options.parent;
        this.listenTo(this.parent, 'reset', this.loadSubset);
      }
    }, {
      key: "loadSubset",
      value: function loadSubset() {
        var _this = this;

        this.set(this.parent.filter(function (model) {
          return model instanceof _this.model;
        }));
        this._byAdaptID = this.groupBy('_id');
      }
    }]);

    return AdaptSubsetCollection;
  }(AdaptCollection));

  var ArticleModel = function (_AdaptModel) {
    _inherits(ArticleModel, _AdaptModel);

    var _super = _createSuper(ArticleModel);

    function ArticleModel() {
      _classCallCheck(this, ArticleModel);

      return _super.apply(this, arguments);
    }

    _createClass(ArticleModel, [{
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('articleModel._parent, use articleModel.getParent() instead, parent models are defined by the JSON');
        return 'contentObjects';
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('articleModel._siblings, use articleModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'articles';
      }
    }, {
      key: "_children",
      get: function () {
        Adapt.log.deprecated('articleModel._children, use articleModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'blocks';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'article';
      }
    }]);

    return ArticleModel;
  }(AdaptModel);

  Adapt.register('article', {
    model: ArticleModel
  });
  var ArticleModel$1 = __AMD("core/js/models/articleModel", ArticleModel);

  var BlockModel = function (_AdaptModel) {
    _inherits(BlockModel, _AdaptModel);

    var _super = _createSuper(BlockModel);

    function BlockModel() {
      _classCallCheck(this, BlockModel);

      return _super.apply(this, arguments);
    }

    _createClass(BlockModel, [{
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('blockModel._parent, use blockModel.getParent() instead, parent models are defined by the JSON');
        return 'articles';
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('blockModel._siblings, use blockModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'blocks';
      }
    }, {
      key: "_children",
      get: function () {
        Adapt.log.deprecated('blockModel._children, use blockModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'components';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'block';
      }
    }]);

    return BlockModel;
  }(AdaptModel);

  Adapt.register('block', {
    model: BlockModel
  });
  var BlockModel$1 = __AMD("core/js/models/blockModel", BlockModel);

  var ComponentModel = function (_AdaptModel) {
    _inherits(ComponentModel, _AdaptModel);

    var _super = _createSuper(ComponentModel);

    function ComponentModel() {
      _classCallCheck(this, ComponentModel);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentModel, [{
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('componentModel._parent, use componentModel.getParent() instead, parent models are defined by the JSON');
        return 'blocks';
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('componentModel._siblings, use componentModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'components';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'component';
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return AdaptModel.resultExtend('defaults', {
          _isA11yComponentDescriptionEnabled: true,
          _userAnswer: null,
          _attemptStates: null
        });
      }
    }, {
      key: "trackable",
      value: function trackable() {
        return AdaptModel.resultExtend('trackable', ['_userAnswer', '_attemptStates']);
      }
    }, {
      key: "trackableType",
      value: function trackableType() {
        return AdaptModel.resultExtend('trackableType', [Array, Array]);
      }
    }, {
      key: "hasManagedChildren",
      get: function () {
        return false;
      }
    }, {
      key: "init",
      value: function init() {
        if (Adapt.get('_isStarted')) {
          this.onAdaptInitialize();
          return;
        }

        this.listenToOnce(Adapt, 'adapt:initialize', this.onAdaptInitialize);
      }
    }, {
      key: "onAdaptInitialize",
      value: function onAdaptInitialize() {
        this.restoreUserAnswers();
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {}
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {}
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set('_userAnswer', null);
      }
    }, {
      key: "reset",
      value: function reset(type, force) {
        if (!this.get('_canReset') && !force) return;
        this.resetUserAnswer();

        _get(_getPrototypeOf(ComponentModel.prototype), "reset", this).call(this, type, force);
      }
    }, {
      key: "getAttemptState",
      value: function getAttemptState() {
        var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.toJSON();
        var trackables = this.trackable();
        var types = this.trackableType();
        trackables.find(function (name, index) {
          if (name !== '_attemptStates') return;
          trackables.splice(index, 1);
          types.splice(index, 1);
          return true;
        });
        var values = trackables.map(function (n) {
          return object[n];
        });
        var booleans = values.filter(function (v, i) {
          return types[i] === Boolean;
        }).map(Boolean);
        var numbers = values.filter(function (v, i) {
          return types[i] === Number;
        }).map(function (v) {
          return Number(v) || 0;
        });
        var arrays = values.filter(function (v, i) {
          return types[i] === Array;
        });
        return [numbers, booleans, arrays];
      }
    }, {
      key: "getAttemptObject",
      value: function getAttemptObject() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getAttemptState();
        var trackables = this.trackable();
        var types = this.trackableType();
        trackables.find(function (name, index) {
          if (name !== '_attemptStates') return;
          trackables.splice(index, 1);
          types.splice(index, 1);
          return true;
        });
        var numbers = (state[0] || []).slice(0);
        var booleans = (state[1] || []).slice(0);
        var arrays = (state[2] || []).slice(0);
        var object = {};
        trackables.forEach(function (n, i) {
          if (n === '_id') return;

          switch (types[i]) {
            case Number:
              object[n] = numbers.shift();
              break;

            case Boolean:
              object[n] = booleans.shift();
              break;

            case Array:
              object[n] = arrays.shift();
              break;
          }
        });
        return object;
      }
    }, {
      key: "setAttemptObject",
      value: function setAttemptObject(object) {
        var silent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.set(object, {
          silent: silent
        });
      }
    }, {
      key: "addAttemptObject",
      value: function addAttemptObject() {
        var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getAttemptObject();
        var attemptStates = this.get('_attemptStates') || [];
        var state = this.getAttemptState(object);
        attemptStates.push(state);
        this.set('_attemptStates', attemptStates);
      }
    }, {
      key: "getAttemptObjects",
      value: function getAttemptObjects() {
        var _this = this;

        var states = this.get('_attemptStates') || [];
        return states.map(function (state) {
          return _this.getAttemptObject(state);
        });
      }
    }]);

    return ComponentModel;
  }(AdaptModel);

  Adapt.register('component', {
    model: ComponentModel
  });
  var ComponentModel$1 = __AMD("core/js/models/componentModel", ComponentModel);

  var PageModel = function (_ContentObjectModel) {
    _inherits(PageModel, _ContentObjectModel);

    var _super = _createSuper(PageModel);

    function PageModel() {
      _classCallCheck(this, PageModel);

      return _super.apply(this, arguments);
    }

    _createClass(PageModel, [{
      key: "_children",
      get: function () {
        Adapt.log.deprecated('pageModel._children, use menuModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'articles';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'page';
      }
    }]);

    return PageModel;
  }(ContentObjectModel);

  Adapt.register('page', {
    model: PageModel
  });
  __AMD("core/js/models/pageModel", PageModel);

  var ContentObjectView = __AMD("core/js/views/contentObjectView", function (_AdaptView) {
    _inherits(ContentObjectView, _AdaptView);

    var _super = _createSuper(ContentObjectView);

    function ContentObjectView() {
      _classCallCheck(this, ContentObjectView);

      return _super.apply(this, arguments);
    }

    _createClass(ContentObjectView, [{
      key: "attributes",
      value: function attributes() {
        return AdaptView$1.resultExtend('attributes', {
          'role': 'main',
          'aria-labelledby': "".concat(this.model.get('_id'), "-heading")
        }, this);
      }
    }, {
      key: "className",
      value: function className() {
        return [this.constructor.type, 'contentobject', this.constructor.className, this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].filter(Boolean).join(' ');
      }
    }, {
      key: "preRender",
      value: function preRender() {
        $.inview.lock(this.constructor.type + 'View');
        this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
        this.$el.css('opacity', 0);
        this.listenTo(this.model, 'change:_isReady', this.isReady);
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var type = this.constructor.type;
        Adapt.trigger("".concat(type, "View:preRender contentObjectView:preRender view:preRender"), this);

        if (this.isReact) {
          this.changed();
        } else {
          var data = this.model.toJSON();
          data.view = this;
          var template = Handlebars.templates[this.constructor.template];
          this.$el.html(template(data));
        }

        Adapt.trigger("".concat(type, "View:render contentObjectView:render view:render"), this);

        _.defer(function () {
          if (_this._isRemoved) return;

          _this.postRender();

          Adapt.trigger("".concat(type, "View:postRender contentObjectView:postRender view:postRender"), _this);
        });

        return this;
      }
    }, {
      key: "isReady",
      value: function () {
        var _isReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var _this2 = this;

          var type, performIsReady;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(!this.model.get('_isReady') || this._isTriggeredReady)) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt("return");

                case 2:
                  this._isTriggeredReady = true;
                  type = this.constructor.type;

                  performIsReady = function () {
                    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
                      var styleOptions;
                      return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              Adapt.trigger("".concat(type, "View:preReady contentObjectView:preReady view:preReady"), _this2);
                              _context.next = 3;
                              return Adapt.wait.queue();

                            case 3:
                              $('.js-loading').hide();

                              if (Adapt.get('_shouldContentObjectScrollTop') !== false) {
                                $(window).scrollTop(0);
                              }

                              Adapt.trigger("".concat(type, "View:ready contentObjectView:ready view:ready"), _this2);
                              $.inview.unlock("".concat(type, "View"));
                              styleOptions = {
                                opacity: 1
                              };

                              if (_this2.disableAnimation) {
                                _this2.$el.css(styleOptions);

                                $.inview();

                                _.defer(function () {
                                  Adapt.trigger("".concat(type, "View:postReady contentObjectView:postReady view:postReady"), _this2);
                                });
                              } else {
                                _this2.$el.velocity(styleOptions, {
                                  duration: 'fast',
                                  complete: function () {
                                    $.inview();
                                    Adapt.trigger("".concat(type, "View:postReady contentObjectView:postReady view:postReady"), _this2);
                                  }
                                });
                              }

                              $(window).scroll();

                            case 10:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                    return function performIsReady() {
                      return _ref.apply(this, arguments);
                    };
                  }();

                  _.defer(performIsReady);

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function isReady() {
          return _isReady.apply(this, arguments);
        }

        return isReady;
      }()
    }, {
      key: "renderTo",
      value: function () {
        var _renderTo = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(id) {
          var isRenderToSelf, models, index, model, ids, forceUntilId;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  isRenderToSelf = id === this.model.get('_id');

                  if (!isRenderToSelf) {
                    _context3.next = 3;
                    break;
                  }

                  return _context3.abrupt("return");

                case 3:
                  models = this.model.getAllDescendantModels(true).filter(function (model) {
                    return model.get('_isAvailable');
                  });
                  index = models.findIndex(function (model) {
                    return model.get('_id') === id;
                  });

                  if (!(index === -1)) {
                    _context3.next = 7;
                    break;
                  }

                  throw new Error("Cannot renderTo \"".concat(id, "\" as it isn't a descendant."));

                case 7:
                  model = models[index];

                  if (!(model.get('_isRendered') && model.get('_isReady'))) {
                    _context3.next = 10;
                    break;
                  }

                  return _context3.abrupt("return");

                case 10:
                  models = models.slice(0, index + 1);
                  ids = _.indexBy(models, function (model) {
                    return model.get('_id');
                  });

                  forceUntilId = function (event) {
                    var addingId = event.model.get('_id');
                    if (!ids[addingId]) return;
                    event.force();
                    if (addingId !== id) return;
                    Adapt.off('view:addChild', forceUntilId);
                  };

                  Adapt.on('view:addChild', forceUntilId);
                  _context3.next = 16;
                  return this.addChildren();

                case 16:
                  _context3.next = 18;
                  return this.whenReady();

                case 18:
                  if (!(!model.get('_isRendered') || !model.get('_isReady'))) {
                    _context3.next = 20;
                    break;
                  }

                  throw new Error("Cannot renderTo \"".concat(id, "\"."));

                case 20:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function renderTo(_x) {
          return _renderTo.apply(this, arguments);
        }

        return renderTo;
      }()
    }, {
      key: "preRemove",
      value: function preRemove() {
        var type = this.constructor.type;
        Adapt.trigger("".concat(type, "View:preRemove contentObjectView:preRemove view:preRemove"), this);
      }
    }, {
      key: "remove",
      value: function remove() {
        var _this3 = this;

        var type = this.constructor.type;
        this.preRemove();
        Adapt.trigger("".concat(type, "View:remove contentObjectView:remove view:remove"), this);
        this._isRemoved = true;
        Adapt.wait.for(function (end) {
          if (_this3.isReact) {
            ReactDOM.unmountComponentAtNode(_this3.el);
          }

          _this3.$el.off('onscreen.adaptView');

          _this3.findDescendantViews().reverse().forEach(function (view) {
            view.remove();
          });

          _this3.setChildViews(null);

          _get(_getPrototypeOf(ContentObjectView.prototype), "remove", _this3).call(_this3);

          _.defer(function () {
            Adapt.trigger("".concat(type, "View:postRemove contentObjectView:postRemove view:postRemove"), _this3);

            _this3.trigger('postRemove');
          });

          end();
        });
        return this;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.remove();

        if (Adapt.parentView === this) {
          Adapt.parentView = null;
        }
      }
    }]);

    return ContentObjectView;
  }(AdaptView$1));

  var PageView$2 = function (_ContentObjectView) {
    _inherits(PageView, _ContentObjectView);

    var _super = _createSuper(PageView);

    function PageView() {
      _classCallCheck(this, PageView);

      return _super.apply(this, arguments);
    }

    _createClass(PageView, [{
      key: "remove",
      value: function remove() {
        if (this.$pageLabel) {
          this.$pageLabel.remove();
        }

        _get(_getPrototypeOf(PageView.prototype), "remove", this).call(this);
      }
    }]);

    return PageView;
  }(ContentObjectView);

  Object.assign(PageView$2, {
    childContainer: '.article__container',
    type: 'page',
    template: 'page'
  });
  Adapt.register('page', {
    view: PageView$2
  });
  __AMD("core/js/views/pageView", PageView$2);

  var ArticleView = function (_AdaptView) {
    _inherits(ArticleView, _AdaptView);

    var _super = _createSuper(ArticleView);

    function ArticleView() {
      _classCallCheck(this, ArticleView);

      return _super.apply(this, arguments);
    }

    _createClass(ArticleView, [{
      key: "className",
      value: function className() {
        return ['article', this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }]);

    return ArticleView;
  }(AdaptView$1);

  Object.assign(ArticleView, {
    childContainer: '.block__container',
    type: 'article',
    template: 'article'
  });
  Adapt.register('article', {
    view: ArticleView
  });
  var ArticleView$1 = __AMD("core/js/views/articleView", ArticleView);

  var BlockView = function (_AdaptView) {
    _inherits(BlockView, _AdaptView);

    var _super = _createSuper(BlockView);

    function BlockView() {
      _classCallCheck(this, BlockView);

      return _super.apply(this, arguments);
    }

    _createClass(BlockView, [{
      key: "className",
      value: function className() {
        return ['block', this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }]);

    return BlockView;
  }(AdaptView$1);

  Object.assign(BlockView, {
    childContainer: '.component__container',
    type: 'block',
    template: 'block'
  });
  Adapt.register('block', {
    view: BlockView
  });
  __AMD("core/js/views/blockView", BlockView);

  var MPABC = function (_Backbone$Controller) {
    _inherits(MPABC, _Backbone$Controller);

    var _super = _createSuper(MPABC);

    function MPABC() {
      _classCallCheck(this, MPABC);

      return _super.apply(this, arguments);
    }

    _createClass(MPABC, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Data$1, {
          loading: this.waitForDataLoaded,
          loaded: this.onDataLoaded
        });
        this.setupSubsetCollections();
      }
    }, {
      key: "waitForDataLoaded",
      value: function waitForDataLoaded() {
        Adapt.wait.begin();
      }
    }, {
      key: "onDataLoaded",
      value: function onDataLoaded() {
        Adapt.wait.end();
      }
    }, {
      key: "setupSubsetCollections",
      value: function setupSubsetCollections() {
        Adapt.contentObjects = new AdaptSubsetCollection(null, {
          parent: Data$1,
          model: ContentObjectModel
        });
        Adapt.articles = new AdaptSubsetCollection(null, {
          parent: Data$1,
          model: ArticleModel$1
        });
        Adapt.blocks = new AdaptSubsetCollection(null, {
          parent: Data$1,
          model: BlockModel$1
        });
        Adapt.components = new AdaptSubsetCollection(null, {
          parent: Data$1,
          model: ComponentModel$1
        });
      }
    }]);

    return MPABC;
  }(Backbone.Controller);

  __AMD("core/js/mpabc", Adapt.mpabc = new MPABC());

  var defaultAriaLevels = {
    '_menu': 1,
    '_menuGroup': 2,
    '_menuItem': 2,
    '_page': 1,
    '_article': 2,
    '_block': 3,
    '_component': 4,
    '_componentItem': 5,
    '_notify': 1
  };
  var helpers$8 = {
    lowercase: function (text) {
      return text.toLowerCase();
    },
    capitalise: function (text) {
      return text.charAt(0).toUpperCase() + text.slice(1);
    },
    inc: function (index) {
      return index + 1;
    },
    dec: function (index) {
      return index - 1;
    },
    odd: function (index) {
      return (index + 1) % 2 === 0 ? 'even' : 'odd';
    },
    equals: function (value, text, block) {
      return helpers$8.compare.call(this, value, '==', text, block);
    },
    compare: function (value, operator, text, block) {
      switch (operator) {
        case '===':
          if (value === text) return block.fn(this);
          break;

        case '=':
        case '==':
          if (value == text) return block.fn(this);
          break;

        case '>=':
          if (value >= text) return block.fn(this);
          break;

        case '<=':
          if (value <= text) return block.fn(this);
          break;

        case '>':
          if (value > text) return block.fn(this);
          break;

        case '<':
          if (value < text) return block.fn(this);
          break;
      }

      return block.inverse(this);
    },
    math: function (lvalue, operator, rvalue, options) {
      lvalue = parseFloat(lvalue);
      rvalue = parseFloat(rvalue);

      switch (operator) {
        case '+':
          return lvalue + rvalue;

        case '-':
          return lvalue - rvalue;

        case '*':
          return lvalue * rvalue;

        case '/':
          return lvalue / rvalue;

        case '%':
          return lvalue % rvalue;
      }
    },
    any: function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var specified = args.slice(0, -1);
      var block = args.slice(-1)[0];
      return specified.some(Boolean) ? block.fn ? block.fn(this) : true : block.inverse ? block.inverse(this) : false;
    },
    all: function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var specified = args.slice(0, -1);
      var block = args.slice(-1)[0];
      return specified.every(Boolean) ? block.fn ? block.fn(this) : true : block.inverse ? block.inverse(this) : false;
    },
    none: function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var specified = args.slice(0, -1);
      var block = args.slice(-1)[0];
      return !specified.some(Boolean) ? block.fn ? block.fn(this) : true : block.inverse ? block.inverse(this) : false;
    },
    compile: function (template, context) {
      if (!template) {
        return '';
      }

      if (template instanceof Object) template = template.toString();
      var data = this;

      if (context) {
        var _context$data$root, _context$data;

        data = (_context$data$root = (_context$data = context.data) === null || _context$data === void 0 ? void 0 : _context$data.root) !== null && _context$data$root !== void 0 ? _context$data$root : context;
      }

      return Handlebars.compile(template)(data);
    },
    compile_a11y_text: function (template, context) {
      Adapt.a11y.log.deprecated('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return helpers$8.compile.call(this, template, context);
    },
    compile_a11y_normalize: function (template, context) {
      if (!template) {
        return '';
      }

      if (template instanceof Object) template = template.toString();
      return Handlebars.helpers.a11y_normalize.call(this, helpers$8.compile.call(this, template, context));
    },
    compile_a11y_remove_breaks: function (template, context) {
      if (!template) {
        return '';
      }

      return Handlebars.helpers.a11y_remove_breaks.call(this, helpers$8.compile.call(this, template, context));
    },
    import_globals: function (context) {
      if (context.data.root._globals) {
        return '';
      }

      context.data.root._globals = Adapt.course.get('_globals');
      return '';
    },
    import_adapt: function (context) {
      if (context.data.root.Adapt) {
        return;
      }

      var adapt = context.data.root.Adapt = {};
      var i, l, name;
      var directImport = ['config', 'course'];

      for (i = 0, l = directImport.length; i < l; i++) {
        name = directImport[i];
        adapt[name] = Adapt[name].toJSON();
      }

      var indexedImport = ['contentObjects', 'articles', 'blocks', 'components'];

      for (i = 0, l = indexedImport.length; i < l; i++) {
        name = indexedImport[i];
        var importArray = Adapt[name].toJSON();
        var importIndex = {};

        for (var i1 = 0, l1 = importArray.length; i1 < l1; i1++) {
          var item = importArray[i1];
          importIndex[item._id] = item;
        }

        adapt[name] = importIndex;
      }

      return '';
    },
    component_description: function (override, context) {
      var _this$_globals$_compo;

      if (!this._isA11yComponentDescriptionEnabled) {
        return;
      }

      var isNotDefined = !((_this$_globals$_compo = this._globals._components) !== null && _this$_globals$_compo !== void 0 && _this$_globals$_compo['_' + this._component]);

      if (isNotDefined) {
        return;
      }

      var hasOverride = arguments.length > 1;
      var description;

      if (hasOverride) {
        description = override;
        description = helpers$8.compile(description, context);
      } else {
        description = this._globals._components['_' + this._component].ariaRegion;
        description = helpers$8.compile(description, override);
      }

      if (!description) {
        return;
      }

      return new Handlebars.SafeString('<div class="aria-label">' + description + '</div>');
    },
    a11y_text: function (text) {
      Adapt.a11y.log.deprecated('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return text;
    },
    a11y_normalize: function (htmls) {
      return Adapt.a11y.normalize.apply(Adapt.a11y, arguments);
    },
    a11y_remove_breaks: function (htmls) {
      return Adapt.a11y.removeBreaks.apply(Adapt.a11y, arguments);
    },
    a11y_aria_label: function (htmls) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label">' + values.join(' ') + '</div>');
    },
    a11y_aria_label_relative: function (htmls) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label relative">' + values.join(' ') + '</div>');
    },
    a11y_aria_image: function (texts) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label" role="img" aria-label="' + values.join(' ') + '"></div>');
    },
    a11y_wrap_focus: function () {
      var cfg = Adapt.config.get('_accessibility');
      if (cfg._isPopupWrapFocusEnabled === false) return '';
      return new Handlebars.SafeString('<a class="a11y-focusguard a11y-ignore a11y-ignore-focus" role="presentation">&nbsp;</a>');
    },
    a11y_attrs_heading: function (levelOrType) {
      var cfg = Adapt.config.get('_accessibility');
      var level = 1;

      if (this._ariaLevel) {
        levelOrType = this._ariaLevel;
      }

      if (isNaN(levelOrType) === false) {
        level = levelOrType;
      } else if (_.isString(levelOrType)) {
        var _cfg$_ariaLevels;

        cfg._ariaLevels = cfg._ariaLevels || defaultAriaLevels;

        if (((_cfg$_ariaLevels = cfg._ariaLevels) === null || _cfg$_ariaLevels === void 0 ? void 0 : _cfg$_ariaLevels['_' + levelOrType]) !== undefined) {
          level = cfg._ariaLevels['_' + levelOrType];
        }
      }

      return new Handlebars.SafeString(' role="heading" aria-level="' + level + '" ');
    },
    a11y_attrs_tabbable: function () {
      Adapt.a11y.log.deprecated('a11y_attrs_tabbable should not be used. tabbable elements should be natively tabbable.');
      return new Handlebars.SafeString(' role="region" tabindex="0" ');
    },
    a11y_alt_text: function (visible, alternatives) {
      var values = Array.prototype.slice.call(arguments, 1, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<span aria-hidden="true">' + visible + '</span><span class="aria-label">' + values.join(' ') + '</span>');
    }
  };
  Object.assign(helpers$8, {
    if_value_equals: function () {
      Adapt.a11y.log.deprecated('if_value_equals, use equals instead.');
      return helpers$8.equals.apply(this, arguments);
    },
    numbers: function () {
      Adapt.a11y.log.deprecated('numbers, use inc instead.');
      return helpers$8.inc.apply(this, arguments);
    },
    lowerCase: function () {
      Adapt.a11y.log.deprecated('lowerCase, use lowercase instead.');
      return helpers$8.lowercase.apply(this, arguments);
    }
  });

  for (var name$8 in helpers$8) {
    if (!helpers$8.hasOwnProperty(name$8)) continue;
    Handlebars.registerHelper(name$8, helpers$8[name$8]);
  }

  __AMD("core/js/helpers", helpers$8);

  var Scrolling = function (_Backbone$Controller) {
    _inherits(Scrolling, _Backbone$Controller);

    var _super = _createSuper(Scrolling);

    function Scrolling() {
      _classCallCheck(this, Scrolling);

      return _super.apply(this, arguments);
    }

    _createClass(Scrolling, [{
      key: "initialize",
      value: function initialize() {
        this.$html = null;
        this.$app = null;
        this.isLegacyScrolling = true;

        this._checkApp();

        Adapt.once('configModel:dataLoaded', this._loadConfig.bind(this));
      }
    }, {
      key: "_checkApp",
      value: function _checkApp() {
        this.$html = $('html');
        this.$app = $('#app');
        if (this.$app.length) return;
        this.$app = $('<div id="app">');
        $('body').append(this.$app);
        this.$app.append($('#wrapper'));
        Adapt.log.warn('UPDATE - Your html file needs to have #app adding. See https://github.com/adaptlearning/adapt_framework/issues/2168');
      }
    }, {
      key: "_loadConfig",
      value: function _loadConfig() {
        var config = Adapt.config.get('_scrollingContainer');
        if (!(config !== null && config !== void 0 && config._isEnabled)) return;
        var limitTo = config._limitToSelector;
        var isIncluded = !limitTo || this.$html.is(limitTo) || this.$html.hasClass(limitTo);
        if (!isIncluded) return;
        this.isLegacyScrolling = false;

        this._addStyling();

        this._fixJQuery();

        this._fixScrollTo();

        this._fixBrowser();
      }
    }, {
      key: "_addStyling",
      value: function _addStyling() {
        this.$html.addClass('adapt-scrolling');
      }
    }, {
      key: "_fixJQuery",
      value: function _fixJQuery() {
        var selectorScrollTop = $.fn.scrollTop;
        var $app = Adapt.scrolling.$app;

        $.fn.scrollTop = function () {
          if (this[0] === window || this[0] === document.body) {
            return selectorScrollTop.apply($app, arguments);
          }

          return selectorScrollTop.apply(this, arguments);
        };

        var selectorOffset = $.fn.offset;

        $.fn.offset = function (coordinates) {
          if (coordinates) {
            return selectorOffset.apply(this, arguments);
          }

          var $app = Adapt.scrolling.$app;
          var $element = this;
          var elementOffset = selectorOffset.call($element);
          var isCorrectedContainer = $element.is('html, body, #app') || $element.parents().is('#app');

          if (!isCorrectedContainer) {
            return elementOffset;
          }

          var scrollTop = parseInt($app.scrollTop());
          var scrollLeft = parseInt($app.scrollLeft());
          var appOffset = selectorOffset.call($app);
          elementOffset.top += scrollTop - appOffset.top;
          elementOffset.left += scrollLeft - appOffset.left;
          return elementOffset;
        };
      }
    }, {
      key: "_fixScrollTo",
      value: function _fixScrollTo() {
        var selectorScrollTo = $.fn.scrollTo;
        var scrollTo = $.scrollTo;
        var $app = Adapt.scrolling.$app;

        $.fn.scrollTo = function (target, duration, settings) {
          if (this[0] === window || this[0] === document.body) {
            return selectorScrollTo.apply($app, arguments);
          }

          return selectorScrollTo.apply(this, arguments);
        };

        $.scrollTo = function (target, duration, settings) {
          return selectorScrollTo.apply($app, arguments);
        };

        Object.assign($.scrollTo, scrollTo);
      }
    }, {
      key: "_fixBrowser",
      value: function _fixBrowser() {
        var app = Adapt.scrolling.$app[0];

        window.scrollTo = function (x, y) {
          app.scrollTop = y || 0;
          app.scrollLeft = x || 0;
        };

        var $window = $(window);
        this.$app.on('scroll', function () {
          $window.scroll();
        });
      }
    }, {
      key: "scrollTo",
      value: function () {
        var _scrollTo = _asyncToGenerator(regeneratorRuntime.mark(function _callee(selector) {
          var settings,
              _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  settings = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                  Adapt.log.deprecated('Adapt.scrollTo and Adapt.scrolling.scrollTo, use Adapt.navigateToElement instead.');
                  return _context.abrupt("return", Adapt.router.navigateToElement(selector, settings));

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function scrollTo(_x) {
          return _scrollTo.apply(this, arguments);
        }

        return scrollTo;
      }()
    }]);

    return Scrolling;
  }(Backbone.Controller);

  Adapt.scrolling = new Scrolling();
  Adapt.scrollTo = Adapt.scrolling.scrollTo.bind(Adapt.scrolling);
  __AMD("core/js/scrolling", Adapt.scrolling);

  var HeadingView = function (_Backbone$View) {
    _inherits(HeadingView, _Backbone$View);

    var _super = _createSuper(HeadingView);

    function HeadingView() {
      _classCallCheck(this, HeadingView);

      return _super.apply(this, arguments);
    }

    _createClass(HeadingView, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt.parentView, 'postRemove', this.remove);
        this.listenTo(this.model, 'change:_isComplete', this.updateAria);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates[this.constructor.template];
        var data = this.model.toJSON();
        var customHeadingType = this.$el.attr('data-a11y-heading-type');
        if (customHeadingType) data._type = customHeadingType;
        this.$el.html(template(data));
        this.checkCompletion();
      }
    }, {
      key: "updateAria",
      value: function updateAria() {
        var template = Handlebars.templates[this.constructor.template];
        var data = this.model.toJSON();
        var $rendered = $("<div>".concat(template(data), "</div>"));
        this.$('.aria-label').html($rendered.find('.aria-label').html());
        this.checkCompletion();
      }
    }, {
      key: "checkCompletion",
      value: function checkCompletion() {
        var isComplete = this.model.get('_isComplete');
        this.$el.toggleClass('is-complete', isComplete).toggleClass('is-incomplete', !isComplete);
      }
    }]);

    return HeadingView;
  }(Backbone.View);

  HeadingView.template = 'heading';
  var HeadingView$1 = __AMD("core/js/views/headingView", HeadingView);

  var Headings = function (_Backbone$Controller) {
    _inherits(Headings, _Backbone$Controller);

    var _super = _createSuper(Headings);

    function Headings() {
      _classCallCheck(this, Headings);

      return _super.apply(this, arguments);
    }

    _createClass(Headings, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'view:render', this.onViewRender);
      }
    }, {
      key: "onViewRender",
      value: function onViewRender(view) {
        var $headingSeats = view.$('.js-heading');
        $headingSeats.each(function (index, el) {
          return new HeadingView$1({
            el: el,
            model: view.model
          });
        });
      }
    }]);

    return Headings;
  }(Backbone.Controller);

  __AMD("core/js/headings", new Headings());

  var NavigationView$2 = function (_Backbone$View) {
    _inherits(NavigationView, _Backbone$View);

    var _super = _createSuper(NavigationView);

    function NavigationView() {
      _classCallCheck(this, NavigationView);

      return _super.apply(this, arguments);
    }

    _createClass(NavigationView, [{
      key: "className",
      value: function className() {
        return 'nav';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click [data-event]': 'triggerEvent'
        };
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          'role': 'navigation'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenToOnce(Adapt, {
          'courseModel:dataLoading': this.remove
        });
        this.listenTo(Adapt, 'router:menu router:page', this.hideNavigationButton);
        this.preRender();
      }
    }, {
      key: "preRender",
      value: function preRender() {
        Adapt.trigger('navigationView:preRender', this);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var template = Handlebars.templates[this.constructor.template];
        this.$el.html(template({
          _globals: Adapt.course.get('_globals'),
          _accessibility: Adapt.config.get('_accessibility')
        })).insertBefore('#app');

        _.defer(function () {
          Adapt.trigger('navigationView:postRender', _this);
        });

        return this;
      }
    }, {
      key: "triggerEvent",
      value: function triggerEvent(event) {
        event.preventDefault();
        var currentEvent = $(event.currentTarget).attr('data-event');
        Adapt.trigger('navigation:' + currentEvent);

        switch (currentEvent) {
          case 'backButton':
            Adapt.router.navigateToPreviousRoute();
            break;

          case 'homeButton':
            Adapt.router.navigateToHomeRoute();
            break;

          case 'parentButton':
            Adapt.router.navigateToParent();
            break;

          case 'skipNavigation':
            this.skipNavigation();
            break;

          case 'returnToStart':
            Adapt.startController.returnToStartLocation();
            break;
        }
      }
    }, {
      key: "skipNavigation",
      value: function skipNavigation() {
        Adapt.a11y.focusFirst('.' + Adapt.location._contentType);
      }
    }, {
      key: "hideNavigationButton",
      value: function hideNavigationButton(model) {
        var shouldHide = model.get('_type') === 'course';
        this.$('.nav__back-btn, .nav__home-btn').toggleClass('u-display-none', shouldHide);
      }
    }, {
      key: "showNavigationButton",
      value: function showNavigationButton() {
        this.$('.nav__back-btn, .nav__home-btn').removeClass('u-display-none');
      }
    }]);

    return NavigationView;
  }(Backbone.View);

  NavigationView$2.template = 'nav';
  var NavigationView$3 = __AMD("core/js/views/navigationView", NavigationView$2);

  var NavigationController = function (_Backbone$Controller) {
    _inherits(NavigationController, _Backbone$Controller);

    var _super = _createSuper(NavigationController);

    function NavigationController() {
      _classCallCheck(this, NavigationController);

      return _super.apply(this, arguments);
    }

    _createClass(NavigationController, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'adapt:preInitialize', this.addNavigationBar);
      }
    }, {
      key: "addNavigationBar",
      value: function addNavigationBar() {
        var adaptConfig = Adapt.course.get('_navigation');

        if (adaptConfig !== null && adaptConfig !== void 0 && adaptConfig._isDefaultNavigationDisabled) {
          Adapt.trigger('navigation:initialize');
          return;
        }

        Adapt.navigation = new NavigationView$3();
      }
    }]);

    return NavigationController;
  }(Backbone.Controller);

  __AMD("core/js/navigation", new NavigationController());

  var ComponentView = function (_AdaptView) {
    _inherits(ComponentView, _AdaptView);

    var _super = _createSuper(ComponentView);

    function ComponentView() {
      _classCallCheck(this, ComponentView);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentView, [{
      key: "attributes",
      value: function attributes() {
        if (!this.model.get('_isA11yRegionEnabled')) {
          return AdaptView$1.resultExtend('attributes', {}, this);
        }

        return AdaptView$1.resultExtend('attributes', {
          'aria-labelledby': this.model.get('_id') + '-heading',
          'role': 'region'
        }, this);
      }
    }, {
      key: "className",
      value: function className() {
        return ['component', this.model.get('_component').toLowerCase(), this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), 'is-' + this.model.get('_layout'), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }, {
      key: "renderState",
      value: function renderState() {
        Adapt.log.removed('renderState is removed and moved to item title');
      }
    }, {
      key: "setupInviewCompletion",
      value: function setupInviewCompletion() {
        var inviewElementSelector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.component__inner';
        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.setCompletionStatus;
        this.$inviewElement = this.$(inviewElementSelector);
        this.inviewCallback = callback;
        this.$inviewElement.on('inview.componentView', this.onInview.bind(this));
      }
    }, {
      key: "removeInviewListener",
      value: function removeInviewListener() {
        if (!this.$inviewElement) return;
        this.$inviewElement.off('inview.componentView');
        this.$inviewElement = null;
      }
    }, {
      key: "onInview",
      value: function onInview(event, visible, visiblePartX, visiblePartY) {
        if (!visible) return;

        switch (visiblePartY) {
          case 'top':
            this.hasSeenTop = true;
            break;

          case 'bottom':
            this.hasSeenBottom = true;
            break;

          case 'both':
            this.hasSeenTop = this.hasSeenBottom = true;
        }

        if (!this.hasSeenTop || !this.hasSeenBottom) return;
        this.inviewCallback();

        if (this.model.get('_isComplete')) {
          this.removeInviewListener();
        }
      }
    }, {
      key: "postRender",
      value: function postRender() {}
    }, {
      key: "remove",
      value: function remove() {
        this.removeInviewListener();

        _get(_getPrototypeOf(ComponentView.prototype), "remove", this).call(this);
      }
    }]);

    return ComponentView;
  }(AdaptView$1);

  ComponentView.type = 'component';
  var ComponentView$1 = __AMD("core/js/views/componentView", ComponentView);

  var ActivatorView = function (_ComponentView) {
    _inherits(ActivatorView, _ComponentView);

    var _super = _createSuper(ActivatorView);

    function ActivatorView() {
      _classCallCheck(this, ActivatorView);

      return _super.apply(this, arguments);
    }

    _createClass(ActivatorView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-activator-click': 'onBtnClicked'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        ComponentView$1.prototype.initialize.call(this);
        this.setUpEventListeners();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        var _this = this;

        this.listenTo(this.model, 'change:_isActivatorActive', this.onActivatorActiveChange);

        if (Adapt.isPDFMode()) {
          this.listenToOnce(this.model, 'change:_isReady', function () {
            _this.model.set("_isActivatorActive", true);

            Adapt.log.info("Activator: PDF mode detected; activating automatically.");
          });
        }
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }, {
      key: "onBtnClicked",
      value: function onBtnClicked(event) {
        this.model.set("_isActivatorActive", !this.model.get("_isActivatorActive"));
        this.setCompletionStatus();

        if (this.model.get("_toggleEnabled") === false) {
          Adapt.log.warn("activatorView._toggleEnabled === false functionality needs re-implementation.");
          this.$el.off("click", event.currentTarget);
          $(event.currentTarget).attr("disabled", true);
        }
      }
    }, {
      key: "onActivatorActiveChange",
      value: function onActivatorActiveChange(model, isActive) {
        this.$(".js-activator-click").toggleClass("is-active", isActive).toggleClass("is-disabled", isActive);
        if (!isActive) return;

        _.debounce(this.scrollToTargets.bind(this), 0)();
      }
    }, {
      key: "scrollToTargets",
      value: function scrollToTargets() {
        var $targets = $();
        this.model.get("_targets").each(function (target) {
          $targets = $targets.add(target.$getTargets());
        });

        try {
          Adapt.navigateToElement($targets, {
            duration: 400,
            align: "inview",
            offset: {
              top: -100,
              left: 0
            },
            priority: -1
          });
        } catch (err) {
          Adapt.log.error("An unexpected error prevented adapt-activator from scrolling its targets into view (is \"adapt-scrollfix\" installed?).", err);
        }
      }
    }, {
      key: "preRender",
      value: function preRender() {}
    }, {
      key: "postRender",
      value: function postRender() {

        this.setReadyStatus();
        return;
      }
    }]);

    return ActivatorView;
  }(ComponentView$1);

  ActivatorView.template = "activator";
  var ActivatorView$1 = __AMD("components/adapt-activator/js/activatorView", ActivatorView);

  var ActivatorTargetModel = function (_Backbone$Model) {
    _inherits(ActivatorTargetModel, _Backbone$Model);

    var _super = _createSuper(ActivatorTargetModel);

    function ActivatorTargetModel() {
      _classCallCheck(this, ActivatorTargetModel);

      return _super.apply(this, arguments);
    }

    _createClass(ActivatorTargetModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _activatorModel: null,
          _activationType: "default",
          _isReady: false,
          _isActive: false,
          _duration: 800
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {}
    }, {
      key: "setReadyStatus",
      value: function setReadyStatus() {
        var _this = this;

        _.delay(function () {
          _this.set("_isReady", true);
        }, 0);
      }
    }, {
      key: "toggle",
      value: function toggle() {
        var _this2 = this;

        return new Promise(function (resolve) {
          _this2.set("_isActive", !_this2.get("_isActive"));

          _this2.onToggle(_this2.get("_isActive"));

          _.debounce(resolve, _this2.get("_duration") || 0)();
        });
      }
    }, {
      key: "onToggle",
      value: function onToggle(isActive) {
        throw "activatorTargetModel.js: abstract function 'onToggle()' not implemented.";
      }
    }, {
      key: "$getTargets",
      value: function $getTargets() {
        throw "activatorTargetModel.js: abstract function '$getTargets()' not implemented.";
      }
    }]);

    return ActivatorTargetModel;
  }(Backbone.Model);

  var ActivatorTargetModel$1 = __AMD("components/adapt-activator/js/activatorTargetModel", ActivatorTargetModel);

  var ActivatorComponentTargetModel = function (_ActivatorTargetModel) {
    _inherits(ActivatorComponentTargetModel, _ActivatorTargetModel);

    var _super = _createSuper(ActivatorComponentTargetModel);

    function ActivatorComponentTargetModel() {
      _classCallCheck(this, ActivatorComponentTargetModel);

      return _super.apply(this, arguments);
    }

    _createClass(ActivatorComponentTargetModel, [{
      key: "defaults",
      value: function defaults() {
        return _.extend(_get(_getPrototypeOf(ActivatorComponentTargetModel.prototype), "defaults", this).call(this), {
          _parent: undefined
        });
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _this = this;

        var component = this.get("_parent");
        this.listenTo(component, "change:_isReady", function (m, isReady) {
          _this.setReadyStatus();
        });

        if (!component.setupActivatorTarget) ; else {
          component.setupActivatorTarget(this.get("_isActive"));
        }
      }
    }, {
      key: "onToggle",
      value: function onToggle(isActive) {
        var component = this.get("_parent");

        if (!component.toggleActivatorTarget) ; else {
          component.toggleActivatorTarget(isActive);
        }
      }
    }, {
      key: "$getTargets",
      value: function $getTargets() {
        return Adapt.findViewByModelId(this.get("_parent").get("_id")).$el;
      }
    }]);

    return ActivatorComponentTargetModel;
  }(ActivatorTargetModel$1);

  var ActivatorComponentTargetModel$1 = __AMD("components/adapt-activator/js/ActivatorComponentTargetModel", ActivatorComponentTargetModel);

  var ActivatorElementTargetModel = function (_ActivatorTargetModel) {
    _inherits(ActivatorElementTargetModel, _ActivatorTargetModel);

    var _super = _createSuper(ActivatorElementTargetModel);

    function ActivatorElementTargetModel() {
      _classCallCheck(this, ActivatorElementTargetModel);

      return _super.apply(this, arguments);
    }

    _createClass(ActivatorElementTargetModel, [{
      key: "defaults",
      value: function defaults() {
        return _.extend(_get(_getPrototypeOf(ActivatorElementTargetModel.prototype), "defaults", this).call(this), {
          "_name": ""
        });
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setReadyStatus();
      }
    }, {
      key: "onToggle",
      value: function onToggle(isActive) {
        Adapt.annotation.toggleEl(this.$getTargets(), isActive);
      }
    }, {
      key: "$getTargets",
      value: function $getTargets() {
        var $targets = $();
        var names = this.get("_name").split(",").map(function (e) {
          return e.trim();
        });
        var parent = this.get("_activatorModel");
        var blockView = Adapt.findViewByModelId(parent.getParent().get("_id"));

        _.each(names, function (name) {
          $targets = $targets.add(blockView.$("[name=\"".concat(name, "\"]")));
        });

        return $targets;
      }
    }]);

    return ActivatorElementTargetModel;
  }(ActivatorTargetModel$1);

  var ActivatorElementTargetModel$1 = __AMD("components/adapt-activator/js/ActivatorElementTargetModel", ActivatorElementTargetModel);

  var ActivatorModel = function (_ComponentModel) {
    _inherits(ActivatorModel, _ComponentModel);

    var _super = _createSuper(ActivatorModel);

    function ActivatorModel() {
      _classCallCheck(this, ActivatorModel);

      return _super.apply(this, arguments);
    }

    _createClass(ActivatorModel, [{
      key: "defaults",
      value: function defaults() {
        return ComponentModel$1.resultExtend('defaults', {
          _isActivatorActive: false
        });
      }
    }, {
      key: "initialize",
      value: function initialize() {
        ComponentModel$1.prototype.initialize.call(this);
        this.setUpEventListeners();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(Adapt, "app:dataReady", this.onDataReady.bind(this));
        this.listenTo(this, "change:_isActivatorActive", this.onActivatorActiveChange.bind(this));
      }
    }, {
      key: "onDataReady",
      value: function onDataReady() {
        this.initTargets();
        this.listenTo(this.get("_targets"), "change:_isReady", this.onTargetReadyChange);
      }
    }, {
      key: "onTargetReadyChange",
      value: function onTargetReadyChange(targetModel, isReady) {
        var notReadyModel = this.get("_targets").find(function (m) {
          return !m.get("_isReady");
        });

        if (notReadyModel) {
          return;
        }

        this.set("_targetsReady", true);
      }
    }, {
      key: "initTargets",
      value: function initTargets() {
        var _this = this;

        var targets = this.get("_targets");
        var _targets = [];
        var index = 0;

        _.each(targets, function (target, key) {
          var componentId = target._id;

          if (componentId === undefined && typeof key === "string") {
            componentId = key;
            Adapt.log.deprecated("Set \"_target\" as an array with property \"_id\" in its elements instead of a dictionary.");
          }

          if (!componentId && target._name) {
            var _activatorTarget = new ActivatorElementTargetModel$1({
              _activatorModel: _this,
              _name: target._name,
              _activationType: target._activationType ? target._activationType : "default",
              _index: index
            });

            _targets.push(_activatorTarget);

            index++;
            return;
          }

          var componentModel = Adapt.findById(componentId);
          if (!componentModel) throw "activatorModel.js: could not find \"_target\" component with \"_id\": \"".concat(componentId, "\".");
          var activatorTarget = new ActivatorComponentTargetModel$1({
            _activatorModel: _this,
            _parent: componentModel,
            _activationType: target._activationType ? target._activationType : "default",
            _index: index
          });
          componentModel.set("_activatorTarget", activatorTarget);

          _targets.push(activatorTarget);

          index++;
        });

        this.set("_targets", new Backbone.Collection(_targets));
      }
    }, {
      key: "onActivatorActiveChange",
      value: function onActivatorActiveChange(model, isActive) {
        this.toggleTargets(isActive);
      }
    }, {
      key: "toggleTargets",
      value: function () {
        var _toggleTargets = _asyncToGenerator(regeneratorRuntime.mark(function _callee(isActive) {
          var targetModels, i;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  targetModels = this.get("_targets").models;
                  i = 0;

                case 2:
                  if (!(i < targetModels.length)) {
                    _context.next = 12;
                    break;
                  }

                  if (!isActive) {
                    _context.next = 8;
                    break;
                  }

                  _context.next = 6;
                  return targetModels[i].toggle();

                case 6:
                  _context.next = 9;
                  break;

                case 8:
                  targetModels[i].toggle();

                case 9:
                  i++;
                  _context.next = 2;
                  break;

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function toggleTargets(_x) {
          return _toggleTargets.apply(this, arguments);
        }

        return toggleTargets;
      }()
    }]);

    return ActivatorModel;
  }(ComponentModel$1);

  var ActivatorModel$1 = __AMD("components/adapt-activator/js/activatorModel", ActivatorModel);

  var helpers$7 = {
    ac_mark: function () {
      return 'data-activator-transition="mark"';
    },
    ac_show: function () {
      return 'data-activator-transition="show"';
    }
  };

  for (var name$7 in helpers$7) {
    if (!helpers$7.hasOwnProperty(name$7)) continue;
    Handlebars__default['default'].registerHelper(name$7, helpers$7[name$7]);
  }

  Adapt.on("componentView:preRender", function (componentView) {
    if (componentView.onActivatorToggle) return;
    var activatorTarget = componentView.model.get("_activatorTarget");
    if (!activatorTarget) return;
    componentView.$el.addClass("is-activator-target").attr("data-activator-activation", activatorTarget.get("_activationType"));
    componentView.listenTo(activatorTarget, "change:_isActive", function (model, isActive) {
      componentView.$el.toggleClass("is-activator-active", isActive);
    });

    if (componentView.model.get("_component") == "text" && activatorTarget.get("_activationType") == "default") {
      setUpDefaultTargetComponent(componentView);
    }
  });

  function setUpDefaultTargetComponent(componentView) {
    var activatorTarget = componentView.model.get("_activatorTarget");
    componentView.model.get("_componentRow").set("_hasDivider", false);
    componentView.$el.hide(0);

    componentView.getBoundingClientRect = function () {
      componentView.$el.show(0).css("height", "");
      var bb = componentView.$el[0].getBoundingClientRect();

      if (!activatorTarget.get("_isActive")) {
        componentView.$el.hide(0);
      }

      return bb;
    };

    componentView.listenTo(activatorTarget, "change:_isActive", function (model, isActive) {
      if (isActive) {
        componentView.$el.slideDown();
      } else {
        componentView.$el.slideUp();
      }
    });
  }

  __AMD("components/adapt-activator/js/adapt-activator", Adapt.register('activator', {
    model: ActivatorModel$1,
    view: ActivatorView$1
  }));

  var PlaybackControlsView = function (_Backbone$View) {
    _inherits(PlaybackControlsView, _Backbone$View);

    var _super = _createSuper(PlaybackControlsView);

    function PlaybackControlsView() {
      _classCallCheck(this, PlaybackControlsView);

      return _super.apply(this, arguments);
    }

    _createClass(PlaybackControlsView, [{
      key: "className",
      value: function className() {
        return "playbackcontrols";
      }
    }, {
      key: "events",
      value: function events() {
        return {
          "input .playbackcontrols__range": "onRangeChange",
          "click .playbackcontrols__next": "onClickNext",
          "click .playbackcontrols__playpause": "onClickPlayPause",
          "click .playbackcontrols__back": "onClickBack",
          "change .playbackcontrols__range": "onRangeChange"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.render();
        this.setUpEventListeners();
        this.model.set("frameIdx", 0);
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model, "change:frameIdx", this.onFrameIdxChange);
        this.listenTo(this.model, "change:isPlaying", this.onIsPlayingChange);
        this.listenTo(this.model, "change:isComplete", this.onIsCompleteChange);
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        data.view = this;
        var template = Handlebars.templates['playbackControls'];
        this.$el.html(template(data));
      }
    }, {
      key: "onFrameIdxChange",
      value: function onFrameIdxChange(model, frameIdx) {
        this.$(".playbackcontrols__range").val(frameIdx);
        this.$(".playbackcontrols__back").attr("disabled", function () {
          return frameIdx == 0;
        });
        this.$(".playbackcontrols__next").attr("disabled", function () {
          return frameIdx == this.model.get("frameCount") - 1;
        }.bind(this));
      }
    }, {
      key: "onClickBack",
      value: function onClickBack(event) {
        this.model.pause();
        if (this.model.get("frameIdx") - 1 < 0) return;
        this.model.set("frameIdx", this.model.get("frameIdx") - 1);
      }
    }, {
      key: "onClickNext",
      value: function onClickNext(event) {
        this.model.pause();
        var framesCount = this.model.get("framesCount") - 1;
        if (this.model.get("frameIdx") + 1 > framesCount) return;
        this.model.set("frameIdx", this.model.get("frameIdx") + 1);
      }
    }, {
      key: "onRangeChange",
      value: function onRangeChange(event) {
        this.model.pause();
        this.model.set("frameIdx", parseInt($(event.currentTarget).val()));
      }
    }, {
      key: "onClickPlayPause",
      value: function onClickPlayPause() {
        this.togglePlayPause();
      }
    }, {
      key: "togglePlayPause",
      value: function togglePlayPause() {
        this.model.togglePlayPause();
      }
    }, {
      key: "onIsPlayingChange",
      value: function onIsPlayingChange(model, isPlaying) {
        if (isPlaying) {
          this.$(".playbackcontrols__playpause").removeClass("playbackcontrols__play").addClass("playbackcontrols__pause");
        } else {
          this.$(".playbackcontrols__playpause").removeClass("playbackcontrols__pause").addClass("playbackcontrols__play");
        }
      }
    }, {
      key: "onIsCompleteChange",
      value: function onIsCompleteChange(model, isComplete) {
        this.$(".playbackcontrols__playpause").toggleClass("playbackcontrols__replay", isComplete);
      }
    }]);

    return PlaybackControlsView;
  }(Backbone.View);
  var PlaybackControlsView$1 = __AMD("extensions/adapt-playbackControls/js/playbackControlsView", PlaybackControlsView);

  var TimelineModel = function (_Backbone$Model) {
    _inherits(TimelineModel, _Backbone$Model);

    var _super = _createSuper(TimelineModel);

    function TimelineModel() {
      _classCallCheck(this, TimelineModel);

      return _super.apply(this, arguments);
    }

    _createClass(TimelineModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          frameCount: 0,
          frameIdx: -1,
          frameDuration: 500,
          mode: "steps",
          duration: undefined,
          position: 0,
          isPlaying: false,
          isComplete: false,
          _prevTimestamp: undefined
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setupFrames();
        this.setupEventListeners();
      }
    }, {
      key: "setupFrames",
      value: function setupFrames() {
        if (this.get("mode") == "steps") {
          var frameCount = this.get("frameCount");
          var frameDuration = this.get("frameDuration");
          var duration = this.get("duration");

          if (frameCount && frameDuration) {
            duration = frameCount * frameDuration;
          } else if (frameDuration && duration) {
            frameCount = frameDuration / duration;
          } else {
            frameDuration = frameCount / duration;
          }

          this.set("frameCount", frameCount);
          this.set("frameDuration", frameDuration);
          this.set("duration", duration);
          if (frameCount <= 0) throw "Timeline calculated frameCount cannot be <= 0 (ensure the \"frameDuration\" and \"duration\" properties are manually set).";
          return;
        }

        throw "Non-\"steps\" mode support has not yet been implemented.";
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(this, "change:isPlaying", this.onIsPlayingChange);
        this.listenTo(this, "change:position", this.onPositionChange);
        this.listenTo(this, "change:frameIdx", this.onFrameIdxChange);
      }
    }, {
      key: "onIsPlayingChange",
      value: function onIsPlayingChange(model, isPlaying) {
        if (isPlaying) {
          if (this.get("isComplete")) {
            this.set("position", 0);
          }

          this.set("_prevTimestamp", undefined);
          window.requestAnimationFrame(this.step.bind(this));
        }
      }
    }, {
      key: "onFrameIdxChange",
      value: function onFrameIdxChange(model, frameIdx) {
        this.set("position", frameIdx * this.get("frameDuration"));
        this.set("isComplete", frameIdx == this.get("frameCount") - 1);
      }
    }, {
      key: "onPositionChange",
      value: function onPositionChange(model, position) {
        var frameIdx = Math.floor(position / this.get("frameDuration"));
        if (frameIdx >= this.get("frameCount")) frameIdx = this.get("frameCount") - 1;
        this.set("frameIdx", frameIdx);
      }
    }, {
      key: "step",
      value: function step(timestamp) {
        if (!this.get("isPlaying")) return;

        if (this.get("_prevTimestamp") === undefined) {
          this.set("_prevTimestamp", timestamp);
        }

        var delta = timestamp - this.get("_prevTimestamp");
        var position = this.get("position") + delta;
        this.set("_prevTimestamp", timestamp);
        var duration = this.get("duration");

        if (position > duration) {
          this.set("position", duration);
          this.pause();
          return;
        }

        this.set("position", position);
        window.requestAnimationFrame(this.step.bind(this));
      }
    }, {
      key: "togglePlayPause",
      value: function togglePlayPause() {
        this.set("isPlaying", !this.get("isPlaying"));
      }
    }, {
      key: "reset",
      value: function reset() {
        this.set("isPlaying", false);
        this.set("isComplete", false);
        this.set("position", 0);
        this.set("_prevTimestamp", undefined);
      }
    }, {
      key: "pause",
      value: function pause() {
        this.set("isPlaying", false);
      }
    }, {
      key: "play",
      value: function play() {
        this.set("isPlaying", true);
      }
    }]);

    return TimelineModel;
  }(Backbone.Model);
  var PlaybackControlsModel = __AMD("extensions/adapt-playbackControls/js/playbackControlsModel", TimelineModel);

  var PlaybackControls = __AMD("extensions/adapt-playbackControls/js/adapt-playbackControls", function (modelSettings) {
    var model = new PlaybackControlsModel(modelSettings);
    var view = new PlaybackControlsView$1({
      model: model
    });
    return view;
  });

  var CAInspectorVarView = function (_Backbone$View) {
    _inherits(CAInspectorVarView, _Backbone$View);

    var _super = _createSuper(CAInspectorVarView);

    function CAInspectorVarView() {
      _classCallCheck(this, CAInspectorVarView);

      return _super.apply(this, arguments);
    }

    _createClass(CAInspectorVarView, [{
      key: "className",
      value: function className() {
        return "codeanim__inspector-row";
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setupEventListeners();
        this.render();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        var _this = this;

        this.listenTo(this.model.get("_playbackControlsModel"), "change:frameIdx", this.onFrameIdxChange);
        this.listenTo(this.model, "change:val", this.onValChange);
        this.listenTo(this.model, "change:_isVisible", this.onVisibleChange);

        _.debounce(function () {
          _this.onFrameIdxChange(_this.model.get("_playbackControlsModel"), _this.model.get("_playbackControlsModel").get("frameIdx"));
        })();
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        data.view = this;
        var template = Handlebars.templates['codeAnimInspectorVar'];
        this.$el.html(template(data));
      }
    }, {
      key: "onFrameIdxChange",
      value: function onFrameIdxChange(model, frameIdx) {
        var val = undefined;
        var vals = this.model.get("_vals");

        _.each(vals, function (v) {
          if (v.frameIdx <= frameIdx) {
            val = v._isEnabled ? v.val : undefined;
            val === undefined ? -1 : v.frameIdx;
          }
        });

        this.model.set("val", val);
      }
    }, {
      key: "onVisibleChange",
      value: function onVisibleChange(model, isVisible) {
        this.model.get("_parentView").$(isVisible ? ".js-codeanim-inspector-vars-inactive" : ".js-codeanim-inspector-vars-invisible").append(this.$el);
        this.$el.toggleClass("u-visibility-hidden", !isVisible).hide(0).show(0);
      }
    }, {
      key: "onValChange",
      value: function onValChange(model, val) {
        this.$(".js-codeanim-inspector-var-val").html(val !== undefined ? val : "");
        this.$(".codeanim__inspector-cell-value-inner").hide(0).show(0);
        this.model.set("_isVisible", val !== undefined);
      }
    }]);

    return CAInspectorVarView;
  }(Backbone.View);

  var CodeAnimInspectorVarView = __AMD("components/adapt-codeAnim/js/codeAnimInspectorVarView", CAInspectorVarView);

  var CodeAnimView = function (_ComponentView) {
    _inherits(CodeAnimView, _ComponentView);

    var _super = _createSuper(CodeAnimView);

    function CodeAnimView() {
      _classCallCheck(this, CodeAnimView);

      return _super.apply(this, arguments);
    }

    _createClass(CodeAnimView, [{
      key: "events",
      value: function events() {
        return {};
      }
    }, {
      key: "initialize",
      value: function initialize() {
        ComponentView$1.prototype.initialize.call(this);
        this.setUpViewData();
        this.setUpEventListeners();
      }
    }, {
      key: "setUpViewData",
      value: function setUpViewData() {
        var animation = this.model.get("_animation");

        if (animation && animation._isEnabled) {
          this.$el.addClass("is-animated");
        }
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model.get("_activatorTarget"), "change:_isActive", this.onActivatorActivate);
      }
    }, {
      key: "onActivatorActivate",
      value: function onActivatorActivate(activatorTarget, _isActive) {
        var navigateSettings = {
          duration: 400,
          align: "inview",
          offset: {
            top: -100,
            left: 0
          }
        };

        if (!this.playbackControlsView) {
          if (_isActive) {
            Adapt.navigateToElement(this.$(".js-codeanim-console"), navigateSettings);
          }

          return;
        }

        if (!_isActive) {
          this.playbackControlsView.model.pause();
          this.playbackControlsView.model.reset();
        } else {
          this.playbackControlsView.model.reset();
          this.playbackControlsView.model.play();
        }

        this.model.get("_animation")._isActive = _isActive;

        if (_isActive) {
          var $anim = this.$(".js-codeanim-anim");
          $anim.show(0);
          var animHeight = this.$(".js-codeanim-anim").height();
          $anim.hide(0);
          $anim.slideDown();
          navigateSettings.offset.height = animHeight + 100;
          Adapt.navigateToElement(this.$(".playbackcontrols"), navigateSettings);
        } else {
          this.$(".js-codeanim-anim").slideUp();
        }
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }, {
      key: "getBoundingClientRect",
      value: function getBoundingClientRect() {
        var animation = this.model.get("_animation");

        if (!animation || !animation._isEnabled) {
          return this.$el[0].getBoundingClientRect();
        }

        var $codeAnimContainer = this.$(".js-codeanim-anim");
        $codeAnimContainer.show(0).css("height", "");
        var bb = this.$el[0].getBoundingClientRect();
        bb.height += 10;

        if (!animation._isActive) {
          $codeAnimContainer.hide(0);
        }

        return bb;
      }
    }, {
      key: "preRender",
      value: function preRender() {
        if (this.model.get("_console")._lang == "html") {
          var htmlConsole = Adapt.codeBox.toString(this.model.get("_console").body);
          htmlConsole = htmlConsole.replace(/&lt;/g, "<");
          htmlConsole = htmlConsole.replace(/&gt;/g, ">");
          this.model.get("_console").body = htmlConsole;
        }
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.renderPlaybackControls();
        this.setReadyStatus();
      }
    }, {
      key: "renderPlaybackControls",
      value: function renderPlaybackControls() {
        var animation = this.model.get("_animation");
        if (!animation || !animation._isEnabled) return;
        var playbackControlsView = PlaybackControls({
          frameDuration: animation._frameDuration || 1000,
          duration: animation._duration,
          frameCount: animation._frames.length,
          mode: "steps"
        });
        this.playbackControlsView = playbackControlsView;
        this.$(".codeanim__playbackcontrols-container").html(playbackControlsView.$el);
        this.frames = animation._frames;
        this.listenTo(playbackControlsView.model, "change:frameIdx", this.onPlaybackControlsFrameChange);

        if (this.model.get("_isInspectorEnabled") !== false) {
          this.renderInspectorVars();
        }
      }
    }, {
      key: "renderInspectorVars",
      value: function renderInspectorVars() {
        var _this = this;

        var $container = this.$(".js-codeanim-inspector-vars");

        var varModels = this.model.get("_animation")._inspectorVars;

        _.each(varModels, function (varModel) {
          varModel.set("_playbackControlsModel", _this.playbackControlsView.model);
          varModel.set("_parentView", _this);
          $container.append(new CodeAnimInspectorVarView({
            model: varModel
          }).$el);
        });
      }
    }, {
      key: "_getAnimationFrame",
      value: function _getAnimationFrame(idx) {
        var targetFrame;

        try {
          targetFrame = this.frames[idx];
        } catch (err) {
          throw err;
        }

        return targetFrame;
      }
    }, {
      key: "onPlaybackControlsFrameChange",
      value: function onPlaybackControlsFrameChange(playbackControlsModel, frameIdx) {
        var frame = this._getAnimationFrame(frameIdx);

        this.$(".codebox__line").removeClass("is-codeanim-mark").removeAttr("data-codeanim-anim").filter("[data-line-num=" + frame.line + "]").attr("data-codeanim-anim", frame.anim).addClass("is-codeanim-mark");
        var $consolePrints = this.$(".codeanim__console-print");
        $consolePrints.addClass("u-visibility-hidden").filter(function (i, e) {
          return $(e).attr("data-frame-idx") <= frameIdx;
        }).removeClass("u-visibility-hidden");
      }
    }]);

    return CodeAnimView;
  }(ComponentView$1);

  CodeAnimView.template = "codeAnim";
  var CodeAnimView$1 = __AMD("components/adapt-codeAnim/js/codeAnimView", CodeAnimView);

  var UNDEFINED = "UNDEFINED";

  var CAInspectorVarModel = function (_Backbone$Model) {
    _inherits(CAInspectorVarModel, _Backbone$Model);

    var _super = _createSuper(CAInspectorVarModel);

    function CAInspectorVarModel() {
      _classCallCheck(this, CAInspectorVarModel);

      return _super.apply(this, arguments);
    }

    _createClass(CAInspectorVarModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _playbackControlsModel: undefined,
          name: "",
          val: UNDEFINED,
          _vals: [{
            val: "",
            frameIdx: 0,
            _isEnabled: true
          }],
          lastFrameIdx: -2
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.set("_vals", []);
        this.addVal(UNDEFINED, 0);
      }
    }, {
      key: "convertVal",
      value: function convertVal(val) {
        var _this = this;

        switch (_typeof(val)) {
          case "string":
            if (val === UNDEFINED) {
              return undefined;
            }

            if (val === "undefined") {
              return "<em>undefined</em>";
            }

            if (val.length && val[0] == "~") {
              return val.substring(1);
            }

            return "\"" + val + "\"";

          case "object":
            var v = val;

            _.each(v, function (val, key) {
              v[key] = _this.convertVal(val);
            });

            v = JSON.stringify(v, null, " ");
            v = v.replace(/\n/g, "");
            v = v.replace(/("\\")(.*?)(\\"")/g, function (match, $1, $2, $3) {
              return "!!!'!!!" + $2 + "!!!'!!!";
            });
            v = v.replace(/([^\\])(")/g, function (match, $1, $2) {
              return $1;
            });
            v = v.replace(/!!!'!!!/g, '"');
            v = v.replace(/(^[[{])(\s+)([\S\s]*)(\s+)([}\]]$)/g, "$1$3$5");
            return v.replace(/(\[)(\s+)/g, "$1");
        }

        return val;
      }
    }, {
      key: "addVal",
      value: function addVal(val, frameIdx) {
        var _val = this.convertVal(val);

        var v = {
          _isEnabled: _val === false ? false : true,
          val: _val,
          frameIdx: frameIdx
        };

        var _vals = this.get("_vals");

        _vals.push(v);

        this.set("_vals", _vals);
      }
    }]);

    return CAInspectorVarModel;
  }(Backbone.Model);

  var CodeAnimInspectorVarModel = __AMD("components/adapt-codeAnim/js/codeAnimInspectorVarModel", CAInspectorVarModel);

  var CodeAnimModel = function (_ComponentModel) {
    _inherits(CodeAnimModel, _ComponentModel);

    var _super = _createSuper(CodeAnimModel);

    function CodeAnimModel() {
      _classCallCheck(this, CodeAnimModel);

      return _super.apply(this, arguments);
    }

    _createClass(CodeAnimModel, [{
      key: "defaults",
      value: function defaults() {
        return ComponentModel$1.resultExtend('defaults', {
          "_timelineFrames": undefined
        });
      }
    }, {
      key: "initialize",
      value: function initialize() {
        ComponentModel$1.prototype.initialize.call(this);
        this.setUpEventListeners();
        this.setUpAnimation();
      }
    }, {
      key: "setUpAnimation",
      value: function setUpAnimation() {
        var _this = this;

        var _animation = this.get("_animation");

        if (!_animation || !_animation._isEnabled) return;
        this.get("_animation")._isInspectorEnabled = this.get("_animation")._isInspectorEnabled !== false;

        var keyframes = this.get("_animation")._keyframes;

        if (!keyframes) throw "codeAnim property _animation._keyframes array must be defined";
        var frames = [];
        frames.push({
          line: 0,
          keyframe: null
        });

        _.each(keyframes, function (k) {
          var allLines = _this._stringToNumbers(k.lines);

          _.each(allLines, function (line) {
            var f = _.extend({}, k, {
              line: line
            });

            frames.push(f);
          });
        });

        _animation._frames = frames;
        var _maxNameLength = 5;
        var inspectorVars = {};

        _.each(_animation._frames, function (frame, frameIdx) {
          if (!frame.vars) return;

          _.each(frame.vars, function (val, key) {
            if (!inspectorVars[key]) {
              inspectorVars[key] = new CodeAnimInspectorVarModel({
                name: key
              });
              if (key.length > _maxNameLength) _maxNameLength = key.length;
            }

            inspectorVars[key].addVal(val, frameIdx);
          });
        });

        this.get("_animation")._maxNameLength = _maxNameLength / 1.2;
        _animation._inspectorVars = inspectorVars;
      }
    }, {
      key: "_stringToNumbers",
      value: function _stringToNumbers(str) {
        var nums = str.replace(/\s/g, "");
        nums = nums.split(",");
        var allNums = [];

        _.each(nums, function (n) {
          var match = n.match(/(\d+)-(\d+)/);

          if (match) {
            for (var i = parseInt(match[1]); i <= parseInt(match[2]); i++) {
              allNums.push(i);
            }

            return;
          }

          match = n.match(/(\d)+/g);

          if (match !== null) {
            allNums.push(parseInt(match));
            return;
          }

          throw "Invalid _stringToNumbers value provided: \"" + str + "\"";
        });

        return allNums;
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {}
    }]);

    return CodeAnimModel;
  }(ComponentModel$1);

  var CodeAnimModel$1 = __AMD("components/adapt-codeAnim/js/codeAnimModel", CodeAnimModel);

  __AMD("components/adapt-codeAnim/js/adapt-codeAnim", Adapt.register('codeanim', {
    model: CodeAnimModel$1,
    view: CodeAnimView$1
  }));

  var ItemModel = __AMD("core/js/models/itemModel", function (_LockingModel) {
    _inherits(ItemModel, _LockingModel);

    var _super = _createSuper(ItemModel);

    function ItemModel() {
      _classCallCheck(this, ItemModel);

      return _super.apply(this, arguments);
    }

    _createClass(ItemModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _isActive: false,
          _isVisited: false
        };
      }
    }, {
      key: "reset",
      value: function reset() {
        this.set({
          _isActive: false,
          _isVisited: false
        });
      }
    }, {
      key: "toggleActive",
      value: function toggleActive() {
        var isActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.get('_isActive');
        this.set('_isActive', isActive);
      }
    }, {
      key: "toggleVisited",
      value: function toggleVisited() {
        var isVisited = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.get('_isVisited');
        this.set('_isVisited', isVisited);
      }
    }]);

    return ItemModel;
  }(LockingModel));

  var ItemsComponentModel = __AMD("core/js/models/itemsComponentModel", function (_ComponentModel) {
    _inherits(ItemsComponentModel, _ComponentModel);

    var _super = _createSuper(ItemsComponentModel);

    function ItemsComponentModel() {
      _classCallCheck(this, ItemsComponentModel);

      return _super.apply(this, arguments);
    }

    _createClass(ItemsComponentModel, [{
      key: "toJSON",
      value: function toJSON() {
        var json = _get(_getPrototypeOf(ItemsComponentModel.prototype), "toJSON", this).call(this);

        json._items = this.getChildren().toJSON();
        return json;
      }
    }, {
      key: "init",
      value: function init() {
        this.setUpItems();
        this.listenTo(this.getChildren(), {
          'all': this.onAll,
          'change:_isVisited': this.checkCompletionStatus
        });

        _get(_getPrototypeOf(ItemsComponentModel.prototype), "init", this).call(this);
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        var booleanArray = this.get('_userAnswer');
        if (!booleanArray) return;
        this.getChildren().forEach(function (child, index) {
          return child.set('_isVisited', booleanArray[index]);
        });
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var booleanArray = this.getChildren().map(function (child) {
          return child.get('_isVisited');
        });
        this.set('_userAnswer', booleanArray);
      }
    }, {
      key: "setUpItems",
      value: function setUpItems() {
        var items = this.get('_items') || [];
        items.forEach(function (item, index) {
          return item._index = index;
        });
        this.setChildren(new Backbone.Collection(items, {
          model: ItemModel
        }));
      }
    }, {
      key: "getItem",
      value: function getItem(index) {
        return this.getChildren().findWhere({
          _index: index
        });
      }
    }, {
      key: "getVisitedItems",
      value: function getVisitedItems() {
        return this.getChildren().where({
          _isVisited: true
        });
      }
    }, {
      key: "getActiveItems",
      value: function getActiveItems() {
        return this.getChildren().where({
          _isActive: true
        });
      }
    }, {
      key: "getActiveItem",
      value: function getActiveItem() {
        return this.getChildren().findWhere({
          _isActive: true
        });
      }
    }, {
      key: "areAllItemsCompleted",
      value: function areAllItemsCompleted() {
        return this.getVisitedItems().length === this.getChildren().length;
      }
    }, {
      key: "checkCompletionStatus",
      value: function checkCompletionStatus() {
        this.storeUserAnswer();
        if (!this.areAllItemsCompleted()) return;
        this.setCompletionStatus();
      }
    }, {
      key: "reset",
      value: function reset(type, force) {
        this.getChildren().each(function (item) {
          return item.reset();
        });

        _get(_getPrototypeOf(ItemsComponentModel.prototype), "reset", this).call(this, type, force);
      }
    }, {
      key: "resetActiveItems",
      value: function resetActiveItems() {
        this.getChildren().each(function (item) {
          return item.toggleActive(false);
        });
      }
    }, {
      key: "setActiveItem",
      value: function setActiveItem(index) {
        var item = this.getItem(index);
        if (!item) return;
        var activeItem = this.getActiveItem();
        if (activeItem) activeItem.toggleActive(false);
        item.toggleActive(true);
      }
    }]);

    return ItemsComponentModel;
  }(ComponentModel$1));

  var AccordionModel = ItemsComponentModel.extend({
    defaults: function () {
      return _.extend({}, _.result(ItemsComponentModel.prototype, 'defaults'), {
        _shouldCollapseItems: false,
        _toggleSpeed: 200
      });
    },
    toggleItemsState: function (index) {
      var item = this.getItem(index);
      var previousActiveItem = this.getActiveItem();
      item.toggleActive();
      item.toggleVisited(true);

      if (previousActiveItem && this.get('_shouldCollapseItems')) {
        previousActiveItem.toggleActive(false);
      }
    }
  });
  var AccordionModel$1 = __AMD("components/adapt-contrib-accordion/js/accordionModel", AccordionModel);

  var AccordionView = ComponentView$1.extend({
    events: {
      'click .js-toggle-item': 'onClick'
    },
    preRender: function () {
      this.checkIfResetOnRevisit();
      this.setUpModelData();
      this.model.resetActiveItems();
      this.listenTo(this.model.getChildren(), {
        'change:_isActive': this.onItemsActiveChange,
        'change:_isVisited': this.onItemsVisitedChange
      });
    },
    setUpModelData: function () {
      if (!Adapt.sizing) return;
      var globalSizing = this.model.get("_itemSizing");

      _.each(this.model.get("_items"), function (item) {
        var graphic = item._graphic;
        if (!graphic) return;
        var itemSizing = graphic._sizing || {};
        itemSizing = _.extend({}, globalSizing, itemSizing);
        item._graphic._sizing = itemSizing;
        item._graphic._sizing._classes = Adapt.sizing.getSizingClass(item._graphic._sizing);
        item._graphic._sizing._parClasses = Adapt.sizing.getParentClasses(item._graphic._sizing);
      });
    },
    postRender: function () {
      this.setReadyStatus();

      if (this.model.get('_setCompletionOn') === 'inview') {
        this.setupInviewCompletion();
      }
    },
    checkIfResetOnRevisit: function () {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    },
    onClick: function (event) {
      event.preventDefault();
      this.model.toggleItemsState($(event.currentTarget).parent().data('index'));
    },
    onItemsActiveChange: function (item, isActive) {
      this.toggleItem(item, isActive);
    },
    onItemsVisitedChange: function (item, isVisited) {
      if (!isVisited) return;
      var $item = this.getItemElement(item);
      $item.children('.accordion__item-btn').addClass('is-visited');
    },
    toggleItem: function (item, shouldExpand) {
      var $item = this.getItemElement(item);
      var $body = $item.children('.accordion__item-content').stop(true, true);
      $item.children('.accordion__item-btn').toggleClass('is-selected is-open', shouldExpand).toggleClass('is-closed', !shouldExpand).attr('aria-expanded', shouldExpand);

      if (!shouldExpand) {
        $body.slideUp(this.model.get('_toggleSpeed'));
        return;
      }

      $body.slideDown(this.model.get('_toggleSpeed'));
    },
    getItemElement: function (item) {
      var index = item.get('_index');
      return this.$('.accordion__item').filter('[data-index="' + index + '"]');
    }
  });
  var AccordionView$1 = __AMD("components/adapt-contrib-accordion/js/accordionView", AccordionView);

  var Accordion = __AMD("components/adapt-contrib-accordion/js/adapt-contrib-accordion", Adapt.register('accordion', {
    model: AccordionModel$1,
    view: AccordionView$1
  }));

  var AssessmentResultsModel = function (_ComponentModel) {
    _inherits(AssessmentResultsModel, _ComponentModel);

    var _super = _createSuper(AssessmentResultsModel);

    function AssessmentResultsModel() {
      _classCallCheck(this, AssessmentResultsModel);

      return _super.apply(this, arguments);
    }

    _createClass(AssessmentResultsModel, [{
      key: "init",
      value: function init() {
        var _get2;

        this.set('originalBody', this.get('body'));
        this.listenTo(Adapt, {
          'assessments:complete': this.onAssessmentComplete,
          'assessments:reset': this.onAssessmentReset
        });

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(AssessmentResultsModel.prototype), "init", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "checkIfAssessmentComplete",
      value: function checkIfAssessmentComplete() {
        if (!Adapt.assessment || this.get('_assessmentId') === undefined) {
          return;
        }

        var assessmentModel = Adapt.assessment.get(this.get('_assessmentId'));
        if (!assessmentModel || assessmentModel.length === 0) return;
        var state = assessmentModel.getState();

        var isResetOnRevisit = assessmentModel.get('_assessment')._isResetOnRevisit;

        if (state.isComplete && (!state.allowResetIfPassed || !isResetOnRevisit)) {
          this.onAssessmentComplete(state);
          return;
        }

        this.setVisibility();
      }
    }, {
      key: "onAssessmentComplete",
      value: function onAssessmentComplete(state) {
        if (this.get('_assessmentId') === undefined || this.get('_assessmentId') != state.id) return;
        this.set({
          _state: state,
          attempts: state.attempts,
          attemptsSpent: state.attemptsSpent,
          attemptsLeft: state.attemptsLeft,
          score: state.score,
          scoreAsPercent: state.scoreAsPercent,
          maxScore: state.maxScore,
          isPass: state.isPass
        });
        this.setFeedbackBand(state);
        this.checkRetryEnabled(state);
        this.setFeedbackText();
        this.toggleVisibility(true);
      }
    }, {
      key: "setFeedbackBand",
      value: function setFeedbackBand(state) {
        var scoreProp = state.isPercentageBased ? 'scoreAsPercent' : 'score';

        var bands = _.sortBy(this.get('_bands'), '_score');

        for (var i = bands.length - 1; i >= 0; i--) {
          var isScoreInBandRange = state[scoreProp] >= bands[i]._score;
          if (!isScoreInBandRange) continue;
          this.set('_feedbackBand', bands[i]);
          break;
        }
      }
    }, {
      key: "checkRetryEnabled",
      value: function checkRetryEnabled(state) {
        var assessmentModel = Adapt.assessment.get(state.id);
        if (!assessmentModel.canResetInPage()) return false;
        var feedbackBand = this.get('_feedbackBand');
        var isRetryEnabled = (feedbackBand && feedbackBand._allowRetry) !== false;
        var isAttemptsLeft = state.attemptsLeft > 0 || state.attemptsLeft === 'infinite';
        var showRetry = isRetryEnabled && isAttemptsLeft && (!state.isPass || state.allowResetIfPassed);
        this.set({
          _isRetryEnabled: showRetry,
          retryFeedback: showRetry ? this.get('_retry').feedback : ''
        });
      }
    }, {
      key: "setFeedbackText",
      value: function setFeedbackText() {
        var feedbackBand = this.get('_feedbackBand');
        var feedback = feedbackBand ? Handlebars.compile(feedbackBand.feedback)(this.toJSON()) : '';
        this.set({
          feedback: feedback,
          body: this.get('_completionBody')
        });
      }
    }, {
      key: "setVisibility",
      value: function setVisibility() {
        if (!Adapt.assessment) return;
        var isVisibleBeforeCompletion = this.get('_isVisibleBeforeCompletion') || false;
        var wasVisible = this.get('_isVisible');
        var assessmentModel = Adapt.assessment.get(this.get('_assessmentId'));
        if (!assessmentModel || assessmentModel.length === 0) return;
        var state = assessmentModel.getState();
        var isComplete = state.isComplete;
        var isAttemptInProgress = state.attemptInProgress;
        var attemptsSpent = state.attemptsSpent;
        var hasHadAttempt = !isAttemptInProgress && attemptsSpent > 0;
        var isVisible = isVisibleBeforeCompletion && !isComplete || hasHadAttempt;
        if (!wasVisible && isVisible) isVisible = (_readOnlyError("isVisible"), false);
        this.toggleVisibility(isVisible);
      }
    }, {
      key: "toggleVisibility",
      value: function toggleVisibility(isVisible) {
        if (isVisible === undefined) {
          isVisible = !this.get('_isVisible');
        }

        this.set('_isVisible', isVisible, {
          pluginName: 'assessmentResults'
        });
      }
    }, {
      key: "checkCompletion",
      value: function checkCompletion() {
        if (this.get('_setCompletionOn') === 'pass' && !this.get('isPass')) {
          return;
        }

        this.setCompletionStatus();
      }
    }, {
      key: "onAssessmentReset",
      value: function onAssessmentReset(state) {
        if (this.get('_assessmentId') === undefined || this.get('_assessmentId') != state.id) return;
        var resetType = this.get('_resetType');

        if (!resetType || resetType === 'inherit') {
          resetType = state.resetType || 'hard';
        }

        this.reset(resetType, true);
      }
    }, {
      key: "reset",
      value: function reset() {
        var _get3;

        this.set({
          body: this.get('originalBody'),
          state: null,
          feedback: '',
          _feedbackBand: null,
          retryFeedback: '',
          _isRetryEnabled: false
        });

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        (_get3 = _get(_getPrototypeOf(AssessmentResultsModel.prototype), "reset", this)).call.apply(_get3, [this].concat(args));
      }
    }]);

    return AssessmentResultsModel;
  }(ComponentModel$1);

  var AssessmentResultsModel$1 = __AMD("components/adapt-contrib-assessmentResults/js/assessmentResultsModel", AssessmentResultsModel);

  var AssessmentResultsView = function (_ComponentView) {
    _inherits(AssessmentResultsView, _ComponentView);

    var _super = _createSuper(AssessmentResultsView);

    function AssessmentResultsView() {
      _classCallCheck(this, AssessmentResultsView);

      return _super.apply(this, arguments);
    }

    _createClass(AssessmentResultsView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-assessment-retry-btn': 'onRetryClicked'
        };
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.model.setLocking('_isVisible', false);
        this.listenTo(Adapt.parentView, 'preRemove', function () {
          this.model.unsetLocking('_isVisible');
        });
        this.listenTo(this.model, {
          'change:_feedbackBand': this.addClassesToArticle,
          'change:body': this.render
        });
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.model.checkIfAssessmentComplete();
        this.setReadyStatus();
        this.setupInviewCompletion('.component__inner', this.model.checkCompletion.bind(this.model));
      }
    }, {
      key: "onRetryClicked",
      value: function onRetryClicked() {
        var _this = this;

        var state = this.model.get('_state');
        Adapt.assessment.get(state.id).reset(null, function (wasReset) {
          if (!wasReset) {
            return;
          }

          if (_this.model.get('_retry')._routeToAssessment === true) {
            Adapt.navigateToElement('.' + state.articleId);
          }
        });
      }
    }, {
      key: "addClassesToArticle",
      value: function addClassesToArticle(model, value) {
        if (!value || !value._classes) return;
        this.$el.parents('.article').addClass(value._classes);
      }
    }]);

    return AssessmentResultsView;
  }(ComponentView$1);

  AssessmentResultsView.template = 'assessmentResults';
  var AssessmentResultsView$1 = __AMD("components/adapt-contrib-assessmentResults/js/assessmentResultsView", AssessmentResultsView);

  __AMD("components/adapt-contrib-assessmentResults/js/adapt-contrib-assessmentResults", Adapt.register("assessmentResults", {
    model: AssessmentResultsModel$1,
    view: AssessmentResultsView$1
  }));

  var BlankView = ComponentView$1.extend({
    preRender: function () {
      this.checkIfResetOnRevisit();
    },
    postRender: function () {
      this.setReadyStatus();
      this.setupInviewCompletion();
    },
    checkIfResetOnRevisit: function () {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    }
  });
  __AMD("components/adapt-contrib-blank/js/adapt-contrib-blank", Adapt.register('blank', {
    model: ComponentModel$1.extend({}),
    view: BlankView
  }));

  var BUTTON_STATE = ENUM(['SUBMIT', 'CORRECT', 'INCORRECT', 'SHOW_CORRECT_ANSWER', 'HIDE_CORRECT_ANSWER', 'SHOW_FEEDBACK', 'RESET']);
  var BUTTON_STATE$1 = __AMD("core/js/enums/buttonStateEnum", BUTTON_STATE);

  var textPropertyName = {
    'SUBMIT': 'submit',
    'CORRECT': 'correct',
    'INCORRECT': 'incorrect',
    'SHOW_CORRECT_ANSWER': 'showCorrectAnswer',
    'HIDE_CORRECT_ANSWER': 'hideCorrectAnswer',
    'SHOW_FEEDBACK': 'showFeedback',
    'RESET': 'reset'
  };
  var ButtonsView = __AMD("core/js/views/buttonsView", function (_Backbone$View) {
    _inherits(ButtonsView, _Backbone$View);

    var _super = _createSuper(ButtonsView);

    function ButtonsView() {
      _classCallCheck(this, ButtonsView);

      return _super.apply(this, arguments);
    }

    _createClass(ButtonsView, [{
      key: "initialize",
      value: function initialize(options) {
        this.parent = options.parent;
        this.listenTo(Adapt.parentView, 'postRemove', this.remove);
        this.listenTo(this.model, {
          'change:_buttonState': this.onButtonStateChanged,
          'change:feedbackMessage': this.onFeedbackMessageChanged,
          'change:_attemptsLeft': this.onAttemptsChanged,
          'change:_canSubmit': this.onCanSubmitChange
        });
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-btn-action': 'onActionClicked',
          'click .js-btn-feedback': 'onFeedbackClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var data = this.model.toJSON();
        var template = Handlebars.templates.buttons;

        _.defer(function () {
          _this.postRender();

          Adapt.trigger('buttonsView:postRender', _this);
        });

        this.$el.html(template(data));
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.refresh();
      }
    }, {
      key: "checkResetSubmittedState",
      value: function checkResetSubmittedState() {
        var isSubmitted = this.model.get('_isSubmitted');

        if (isSubmitted) {
          this.$el.addClass('is-submitted');
          return;
        }

        this.$('.js-btn-marking').removeClass('is-incorrect is-correct').addClass('u-display-none');
        this.$el.removeClass('is-submitted');
        this.model.set('feedbackMessage', undefined);
        Adapt.a11y.toggleEnabled(this.$('.js-btn-feedback'), false);
      }
    }, {
      key: "onActionClicked",
      value: function onActionClicked() {
        var buttonState = BUTTON_STATE$1(this.model.get('_buttonState'));
        this.trigger('buttons:stateUpdate', buttonState);
        this.checkResetSubmittedState();

        if (buttonState === BUTTON_STATE$1.SHOW_CORRECT_ANSWER) {
          var _this$model$getCorrec, _this$model;

          var correctAnswer = (_this$model$getCorrec = (_this$model = this.model).getCorrectAnswerAsText) === null || _this$model$getCorrec === void 0 ? void 0 : _this$model$getCorrec.call(_this$model);
          this.updateAnswerLiveRegion(correctAnswer);
        }

        if (buttonState === BUTTON_STATE$1.HIDE_CORRECT_ANSWER) {
          var _this$model$getUserAn, _this$model2;

          var userAnswer = (_this$model$getUserAn = (_this$model2 = this.model).getUserAnswerAsText) === null || _this$model$getUserAn === void 0 ? void 0 : _this$model$getUserAn.call(_this$model2);
          this.updateAnswerLiveRegion(userAnswer);
        }
      }
    }, {
      key: "onFeedbackClicked",
      value: function onFeedbackClicked() {
        this.trigger('buttons:stateUpdate', BUTTON_STATE$1.SHOW_FEEDBACK);
      }
    }, {
      key: "onFeedbackMessageChanged",
      value: function onFeedbackMessageChanged(model, changedAttribute) {
        if (changedAttribute && this.model.get('_canShowFeedback')) {
          Adapt.a11y.toggleEnabled(this.$('.js-btn-feedback'), true);
          return;
        }

        Adapt.a11y.toggleEnabled(this.$('.js-btn-feedback'), false);
      }
    }, {
      key: "onCanSubmitChange",
      value: function onCanSubmitChange() {
        this.onButtonStateChanged(this.model, this.model.get('_buttonState'));
      }
    }, {
      key: "onButtonStateChanged",
      value: function onButtonStateChanged(model, changedAttribute) {
        this.updateAttemptsCount();
        var $buttonsAction = this.$('.js-btn-action');
        var buttonState = BUTTON_STATE$1(changedAttribute);

        if (changedAttribute === BUTTON_STATE$1.CORRECT || changedAttribute === BUTTON_STATE$1.INCORRECT) {
          Adapt.a11y.toggleEnabled($buttonsAction, false);
          return;
        }

        var propertyName = textPropertyName[buttonState.asString];
        var ariaLabel = this.model.get('_buttons')['_' + propertyName].ariaLabel;
        var buttonText = this.model.get('_buttons')['_' + propertyName].buttonText;
        Adapt.a11y.toggleEnabled($buttonsAction, this.model.get('_canSubmit'));
        $buttonsAction.html(buttonText).attr('aria-label', ariaLabel);
      }
    }, {
      key: "checkFeedbackState",
      value: function checkFeedbackState() {
        var canShowFeedback = this.model.get('_canShowFeedback');
        this.$('.js-btn-action').toggleClass('is-full-width', !canShowFeedback);
        this.$('.js-btn-feedback').toggleClass('u-display-none', !canShowFeedback);
        this.$('.js-btn-marking').toggleClass('is-full-width u-display-none', !canShowFeedback);
      }
    }, {
      key: "updateAttemptsCount",
      value: function updateAttemptsCount() {
        var isInteractionComplete = this.model.get('_isInteractionComplete');
        var attemptsLeft = this.model.get('_attemptsLeft') ? this.model.get('_attemptsLeft') : this.model.get('_attempts');
        var shouldDisplayAttempts = this.model.get('_shouldDisplayAttempts');
        var attemptsString;
        this.checkResetSubmittedState();

        if (!isInteractionComplete && attemptsLeft !== 0) {
          attemptsString = attemptsLeft + ' ';
          attemptsString += attemptsLeft === 1 ? this.model.get('_buttons').remainingAttemptText : this.model.get('_buttons').remainingAttemptsText;
        } else {
          this.$('.js-display-attempts').addClass('u-visibility-hidden');
          this.showMarking();
        }

        if (shouldDisplayAttempts) {
          this.$('.js-insert-attempts-string').html(attemptsString);
        }
      }
    }, {
      key: "updateAnswerLiveRegion",
      value: function updateAnswerLiveRegion(answer) {
        if (!answer) return;
        this.$('.js-answer-live-region').html(answer);
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        if (!this.model.shouldShowMarking) return;
        var isCorrect = this.model.get('_isCorrect');

        var ariaLabels = Adapt.course.get('_globals')._accessibility._ariaLabels;

        this.$('.js-btn-marking').removeClass('u-display-none').addClass(isCorrect ? 'is-correct' : 'is-incorrect').attr('aria-label', isCorrect ? ariaLabels.answeredCorrectly : ariaLabels.answeredIncorrectly);
      }
    }, {
      key: "refresh",
      value: function refresh() {
        this.updateAttemptsCount();
        this.checkResetSubmittedState();
        this.checkFeedbackState();
        this.onButtonStateChanged(null, this.model.get('_buttonState'));
        this.onFeedbackMessageChanged(null, this.model.get('feedbackMessage'));
      }
    }]);

    return ButtonsView;
  }(Backbone.View));

  var QuestionModel = function (_ComponentModel) {
    _inherits(QuestionModel, _ComponentModel);

    var _super = _createSuper(QuestionModel);

    function QuestionModel() {
      _classCallCheck(this, QuestionModel);

      return _super.apply(this, arguments);
    }

    _createClass(QuestionModel, [{
      key: "defaults",
      value: function defaults() {
        return ComponentModel$1.resultExtend('defaults', {
          _isQuestionType: true,
          _shouldDisplayAttempts: false,
          _canShowModelAnswer: true,
          _canShowFeedback: true,
          _canShowMarking: true,
          _canSubmit: true,
          _isSubmitted: false,
          _questionWeight: Adapt.config.get('_questionWeight'),
          _items: []
        });
      }
    }, {
      key: "trackable",
      value: function trackable() {
        return ComponentModel$1.resultExtend('trackable', ['_isSubmitted', '_score', '_isCorrect', '_attemptsLeft']);
      }
    }, {
      key: "trackableType",
      value: function trackableType() {
        return ComponentModel$1.resultExtend('trackableType', [Boolean, Number, Boolean, Number]);
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'question';
      }
    }, {
      key: "init",
      value: function init() {
        this.setupDefaultSettings();
        this.setLocking('_canSubmit', true);

        _get(_getPrototypeOf(QuestionModel.prototype), "init", this).call(this);
      }
    }, {
      key: "setupDefaultSettings",
      value: function setupDefaultSettings() {
        this.setupWeightSettings();
        this.setupButtonSettings();
      }
    }, {
      key: "setupButtonSettings",
      value: function setupButtonSettings() {
        var globalButtons = Adapt.course.get('_buttons');

        if (!this.has('_buttons')) {
          this.set('_buttons', globalButtons);
        } else {
          var componentButtons = this.get('_buttons');

          for (var key in componentButtons) {
            if (_typeof(componentButtons[key]) === 'object') {
              if (!componentButtons[key].buttonText && globalButtons[key].buttonText) {
                componentButtons[key].buttonText = globalButtons[key].buttonText;
              }

              if (!componentButtons[key].ariaLabel && globalButtons[key].ariaLabel) {
                componentButtons[key].ariaLabel = globalButtons[key].ariaLabel;
              }
            }

            if (!componentButtons[key] && globalButtons[key]) {
              componentButtons[key] = globalButtons[key];
            }
          }
        }
      }
    }, {
      key: "setupWeightSettings",
      value: function setupWeightSettings() {}
    }, {
      key: "canSubmit",
      value: function canSubmit() {}
    }, {
      key: "checkCanSubmit",
      value: function checkCanSubmit() {
        this.set('_canSubmit', this.canSubmit(), {
          pluginName: 'adapt'
        });
      }
    }, {
      key: "updateAttempts",
      value: function updateAttempts() {
        if (!this.get('_attemptsLeft')) {
          this.set('_attemptsLeft', this.get('_attempts'));
        }

        this.set('_attemptsLeft', this.get('_attemptsLeft') - 1);
      }
    }, {
      key: "setQuestionAsSubmitted",
      value: function setQuestionAsSubmitted() {
        this.set({
          _isEnabled: false,
          _isSubmitted: true
        });
      }
    }, {
      key: "markQuestion",
      value: function markQuestion() {
        if (this.isCorrect()) {
          this.set('_isCorrect', true);
        } else {
          this.set('_isCorrect', false);
        }
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {}
    }, {
      key: "setScore",
      value: function setScore() {}
    }, {
      key: "checkQuestionCompletion",
      value: function checkQuestionCompletion() {
        var isComplete = this.get('_isCorrect') || this.get('_attemptsLeft') === 0;

        if (isComplete) {
          this.setCompletionStatus();
        }

        return isComplete;
      }
    }, {
      key: "updateButtons",
      value: function updateButtons() {
        var isInteractionComplete = this.get('_isInteractionComplete');
        var isCorrect = this.get('_isCorrect');
        var isEnabled = this.get('_isEnabled');
        var buttonState = this.get('_buttonState');
        var canShowModelAnswer = this.get('_canShowModelAnswer');

        if (isInteractionComplete) {
          if (isCorrect || !canShowModelAnswer) {
            this.set('_buttonState', BUTTON_STATE$1.CORRECT);
          } else {
            switch (buttonState) {
              case BUTTON_STATE$1.SUBMIT:
              case BUTTON_STATE$1.HIDE_CORRECT_ANSWER:
                this.set('_buttonState', BUTTON_STATE$1.SHOW_CORRECT_ANSWER);
                break;

              default:
                this.set('_buttonState', BUTTON_STATE$1.HIDE_CORRECT_ANSWER);
            }
          }
        } else {
          if (isEnabled) {
            this.set('_buttonState', BUTTON_STATE$1.SUBMIT);
          } else {
            this.set('_buttonState', BUTTON_STATE$1.RESET);
          }
        }
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (!this.has('_feedback')) return;

        if (this.get('_isCorrect')) {
          this.setupCorrectFeedback();
        } else if (this.isPartlyCorrect()) {
          this.setupPartlyCorrectFeedback();
        } else {
          this.setupIncorrectFeedback();
        }
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {}
    }, {
      key: "setupCorrectFeedback",
      value: function setupCorrectFeedback() {
        this.set({
          feedbackTitle: this.getFeedbackTitle(),
          feedbackMessage: this.get('_feedback').correct
        });
      }
    }, {
      key: "setupPartlyCorrectFeedback",
      value: function setupPartlyCorrectFeedback() {
        var feedback = this.get('_feedback')._partlyCorrect;

        if (feedback !== null && feedback !== void 0 && feedback.final) {
          this.setAttemptSpecificFeedback(feedback);
        } else {
          this.setupIncorrectFeedback();
        }
      }
    }, {
      key: "setupIncorrectFeedback",
      value: function setupIncorrectFeedback() {
        this.setAttemptSpecificFeedback(this.get('_feedback')._incorrect);
      }
    }, {
      key: "setAttemptSpecificFeedback",
      value: function setAttemptSpecificFeedback(feedback) {
        var body = this.get('_attemptsLeft') && feedback.notFinal || feedback.final;
        this.set({
          feedbackTitle: this.getFeedbackTitle(),
          feedbackMessage: body
        });
      }
    }, {
      key: "getFeedbackTitle",
      value: function getFeedbackTitle() {
        return this.get('_feedback').title || this.get('displayTitle') || this.get('title') || '';
      }
    }, {
      key: "isInteractive",
      value: function isInteractive() {
        return !this.get('_isComplete') || this.get('_isEnabled') && !this.get('_isSubmitted');
      }
    }, {
      key: "reset",
      value: function reset(type, force) {
        if (!this.get('_canReset') && !force) return;
        type = type || true;

        _get(_getPrototypeOf(QuestionModel.prototype), "reset", this).call(this, type, force);

        var attempts = this.get('_attempts');
        this.set({
          _attemptsLeft: attempts,
          _isCorrect: undefined,
          _isSubmitted: false,
          _buttonState: BUTTON_STATE$1.SUBMIT
        });
      }
    }, {
      key: "setQuestionAsReset",
      value: function setQuestionAsReset() {
        this.set({
          _isEnabled: true,
          _isSubmitted: false
        });
      }
    }, {
      key: "refresh",
      value: function refresh() {
        this.trigger('question:refresh');
      }
    }, {
      key: "getButtonState",
      value: function getButtonState() {
        if (this.get('_isCorrect')) {
          return BUTTON_STATE$1.CORRECT;
        }

        if (this.get('_attemptsLeft') === 0) {
          return this.get('_canShowModelAnswer') ? BUTTON_STATE$1.SHOW_CORRECT_ANSWER : BUTTON_STATE$1.INCORRECT;
        }

        return this.get('_isSubmitted') ? BUTTON_STATE$1.RESET : BUTTON_STATE$1.SUBMIT;
      }
    }, {
      key: "getInteractionObject",
      value: function getInteractionObject() {
        return {};
      }
    }, {
      key: "getResponse",
      value: function getResponse() {}
    }, {
      key: "getResponseType",
      value: function getResponseType() {}
    }, {
      key: "onSubmitted",
      value: function onSubmitted() {
        this.addAttemptObject();
      }
    }, {
      key: "shouldShowMarking",
      get: function () {
        if (!this.get('_canShowMarking')) {
          return false;
        }

        return this.get('_isInteractionComplete');
      }
    }]);

    return QuestionModel;
  }(ComponentModel$1);

  Adapt.register('question', {
    model: QuestionModel
  });
  var QuestionModel$1 = __AMD("core/js/models/questionModel", QuestionModel);

  var QuestionView = function (_ComponentView) {
    _inherits(QuestionView, _ComponentView);

    var _super = _createSuper(QuestionView);

    function QuestionView() {
      _classCallCheck(this, QuestionView);

      return _super.apply(this, arguments);
    }

    _createClass(QuestionView, [{
      key: "className",
      value: function className() {
        return ['component', 'is-question', this.model.get('_component').toLowerCase(), this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), 'is-' + this.model.get('_layout'), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : '', this.model.get('_canShowModelAnswer') ? 'can-show-model-answer' : '', this.model.get('_canShowFeedback') ? 'can-show-feedback' : '', this.model.get('_canShowMarking') ? 'can-show-marking' : ''].join(' ');
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get2;

        this.isInteractive = this.isInteractive.bind(this);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(QuestionView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "isInteractive",
      value: function isInteractive() {
        return this.model.isInteractive();
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.listenTo(this.model, 'change:_isEnabled', this.onEnabledChanged);
        this.listenTo(this.model, 'question:refresh', this.refresh);
        this.checkIfResetOnRevisit();

        this._runModelCompatibleFunction('setupDefaultSettings');

        this.setupQuestion();
      }
    }, {
      key: "onEnabledChanged",
      value: function onEnabledChanged(model, changedAttribute) {
        if (!changedAttribute) {
          this.$('.component__widget').addClass('is-disabled');
          this.disableQuestion();
        } else {
          this.$('.component__widget').removeClass('is-disabled');
          this.enableQuestion();
        }
      }
    }, {
      key: "disableQuestion",
      value: function disableQuestion() {}
    }, {
      key: "enableQuestion",
      value: function enableQuestion() {}
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var _this = this;

        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit, true);

          _.defer(function () {
            _this.resetQuestionOnRevisit(isResetOnRevisit);
          });

          return;
        }

        var isInteractionComplete = this.model.get('_isInteractionComplete');

        if (isInteractionComplete) {
          this.model.set('_buttonState', BUTTON_STATE$1.HIDE_CORRECT_ANSWER);

          _.defer(function () {
            _this.onHideCorrectAnswerClicked();
          });

          return;
        }

        this.model.set('_buttonState', BUTTON_STATE$1.SUBMIT);

        _.defer(function () {
          _this.onResetClicked();
        });
      }
    }, {
      key: "resetQuestionOnRevisit",
      value: function resetQuestionOnRevisit(type) {}
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {}
    }, {
      key: "postRender",
      value: function postRender() {
        this.addButtonsView();
        this.onQuestionRendered();
      }
    }, {
      key: "addButtonsView",
      value: function addButtonsView() {
        this.buttonsView = new ButtonsView({
          model: this.model,
          el: this.$('.btn__container')
        });
        this.listenTo(this.buttonsView, 'buttons:stateUpdate', this.onButtonStateUpdate);
      }
    }, {
      key: "onButtonStateUpdate",
      value: function onButtonStateUpdate(buttonState) {
        switch (buttonState) {
          case BUTTON_STATE$1.SUBMIT:
            this.onSubmitClicked();
            break;

          case BUTTON_STATE$1.RESET:
            this.onResetClicked();
            break;

          case BUTTON_STATE$1.SHOW_CORRECT_ANSWER:
            this.onShowCorrectAnswerClicked();
            break;

          case BUTTON_STATE$1.HIDE_CORRECT_ANSWER:
            this.onHideCorrectAnswerClicked();
            break;

          case BUTTON_STATE$1.SHOW_FEEDBACK:
            this.showFeedback();
            break;
        }
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {}
    }, {
      key: "onSubmitClicked",
      value: function onSubmitClicked() {
        var canSubmit = this._runModelCompatibleFunction('canSubmit');

        if (!canSubmit) {
          this.showInstructionError();
          this.onCannotSubmit();
          return;
        }

        this._runModelCompatibleFunction('updateAttempts');

        this._runModelCompatibleFunction('setQuestionAsSubmitted');

        this.removeInstructionError();

        this._runModelCompatibleFunction('storeUserAnswer');

        this._runModelCompatibleFunction('markQuestion', 'isCorrect');

        this._runModelCompatibleFunction('setScore');

        this._runModelCompatibleFunction('checkQuestionCompletion');

        if (this.model.shouldShowMarking) {
          this.showMarking();
        }

        this.recordInteraction();

        this._runModelCompatibleFunction('setupFeedback');

        this.showFeedback();
        $(window).resize();

        this._runModelCompatibleFunction('updateButtons');

        this.model.onSubmitted();
        this.onSubmitted();
      }
    }, {
      key: "showInstructionError",
      value: function showInstructionError() {
        Adapt.trigger('questionView:showInstructionError', this);
      }
    }, {
      key: "onCannotSubmit",
      value: function onCannotSubmit() {}
    }, {
      key: "onSubmitted",
      value: function onSubmitted() {}
    }, {
      key: "setQuestionAsSubmitted",
      value: function setQuestionAsSubmitted() {
        this.model.setQuestionAsSubmitted();
        this.$('.component__widget').addClass('is-submitted');
      }
    }, {
      key: "removeInstructionError",
      value: function removeInstructionError() {
        this.$('.component__instruction-inner').removeClass('validation-error');
      }
    }, {
      key: "showMarking",
      value: function showMarking() {}
    }, {
      key: "checkQuestionCompletion",
      value: function checkQuestionCompletion() {
        var isComplete = this.model.checkQuestionCompletion();

        if (isComplete) {
          this.$('.component__widget').addClass('is-complete show-user-answer');
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this.model.get('_recordInteraction') === true || !this.model.has('_recordInteraction')) {
          Adapt.trigger('questionView:recordInteraction', this);
        }
      }
    }, {
      key: "showFeedback",
      value: function showFeedback() {
        if (this.model.get('_canShowFeedback')) {
          Adapt.trigger('questionView:showFeedback', this);
        } else {
          Adapt.trigger('questionView:disabledFeedback', this);
        }
      }
    }, {
      key: "onResetClicked",
      value: function onResetClicked() {
        this.setQuestionAsReset();

        this._runModelCompatibleFunction('resetUserAnswer');

        this.resetQuestion();
        this.model.checkCanSubmit();

        this._runModelCompatibleFunction('updateButtons');

        if (!this.model.get('_isReady')) return;
        var currentModel = Adapt.findById(Adapt.location._currentId);
        if (!(currentModel !== null && currentModel !== void 0 && currentModel.get('_isReady'))) return;
        Adapt.a11y.focusNext(this.$el);
      }
    }, {
      key: "setQuestionAsReset",
      value: function setQuestionAsReset() {
        this.model.setQuestionAsReset();
        this.$('.component__widget').removeClass('is-submitted');
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {}
    }, {
      key: "refresh",
      value: function refresh() {
        this.model.set('_buttonState', this.model.getButtonState());

        if (this.model.shouldShowMarking && this.model.get('_isSubmitted')) {
          this.showMarking();
        }

        if (this.buttonsView) {
          _.defer(this.buttonsView.refresh.bind(this.buttonsView));
        }
      }
    }, {
      key: "onShowCorrectAnswerClicked",
      value: function onShowCorrectAnswerClicked() {
        this.setQuestionAsShowCorrect();

        this._runModelCompatibleFunction('updateButtons');

        this.showCorrectAnswer();
      }
    }, {
      key: "setQuestionAsShowCorrect",
      value: function setQuestionAsShowCorrect() {
        this.$('.component__widget').addClass('is-submitted show-correct-answer').removeClass('show-user-answer');
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {}
    }, {
      key: "onHideCorrectAnswerClicked",
      value: function onHideCorrectAnswerClicked() {
        this.setQuestionAsHideCorrect();

        this._runModelCompatibleFunction('updateButtons');

        this.hideCorrectAnswer();
      }
    }, {
      key: "setQuestionAsHideCorrect",
      value: function setQuestionAsHideCorrect() {
        this.$('.component__widget').addClass('is-submitted show-user-answer').removeClass('show-correct-answer');
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {}
    }, {
      key: "getLatency",
      value: function getLatency() {
        return null;
      }
    }, {
      key: "_runModelCompatibleFunction",
      value: function _runModelCompatibleFunction(name, lookForViewOnlyFunction) {
        return this.model[name]();
      }
    }]);

    return QuestionView;
  }(ComponentView$1);

  QuestionView._isQuestionType = true;

  var ViewOnlyQuestionViewCompatibilityLayer = function (_QuestionView) {
    _inherits(ViewOnlyQuestionViewCompatibilityLayer, _QuestionView);

    var _super2 = _createSuper(ViewOnlyQuestionViewCompatibilityLayer);

    function ViewOnlyQuestionViewCompatibilityLayer() {
      _classCallCheck(this, ViewOnlyQuestionViewCompatibilityLayer);

      return _super2.apply(this, arguments);
    }

    _createClass(ViewOnlyQuestionViewCompatibilityLayer, [{
      key: "getInteractionObject",
      value: function getInteractionObject() {
        Adapt.log.deprecated('QuestionView.getInteractionObject, please use QuestionModel.getInteractionObject');
        return this.model.getInteractionObject();
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        Adapt.log.deprecated('QuestionView.getInteractionObject, please use QuestionModel.getInteractionObject');
        return this.model.getResponse();
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        Adapt.log.deprecated('QuestionView.getResponseType, please use QuestionModel.getResponseType');
        return this.model.getResponseType();
      }
    }, {
      key: "setupDefaultSettings",
      value: function setupDefaultSettings() {
        Adapt.log.deprecated('QuestionView.setupDefaultSettings, please use QuestionModel.setupDefaultSettings');
        return this.model.setupDefaultSettings();
      }
    }, {
      key: "setupButtonSettings",
      value: function setupButtonSettings() {
        Adapt.log.deprecated('QuestionView.setupButtonSettings, please use QuestionModel.setupButtonSettings');
        return this.model.setupButtonSettings();
      }
    }, {
      key: "setupWeightSettings",
      value: function setupWeightSettings() {
        Adapt.log.deprecated('QuestionView.setupWeightSettings, please use QuestionModel.setupWeightSettings');
        return this.model.setupWeightSettings();
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        Adapt.log.deprecated('QuestionView.canSubmit, please use QuestionModel.canSubmit');
        return this.model.canSubmit();
      }
    }, {
      key: "updateAttempts",
      value: function updateAttempts() {
        Adapt.log.deprecated('QuestionView.updateAttempts, please use QuestionModel.updateAttempts');
        return this.model.updateAttempts();
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        Adapt.log.deprecated('QuestionView.storeUserAnswer, please use QuestionModel.storeUserAnswer');
        return this.model.storeUserAnswer();
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        Adapt.log.deprecated('QuestionView.resetUserAnswer, please use QuestionModel.resetUserAnswer');
        return this.model.resetUserAnswer();
      }
    }, {
      key: "markQuestion",
      value: function markQuestion() {
        if (this._isInViewOnlyCompatibleMode('isCorrect')) {
          if (this.isCorrect()) {
            this.model.set('_isCorrect', true);
          } else {
            this.model.set('_isCorrect', false);
          }
        } else {
          return this.model.markQuestion();
        }
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        Adapt.log.deprecated('QuestionView.isCorrect, please use QuestionModel.isCorrect');
        return this.model.isCorrect();
      }
    }, {
      key: "setScore",
      value: function setScore() {
        Adapt.log.deprecated('QuestionView.setScore, please use QuestionModel.setScore');
        return this.model.setScore();
      }
    }, {
      key: "updateButtons",
      value: function updateButtons() {
        Adapt.log.deprecated('QuestionView.updateButtons, please use QuestionModel.updateButtons');
        return this.model.updateButtons();
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (this._isInViewOnlyCompatibleMode('isPartlyCorrect')) {
          if (this.model.get('_isCorrect')) {
            this._runModelCompatibleFunction('setupCorrectFeedback');
          } else if (this.isPartlyCorrect()) {
            this._runModelCompatibleFunction('setupPartlyCorrectFeedback');
          } else {
            this._runModelCompatibleFunction('setupIncorrectFeedback');
          }
        } else {
          this.model.setupFeedback();
        }
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        Adapt.log.deprecated('QuestionView.isPartlyCorrect, please use QuestionModel.isPartlyCorrect');
        return this.model.isPartlyCorrect();
      }
    }, {
      key: "setupCorrectFeedback",
      value: function setupCorrectFeedback() {
        Adapt.log.deprecated('QuestionView.setupCorrectFeedback, please use QuestionModel.setupCorrectFeedback');
        return this.model.setupCorrectFeedback();
      }
    }, {
      key: "setupPartlyCorrectFeedback",
      value: function setupPartlyCorrectFeedback() {
        Adapt.log.deprecated('QuestionView.setupPartlyCorrectFeedback, please use QuestionModel.setupPartlyCorrectFeedback');
        return this.model.setupPartlyCorrectFeedback();
      }
    }, {
      key: "setupIncorrectFeedback",
      value: function setupIncorrectFeedback() {
        Adapt.log.deprecated('QuestionView.setupIncorrectFeedback, please use QuestionModel.setupIncorrectFeedback');
        return this.model.setupIncorrectFeedback();
      }
    }, {
      key: "_runModelCompatibleFunction",
      value: function _runModelCompatibleFunction(name, lookForViewOnlyFunction) {
        if (this._isInViewOnlyCompatibleMode(name, lookForViewOnlyFunction)) {
          return this[name]();
        } else {
          return this.model[name]();
        }
      }
    }, {
      key: "_isInViewOnlyCompatibleMode",
      value: function _isInViewOnlyCompatibleMode(name, lookForViewOnlyFunction) {
        var checkForFunction = lookForViewOnlyFunction || name;
        if (!this.constructor.prototype[checkForFunction]) return false;
        var hasCompatibleVersion = ViewOnlyQuestionViewCompatibilityLayer.prototype.hasOwnProperty(checkForFunction);
        var usingCompatibleVersion = this.constructor.prototype[checkForFunction] === ViewOnlyQuestionViewCompatibilityLayer.prototype[checkForFunction];

        if (hasCompatibleVersion && usingCompatibleVersion) {
          switch (checkForFunction) {
            case 'setupFeedback':
            case 'markQuestion':
              return true;
          }

          return false;
        }

        return true;
      }
    }]);

    return ViewOnlyQuestionViewCompatibilityLayer;
  }(QuestionView);
  var QuestionView$1 = __AMD("core/js/views/questionView", ViewOnlyQuestionViewCompatibilityLayer);

  var McqView = QuestionView$1.extend({
    events: {
      'focus .js-item-input': 'onItemFocus',
      'blur .js-item-input': 'onItemBlur',
      'change .js-item-input': 'onItemSelect',
      'keyup .js-item-input': 'onKeyPress'
    },
    isCorrectAnswerShown: false,
    initialize: function () {
      QuestionView$1.prototype.initialize.apply(this, arguments);
      this.update = _.debounce(this.update.bind(this), 1);
      this.listenTo(this.model, {
        "change:_isEnabled change:_isComplete change:_isSubmitted": this.update
      });
      this.listenTo(this.model.getChildren(), {
        "change:_isActive": this.update
      });
    },
    resetQuestionOnRevisit: function () {
      this.resetQuestion();
    },
    setupQuestion: function () {
      this.model.setupRandomisation();
      this.model.stopListening(this.model.getChildren(), "change:_isVisited", this.model.checkCompletionStatus);
    },
    onQuestionRendered: function () {
      this.setReadyStatus();
      this.update();
    },
    onKeyPress: function (event) {
      if (event.which !== 13) return;
      this.onItemSelect(event);
    },
    onItemFocus: function (event) {
      if (!this.model.isInteractive()) return;
      $('.js-item-label[for=' + $(event.currentTarget).attr('id') + ']').addClass('is-highlighted');
    },
    onItemBlur: function (event) {
      $('.js-item-label[for=' + $(event.currentTarget).attr('id') + ']').removeClass('is-highlighted');
    },
    onItemSelect: function (event) {
      if (!this.model.isInteractive()) return;
      var index = $(event.currentTarget).data('adapt-index');
      var itemModel = this.model.getItem(index);
      var shouldSelect = !itemModel.get("_isActive");

      if (this.model.isSingleSelect()) {
        shouldSelect = true;
        this.model.resetActiveItems();
      } else if (shouldSelect && this.model.isAtActiveLimit()) {
        this.model.getLastActiveItem().toggleActive(false);
      }

      itemModel.toggleActive(shouldSelect);
    },
    onCannotSubmit: function () {},
    showMarking: function () {
      this.update();
      this.updateMarking();
    },
    resetQuestion: function () {
      this.model.resetActiveItems();
      this.model.resetItems();
    },
    showCorrectAnswer: function () {
      this.isCorrectAnswerShown = true;
      this.update();
    },
    hideCorrectAnswer: function () {
      this.isCorrectAnswerShown = false;
      this.update();
    },
    update: function () {
      this.updateSelection();
    },
    updateSelection: function () {
      var modelEnabled = this.model.get("_isEnabled");
      this.model.getChildren().each(function (itemModel) {
        var isEnabled = !Boolean(itemModel.get("_isCorrect"));
        if (!modelEnabled) isEnabled = false;
        var isSelected = this.isCorrectAnswerShown ? itemModel.get("_shouldBeSelected") : itemModel.get("_isActive");
        var index = itemModel.get('_index');
        this.$('.js-item-label').filter('[data-adapt-index="' + index + '"]').toggleClass('is-selected', isSelected).toggleClass('is-disabled', !isEnabled).find(".mcq__item-answer-icon, .mcqcode__item-answer-icon").toggleClass('is-disabled', !isEnabled);
        this.$('.js-item-input').filter('[data-adapt-index="' + index + '"]').prop('checked', isSelected).prop('disabled', !isEnabled);
      }.bind(this));
    },
    getItemElement: function (model) {
      var index = model.get('_index');
      return this.$('.js-mcq-item').filter('[data-adapt-index="' + index + '"]');
    },
    updateMarking: function () {
      var _this = this;

      this.model.isInteractive();
      var canShowMarking = this.model.get('_canShowMarking');

      var ariaLabels = Adapt.course.get('_globals')._accessibility._ariaLabels;

      this.model.getChildren().each(function (itemModel) {
        var index = itemModel.get('_index');

        var $itemInput = _this.$('.js-item-input').filter('[data-adapt-index="' + index + '"]');

        var $item = _this.getItemElement(itemModel);

        var shouldBeSelected = itemModel.get("_shouldBeSelected");
        var isCorrect = Boolean(itemModel.get("_isCorrect"));
        var isActive = Boolean(itemModel.get("_isActive"));
        if (isActive) itemModel.set("_isVisited", true);
        var isVisited = Boolean(itemModel.get("_isVisited"));

        if (!isVisited || !canShowMarking) {
          $item.removeClass('is-correct is-incorrect');
          $itemInput.attr('aria-label', $.a11y_normalize(itemModel.get("text")));
          return;
        }

        if (!isActive) return;
        $item.toggleClass('is-correct', isCorrect).toggleClass('is-incorrect', !isCorrect);
        var $itemlabel = $item.find(".js-item-label");
        $itemlabel.toggleClass('is-correct', isCorrect).toggleClass('is-incorrect', !isCorrect);
        $itemInput.attr('aria-label', [shouldBeSelected ? ariaLabels.correct : ariaLabels.incorrect, ", ", isActive ? ariaLabels.selectedAnswer : ariaLabels.unselectedAnswer, ". ", $.a11y_normalize(itemModel.get("text"))].join(""));
      });
      this.updateSelection();
    }
  });
  var McqView$1 = __AMD("components/adapt-contrib-mcq/js/mcqView", McqView);

  var BlendedItemsComponentQuestionModel = function (_QuestionModel) {
    _inherits(BlendedItemsComponentQuestionModel, _QuestionModel);

    var _super = _createSuper(BlendedItemsComponentQuestionModel);

    function BlendedItemsComponentQuestionModel() {
      _classCallCheck(this, BlendedItemsComponentQuestionModel);

      return _super.apply(this, arguments);
    }

    _createClass(BlendedItemsComponentQuestionModel, [{
      key: "init",
      value: function init() {
        ItemsComponentModel.prototype.init.call(this);

        _get(_getPrototypeOf(BlendedItemsComponentQuestionModel.prototype), "init", this).call(this);
      }
    }, {
      key: "reset",
      value: function reset(type, force) {
        ItemsComponentModel.prototype.reset.call(this, type, force);

        _get(_getPrototypeOf(BlendedItemsComponentQuestionModel.prototype), "reset", this).call(this, type, force);
      }
    }]);

    return BlendedItemsComponentQuestionModel;
  }(QuestionModel$1);

  Object.getOwnPropertyNames(ItemsComponentModel.prototype).forEach(function (name) {
    if (name === 'constructor' || name === 'init' || name === 'reset') return;
    Object.defineProperty(BlendedItemsComponentQuestionModel.prototype, name, {
      value: ItemsComponentModel.prototype[name]
    });
  });
  var ItemsQuestionModel = __AMD("core/js/models/itemsQuestionModel", function (_BlendedItemsComponen) {
    _inherits(ItemsQuestionModel, _BlendedItemsComponen);

    var _super2 = _createSuper(ItemsQuestionModel);

    function ItemsQuestionModel() {
      _classCallCheck(this, ItemsQuestionModel);

      return _super2.apply(this, arguments);
    }

    _createClass(ItemsQuestionModel, [{
      key: "init",
      value: function init() {
        _get(_getPrototypeOf(ItemsQuestionModel.prototype), "init", this).call(this);

        this.set('_isRadio', this.isSingleSelect());
        this.listenTo(this.getChildren(), 'change:_isActive', this.checkCanSubmit);
        this.checkCanSubmit();
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        if (!this.get('_isSubmitted')) return;
        var itemModels = this.getChildren();
        var userAnswer = this.get('_userAnswer');
        itemModels.each(function (item) {
          item.toggleActive(userAnswer[item.get('_index')]);
        });
        this.setQuestionAsSubmitted();
        this.markQuestion();
        this.setScore();
        this.setupFeedback();
      }
    }, {
      key: "setupRandomisation",
      value: function setupRandomisation() {
        if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
        var children = this.getChildren();
        children.set(children.shuffle());
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        var activeItems = this.getActiveItems();
        return activeItems.length > 0;
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var items = this.getChildren().slice(0);
        items.sort(function (a, b) {
          return a.get('_index') - b.get('_index');
        });
        var userAnswer = items.map(function (itemModel) {
          return itemModel.get('_isActive');
        });
        this.set('_userAnswer', userAnswer);
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        var allChildren = this.getChildren();
        var activeChildren = allChildren.filter(function (itemModel) {
          return itemModel.get('_isActive');
        });

        var isItemCorrect = function (itemModel) {
          return itemModel.get('_shouldBeSelected') && !itemModel.get('_isPartlyCorrect');
        };

        var isItemPartlyCorrect = function (itemModel) {
          return itemModel.get('_isPartlyCorrect');
        };

        var isItemIncorrect = function (itemModel) {
          return !itemModel.get('_shouldBeSelected') && !itemModel.get('_isPartlyCorrect');
        };

        var sum = function (list, predicate) {
          return list.reduce(function (sum, item) {
            return sum + (predicate(item) ? 1 : 0);
          }, 0);
        };

        var props = {
          _numberOfRequiredAnswers: sum(allChildren, isItemCorrect),
          _numberOfCorrectAnswers: sum(activeChildren, isItemCorrect),
          _numberOfPartlyCorrectAnswers: sum(activeChildren, isItemPartlyCorrect),
          _numberOfIncorrectAnswers: sum(activeChildren, isItemIncorrect)
        };
        activeChildren.forEach(function (itemModel) {
          return itemModel.set('_isCorrect', itemModel.get('_shouldBeSelected'));
        });
        props._isAtLeastOneCorrectSelection = props._numberOfCorrectAnswers || props._numberOfPartlyCorrectAnswers;
        var numberOfSelectableAnswers = this.get('_selectable');
        var hasSelectableCorrectAnswers = props._numberOfCorrectAnswers === numberOfSelectableAnswers;
        var hasAllCorrectAnswers = props._numberOfCorrectAnswers === props._numberOfRequiredAnswers;
        var hasCorrectAnswers = hasSelectableCorrectAnswers || hasAllCorrectAnswers;
        var hasIncorrectAnswers = props._numberOfIncorrectAnswers;
        var hasPartlyCorrectAnswers = props._numberOfPartlyCorrectAnswers;
        this.set(props);
        return hasCorrectAnswers && !hasIncorrectAnswers && !hasPartlyCorrectAnswers;
      }
    }, {
      key: "setScore",
      value: function setScore() {
        var questionWeight = this.get('_questionWeight');
        var answeredCorrectly = this.get('_isCorrect');
        var score = answeredCorrectly ? questionWeight : 0;
        this.set('_score', score);
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (!this.has('_feedback')) return;

        if (this.get('_isCorrect')) {
          this.setupCorrectFeedback();
          return;
        }

        if (this.isPartlyCorrect()) {
          this.setupPartlyCorrectFeedback();
          return;
        }

        var activeItem = this.getActiveItem();

        if (this.isSingleSelect() && activeItem.get('feedback')) {
          this.setupIndividualFeedback(activeItem);
          return;
        }

        this.setupIncorrectFeedback();
      }
    }, {
      key: "setupIndividualFeedback",
      value: function setupIndividualFeedback(selectedItem) {
        this.set({
          feedbackTitle: this.getFeedbackTitle(this.get('_feedback')),
          feedbackMessage: selectedItem.get('feedback')
        });
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set('_userAnswer', []);
      }
    }, {
      key: "isAtActiveLimit",
      value: function isAtActiveLimit() {
        var selectedItems = this.getActiveItems();
        return selectedItems.length === this.get('_selectable');
      }
    }, {
      key: "isSingleSelect",
      value: function isSingleSelect() {
        return this.get('_selectable') === 1;
      }
    }, {
      key: "getLastActiveItem",
      value: function getLastActiveItem() {
        var selectedItems = this.getActiveItems();
        return selectedItems[selectedItems.length - 1];
      }
    }, {
      key: "resetItems",
      value: function resetItems() {
        this.resetActiveItems();
        this.set('_isAtLeastOneCorrectSelection', false);
      }
    }, {
      key: "getInteractionObject",
      value: function getInteractionObject() {
        var interactions = {
          correctResponsesPattern: [],
          choices: []
        };
        interactions.choices = this.getChildren().map(function (itemModel) {
          return {
            id: (itemModel.get('_index') + 1).toString(),
            description: itemModel.get('text')
          };
        });
        var correctItems = this.getChildren().filter(function (itemModel) {
          return itemModel.get('_shouldBeSelected');
        });
        interactions.correctResponsesPattern = [correctItems.map(function (itemModel) {
          return String(itemModel.get('_index') + 1);
        }).join('[,]')];
        return interactions;
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        var activeItems = this.getActiveItems();
        var activeIndexes = activeItems.map(function (itemModel) {
          return itemModel.get('_index') + 1;
        });
        return activeIndexes.join(',');
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return 'choice';
      }
    }, {
      key: "getCorrectAnswerAsText",
      value: function getCorrectAnswerAsText() {
        var globals = Adapt.course.get('_globals')._components['_' + this.get('_component')];

        var ariaAnswer;
        var correctAnswer;

        if (this.isSingleSelect()) {
          ariaAnswer = globals.ariaCorrectAnswer;
          var correctOption = this.getChildren().findWhere({
            _shouldBeSelected: true
          });
          correctAnswer = correctOption.get('text');
        } else {
          ariaAnswer = globals.ariaCorrectAnswers;
          var correctOptions = this.getChildren().where({
            _shouldBeSelected: true
          });
          correctAnswer = correctOptions.map(function (correctOption) {
            return correctOption.get('text');
          }).join('<br/>');
        }

        return Handlebars.compile(ariaAnswer)({
          correctAnswer: correctAnswer
        });
      }
    }, {
      key: "getUserAnswerAsText",
      value: function getUserAnswerAsText() {
        var globals = Adapt.course.get('_globals')._components['_' + this.get('_component')];

        var ariaAnswer;
        var userAnswer;
        var selectedItems = this.getActiveItems();

        if (selectedItems.length === 1) {
          ariaAnswer = globals.ariaUserAnswer;
          userAnswer = selectedItems[0].get('text');
        } else {
          ariaAnswer = globals.ariaUserAnswers;
          userAnswer = selectedItems.map(function (selectedItem) {
            return selectedItem.get('text');
          }).join('<br/>');
        }

        return Handlebars.compile(ariaAnswer)({
          userAnswer: userAnswer
        });
      }
    }]);

    return ItemsQuestionModel;
  }(BlendedItemsComponentQuestionModel));

  var McqModel = ItemsQuestionModel.extend({
    initialize: function () {
      var _this = this;

      this.set("_selectable", this.get("_isRadio") ? 1 : this.get("_items").length);

      if (this.isSingleSelect()) {
        _.each(this.get("_items"), function (item) {
          if (item._feedback) {
            if (!item._feedback.title) delete item._feedback.title;
            if (!item._feedback.body) delete item._feedback.body;
            if (!item._feedback.instruction) delete item._feedback.instruction;
          }

          if (item._shouldBeSelected) {
            item._feedback = _.extend({}, _this.get("_feedback")._correct, item._feedback);
          } else {
            item._feedback = _.extend({}, _this.get("_feedback")._incorrect, item._feedback);
          }

          item.feedback = item._feedback;
        });

        var itemCorrectFeedback = _.find(this.get("_items"), function (item) {
          return item._shouldBeSelected;
        })._feedback;

        var globalCorrectFeedback = this.get("_feedback")._correct;

        this.get("_feedback")._correct = {
          title: (itemCorrectFeedback === null || itemCorrectFeedback === void 0 ? void 0 : itemCorrectFeedback.title) || (globalCorrectFeedback === null || globalCorrectFeedback === void 0 ? void 0 : globalCorrectFeedback.title),
          body: (itemCorrectFeedback === null || itemCorrectFeedback === void 0 ? void 0 : itemCorrectFeedback.body) || (globalCorrectFeedback === null || globalCorrectFeedback === void 0 ? void 0 : globalCorrectFeedback.body)
        };
      }

      ItemsQuestionModel.prototype.initialize.apply(this, arguments);
    },
    setupIndividualFeedback: function (selectedItem) {
      var _selectedItem$get;

      if (this.get("_isCorrect")) return;
      if (!this.isSingleSelect()) return;
      var itemFeedback = selectedItem.get("_feedback");
      this.get("_feedback")._incorrect = _.extend({}, this.get("_feedback")._incorrect, itemFeedback);
      Adapt.questionPlus.setUpFeedback(this);
      this.set({
        feedbackTitle: ((_selectedItem$get = selectedItem.get("_feedback")) === null || _selectedItem$get === void 0 ? void 0 : _selectedItem$get.title) || this.getFeedbackTitle(this.get('_feedback')),
        feedbackMessage: this.get("_feedback")._incorrect.final
      });
    }
  });
  var McqModel$1 = __AMD("components/adapt-contrib-mcq/js/mcqModel", McqModel);

  var MCQ = __AMD("components/adapt-contrib-mcq/js/adapt-contrib-mcq", Adapt.register("mcq", {
    view: McqView$1,
    model: McqModel$1
  }));

  var Gmcq = MCQ.view.extend({
    setupQuestion: function () {
      MCQ.view.prototype.setupQuestion.call(this);
      this.listenTo(Adapt, {
        'device:changed': this.resizeImage,
        'device:resize': this.onDeviceResize
      });
    },
    onQuestionRendered: function () {
      this.resizeImage(Adapt.device.screenSize);
      this.setUpColumns();
      this.$('.js-item-label').imageready(this.setReadyStatus.bind(this));
    },
    onDeviceResize: function () {
      this.setUpColumns();
    },
    resizeImage: function (width) {
      var imageWidth = width === 'medium' ? 'small' : width;
      this.$('.js-item-label').each(function (index) {
        var $img = $(this).find('img');
        var newSrc = $img.attr('data-' + imageWidth);
        if (!newSrc) return;
        $img.attr('src', newSrc);
      });
    },
    setUpColumns: function () {
      var columns = this.model.get('_columns');
      if (!columns) return;
      var isLarge = Adapt.device.screenSize === 'large';
      this.$el.toggleClass('has-column-layout', isLarge);
      this.$('.js-mcq-item').css('width', isLarge ? 100 / columns + '%' : '');
    }
  }, {
    template: 'gmcq'
  });
  __AMD("components/adapt-contrib-gmcq/js/adapt-contrib-gmcq", Adapt.register("gmcq", {
    view: Gmcq,
    model: MCQ.model.extend({})
  }));

  var GraphicView = ComponentView$1.extend({
    preRender: function () {
      var _this$model$get;

      if ((_this$model$get = this.model.get("_graphic")) !== null && _this$model$get !== void 0 && _this$model$get.large.match(/--r\.svg$/)) {
        this.model.set("_isDDImg", true);
      }

      this.listenTo(Adapt, 'device:changed', this.resizeImage);
      this.checkIfResetOnRevisit();
    },
    postRender: function () {
      this.resizeImage(Adapt.device.screenSize, true);
    },
    checkIfResetOnRevisit: function () {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    },
    resizeImage: function (width, setupInView) {
      var imageWidth = width === 'medium' ? 'small' : width;
      var imageSrc = this.model.get('_graphic') ? this.model.get('_graphic')[imageWidth] : '';
      this.$('.js-graphic-set-image-src, .js-graphic-set-image-src img').attr('src', imageSrc);
      this.$('.graphic__widget').imageready(function () {
        this.setReadyStatus();

        if (setupInView) {
          this.setupInviewCompletion(this.model.get("_graphic") ? '.graphic__widget' : '.graphic__header');
        }
      }.bind(this));
    }
  });
  __AMD("components/adapt-contrib-graphic/js/adapt-contrib-graphic", Adapt.register('graphic', {
    model: ComponentModel$1.extend({}),
    view: GraphicView
  }));

  var HotgraphicPopupView = Backbone.View.extend({
    className: 'hotgraphic-popup',
    events: {
      'click .js-hotgraphic-popup-close': 'closePopup',
      'click .js-hotgraphic-controls-click': 'onControlClick'
    },
    initialize: function () {
      this.onControlClick = _.debounce(this.onControlClick.bind(this), 100);
      this.listenToOnce(Adapt, "notify:opened", this.onOpened);
      this.listenTo(this.model.getChildren(), {
        'change:_isActive': this.onItemsActiveChange,
        'change:_isVisited': this.onItemsVisitedChange
      });
      this.render();
    },
    onOpened: function () {
      this.applyNavigationClasses(this.model.getActiveItem().get('_index'));
      this.updatePageCount();
      this.handleTabs();
    },
    applyNavigationClasses: function (index) {
      var itemCount = this.model.get('_items').length;
      var canCycleThroughPagination = this.model.get('_canCycleThroughPagination');
      var shouldEnableBack = index > 0 || canCycleThroughPagination;
      var shouldEnableNext = index < itemCount - 1 || canCycleThroughPagination;
      var $controls = this.$('.hotgraphic-popup__controls');
      this.$('hotgraphic-popup__nav').toggleClass('first', !shouldEnableBack).toggleClass('last', !shouldEnableNext);
      Adapt.a11y.toggleAccessibleEnabled($controls.filter('.back'), shouldEnableBack);
      Adapt.a11y.toggleAccessibleEnabled($controls.filter('.next'), shouldEnableNext);
    },
    updatePageCount: function () {
      var template = Adapt.course.get("_globals")._components._hotgraphic.popupPagination || '{{itemNumber}} / {{totalItems}}';
      var labelText = Handlebars.compile(template)({
        itemNumber: this.model.getActiveItem().get('_index') + 1,
        totalItems: this.model.get("_items").length
      });
      this.$('.hotgraphic-popup__count').html(labelText);
    },
    handleTabs: function () {
      Adapt.a11y.toggleHidden(this.$('.hotgraphic-popup__item:not(.is-active) *'), true);
      Adapt.a11y.toggleHidden(this.$('.hotgraphic-popup__item.is-active *'), false);
    },
    onItemsActiveChange: function (item, _isActive) {
      if (!_isActive) return;
      var index = item.get('_index');
      this.updatePageCount();
      this.applyItemClasses(index);
      this.handleTabs();
      this.handleFocus(index);
    },
    applyItemClasses: function (index) {
      this.$('.hotgraphic-popup__item[data-index="' + index + '"]').addClass('is-active').removeAttr('aria-hidden');
      this.$('.hotgraphic-popup__item[data-index="' + index + '"] .hotgraphic-popup__item-title').attr("id", "notify-heading");
      this.$('.hotgraphic-popup__item:not([data-index="' + index + '"])').removeClass('is-active').attr('aria-hidden', 'true');
      this.$('.hotgraphic-popup__item:not([data-index="' + index + '"]) .hotgraphic-popup__item-title').removeAttr("id");
    },
    handleFocus: function (index) {
      Adapt.a11y.focusFirst(this.$('.hotgraphic-popup__inner .is-active'));
      this.applyNavigationClasses(index);
    },
    onItemsVisitedChange: function (item, _isVisited) {
      if (!_isVisited) return;
      this.$('.hotgraphic-popup__item').filter('[data-index="' + item.get('_index') + '"]').addClass('is-visited');
    },
    render: function () {
      var data = this.model.toJSON();
      data.view = this;
      var template = Handlebars.templates['hotgraphicPopup'];
      this.$el.html(template(data));
    },
    closePopup: function (event) {
      Adapt.trigger('notify:close');
    },
    onControlClick: function (event) {
      var direction = $(event.currentTarget).hasClass('back') ? 'back' : 'next';
      var index = this.getNextIndex(direction);

      if (index !== -1) {
        this.setItemState(index);
      }
    },
    getNextIndex: function (direction) {
      var index = this.model.getActiveItem().get('_index');
      var lastIndex = this.model.get('_items').length - 1;

      switch (direction) {
        case 'back':
          if (index > 0) return --index;
          if (this.model.get('_canCycleThroughPagination')) return lastIndex;
          break;

        case 'next':
          if (index < lastIndex) return ++index;
          if (this.model.get('_canCycleThroughPagination')) return 0;
      }

      return -1;
    },
    setItemState: function (index) {
      this.model.getActiveItem().toggleActive();
      var nextItem = this.model.getItem(index);
      nextItem.toggleActive();
      nextItem.toggleVisited(true);
    }
  });
  var HotgraphicPopupView$1 = __AMD("components/adapt-contrib-hotgraphic/js/hotgraphicPopupView", HotgraphicPopupView);

  var HotGraphicView = ComponentView$1.extend({
    events: {
      'click .js-hotgraphic-item-click': 'onPinClicked'
    },
    initialize: function () {
      ComponentView$1.prototype.initialize.call(this);
      this.setUpViewData();
      this.setUpModelData();
      this.setUpEventListeners();
      this.checkIfResetOnRevisit();
    },
    setUpViewData: function () {
      this.popupView = null;
      this._isPopupOpen = false;
    },
    setUpModelData: function () {
      if (this.model.get('_canCycleThroughPagination') === undefined) {
        this.model.set('_canCycleThroughPagination', false);
      }
    },
    setUpEventListeners: function () {
      this.listenTo(Adapt, 'device:changed', this.reRender);
      this.listenTo(this.model.getChildren(), {
        'change:_isActive': this.onItemsActiveChange,
        'change:_isVisited': this.onItemsVisitedChange
      });
    },
    reRender: function () {
      if (Adapt.device.screenSize !== 'large') {
        this.replaceWithNarrative();
      }
    },
    replaceWithNarrative: function () {
      var NarrativeView = Adapt.getViewClass('narrative');
      var model = this.prepareNarrativeModel();
      var newNarrative = new NarrativeView({
        model: model
      });
      var $container = $(".component__container", $("." + this.model.get("_parentId")));
      newNarrative.reRender();
      newNarrative.setupNarrative();
      $container.append(newNarrative.$el);
      Adapt.trigger('device:resize');

      _.defer(this.remove.bind(this));
    },
    prepareNarrativeModel: function () {
      var model = this.model;
      model.set({
        '_component': 'narrative',
        '_wasHotgraphic': true,
        'originalBody': model.get('body'),
        'originalInstruction': model.get('instruction')
      });
      var activeItem = model.getActiveItem();

      if (!activeItem) {
        model.getItem(0).toggleActive(true);
      }

      if (model.get('mobileBody')) {
        model.set('body', model.get('mobileBody'));
      }

      if (model.get('mobileInstruction')) {
        model.set('instruction', model.get('mobileInstruction'));
      }

      return model;
    },
    onItemsActiveChange: function (model, _isActive) {
      this.getItemElement(model).toggleClass('is-active', _isActive);
    },
    getItemElement: function (model) {
      var index = model.get('_index');
      return this.$('.js-hotgraphic-item-click').filter('[data-index="' + index + '"]');
    },
    onItemsVisitedChange: function (model, _isVisited) {
      if (!_isVisited) return;
      var $pin = this.getItemElement(model);
      var visitedLabel = this.model.get('_globals')._accessibility._ariaLabels.visited + ".";
      $pin.find('.aria-label').each(function (index, el) {
        el.innerHTML += " " + visitedLabel;
      });
      $pin.addClass('is-visited');
    },
    checkIfResetOnRevisit: function () {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    },
    preRender: function () {
      if (Adapt.device.screenSize === 'large') {
        this.render();
      } else {
        this.reRender();
      }
    },
    postRender: function () {
      this.$('.hotgraphic__widget').imageready(this.setReadyStatus.bind(this));

      if (this.model.get('_setCompletionOn') === 'inview') {
        this.setupInviewCompletion('.component__widget');
      }
    },
    onPinClicked: function (event) {
      if (event) event.preventDefault();
      var item = this.model.getItem($(event.currentTarget).data('index'));
      item.toggleActive(true);
      item.toggleVisited(true);
      this.openPopup();
    },
    openPopup: function () {
      if (this._isPopupOpen) return;
      this._isPopupOpen = true;
      this.popupView = new HotgraphicPopupView$1({
        model: this.model
      });
      Adapt.trigger("notify:popup", {
        _view: this.popupView,
        _isCancellable: true,
        _showCloseButton: false,
        _classes: 'hotgraphic ' + this.model.get('_classes')
      });
      this.listenToOnce(Adapt, {
        'popup:closed': this.onPopupClosed
      });
    },
    onPopupClosed: function () {
      this.model.getActiveItem().toggleActive();
      this._isPopupOpen = false;
    }
  });
  var HotgraphicView = __AMD("components/adapt-contrib-hotgraphic/js/hotgraphicView", HotGraphicView);

  __AMD("components/adapt-contrib-hotgraphic/js/adapt-contrib-hotgraphic", Adapt.register('hotgraphic', {
    model: ItemsComponentModel.extend({}),
    view: HotgraphicView
  }));

  var DropDownItem = Backbone.View.extend({
    events: {
      'click': 'onClick',
      'click *': 'onClick'
    },
    initialize: function (settings) {
      this.settings = settings;
      this.$inner = this.$('.js-dropdown-list-item-inner');
    },
    isPlaceholder: function () {
      return this.$el.is('[hidden]');
    },
    parent: function () {
      return this.settings.parent;
    },
    onClick: function (event) {
      var parent = this.parent();
      event.preventDefault();
      this.select().scrollTo();
      parent.$button.focus();
    },
    getValue: function () {
      return this.$el.attr('value').trim();
    },
    select: function () {
      var parent = this.parent();
      parent.deselectAll();
      parent.setActiveDescendantId(this.el.id);
      this.$el.attr({
        selected: '',
        'aria-selected': 'true'
      });
      parent.$inner.html(this.$el.attr('text'));
      var value = this.isPlaceholder() ? '' : this.getValue();
      parent.$input.val(value).trigger('change');
      parent.trigger('change', parent);
      return this;
    },
    deselect: function () {
      if (!this.isSelected()) return this;
      var parent = this.parent();
      parent.removeActiveDescendantId();
      this.$el.removeAttr('selected');
      this.$el.attr('aria-selected', 'false');
      parent.$inner.html('');
      parent.$input.val('').trigger('change');
      parent.trigger('change', parent);
      return this;
    },
    reselect: function () {
      var parent = this.parent();
      parent.setActiveDescendantId(this.$el[0].id);
      if (this.isSelected()) return this;
      this.select();
      return this;
    },
    isSelected: function () {
      return Boolean(this.$el.attr('selected'));
    },
    getIndex: function () {
      var parent = this.parent();
      return _.findIndex(parent.options, function (option) {
        return option === this;
      }.bind(this));
    },
    getNext: function () {
      var parent = this.parent();
      return parent.options[this.getIndex() + 1];
    },
    getPrevious: function () {
      var parent = this.parent();
      return parent.options[this.getIndex() - 1];
    },
    getFirst: function () {
      var parent = this.parent();
      return parent.options[0];
    },
    getLast: function () {
      var parent = this.parent();
      return parent.options[parent.options.length - 1];
    },
    scrollTo: function () {
      var parent = this.parent();
      parent.settings.scrollToItem.call(parent, this);
    },
    destroy: function () {
      var parent = this.parent();
      this.remove();

      if (this.isPlaceholder()) {
        parent.placeholder = null;
      } else {
        for (var i = 0, l = parent.options.length; i < l; i++) {
          var item = parent.options[i];
          if (item !== this) continue;
          parent.options.splice(i, 1);
          break;
        }
      }

      delete this.settings;
    }
  });
  var DropDownOption = __AMD("components/adapt-contrib-matching/js/dropdownOption", DropDownItem);

  var DropDown = Backbone.View.extend({
    initialize: function (settings) {
      _.bindAll(this, 'onStartInteraction', 'onButtonClick', 'onListBlur', 'onKeyDown');

      this.settings = _.defaults(settings, this.getDefaults());
      this.placeholder = null;
      this.options = [];
      this.setUpElements();
      this.setUpItems();
      this.select(this.settings.value);
      this.addEventListeners();
      this.toggleOpen(false);
      this.settings.load.call(this, this);
      this.trigger('load', this);
    },
    getDefaults: function () {
      return {
        load: DropDown.defaults.load,
        openList: DropDown.defaults.openList,
        closeList: DropDown.defaults.closeList,
        scrollToItem: DropDown.defaults.scrollToItem
      };
    },
    setUpElements: function () {
      this.$list = this.$('.js-dropdown-list');
      this.$button = this.$('.js-dropdown-btn');
      this.$inner = this.$button.find('.js-dropdown-inner');
      this.$input = this.$('.js-data-output');
    },
    setUpItems: function () {
      var $options = this.$('.js-dropdown-list-item');
      $options.each(function (index, el) {
        var option = new DropDownOption({
          parent: this,
          el: el
        });

        if (option.isPlaceholder()) {
          this.placeholder = option;
          return;
        }

        this.options.push(option);
      }.bind(this));
    },
    addEventListeners: function () {
      this.$button.on({
        'mousedown touchstart': this.onStartInteraction,
        click: this.onButtonClick
      });
      this.$list.on('blur', this.onListBlur);
      $(document).on('keydown', this.onKeyDown);
    },
    onStartInteraction: function () {
      this.wasOpen = this.isOpen();
    },
    deselectAll: function () {
      this.placeholder.deselect();
      this.options.forEach(function (option) {
        option.deselect();
      });
    },
    onButtonClick: function (event) {
      if (this.wasOpen || this.isOpen()) {
        this.wasOpen = false;
        return;
      }

      this.toggleOpen();
      var option = this.getFirstSelectedItem() || this.placeholder;
      if (!option) return;
      option.reselect();
      option.scrollTo();
      this.$list.focus();
    },
    isOpen: function () {
      return !this.$list.hasClass('u-display-none');
    },
    toggleOpen: function (open) {
      if (open === undefined) open = !this.isOpen();
      if (open) clearTimeout(this.blurTimeout);
      this.$button.attr('aria-expanded', open ? 'true' : 'false');
      var name = open ? 'openList' : 'closeList';
      this.settings[name].call(this, this);
      this.trigger(name, this);
    },
    onListBlur: function (event) {
      var handleBlur = function () {
        this.toggleOpen(false);
        this.removeActiveDescendantId();
      }.bind(this);

      this.blurTimeout = setTimeout(handleBlur, 100);
    },
    onKeyDown: function (event) {
      if (!this.isOpen()) return;
      var option = this.getFirstSelectedItem() || this.placeholder;

      switch (event.keyCode) {
        case 38:
          event.preventDefault();
          option = option.getPrevious() || option.getLast();
          break;

        case 40:
          event.preventDefault();
          option = option.getNext() || option.getFirst();
          break;

        case 13:
        case 32:
        case 27:
          event.preventDefault();
          this.$button.focus();
          return;

        default:
          return;
      }

      option.select().scrollTo();
    },
    getFirstSelectedItem: function () {
      return _.find(this.options, function (option) {
        return option.isSelected();
      }) || this.options[0];
    },
    setActiveDescendantId: function (id) {
      this.$list.attr('aria-activedescendant', id);
    },
    removeActiveDescendantId: function () {
      this.$list.removeAttr('aria-activedescendant');
    },
    select: function (value) {
      value = String(value);

      var option = _.find(this.options, function (option) {
        return option.getValue() === value;
      });

      if (option) {
        option.select();
        return;
      }

      this.placeholder.select();
    },
    toggleDisabled: function (value) {
      if (value === undefined) {
        value = !this.$input.attr('disabled');
      }

      if (value === false) {
        this.$input.removeAttr('disabled');
        this.$button.removeAttr('disabled').removeClass('is-disabled');
        this.$el.removeAttr('disabled');
        return;
      }

      this.$input.attr('disabled', '');
      this.$button.attr('disabled', '').addClass('is-disabled');
      this.$el.attr('disabled', '');
    },
    isEmpty: function () {
      return !this.getFirstSelectedItem();
    },
    val: function () {
      return this.$input.val();
    },
    destroy: function () {
      this.removeEventListeners();
      this.$el.remove();
      delete this.options;
      delete this.$input;
      delete this.$inner;
      delete this.$button;
      delete this.$list;
      delete this.$el;
    },
    removeEventListeners: function () {
      this.$button.off({
        'mousedown touchstart': this.onStartInteraction,
        click: this.onButtonClick
      });
      this.$list.off('blur', this.onListBlur);
      $(document).off('keydown', this.onKeyDown);
    }
  }, {
    defaults: {
      load: function () {},
      openList: function () {
        this.$list.css({
          top: '',
          left: this.$button[0].offsetLeft,
          width: this.$button.outerWidth()
        }).addClass('u-visibility-hidden').removeClass('u-display-none');
        var offset = this.$list[0].getBoundingClientRect();
        var height = this.$list.height();
        var windowHeight = $(window).height();
        var isOffscreen = offset.top + height > windowHeight;
        this.$list.css('top', isOffscreen ? -height : '').removeClass('u-visibility-hidden').focus();
      },
      closeList: function () {
        this.$list.removeClass('u-visibility-hidden').addClass('u-display-none').css('top', '');
      },
      scrollToItem: function (option) {
        var height = this.$list[0].clientHeight;
        var pos = option.$el[0].offsetTop - height / 2;
        this.$list[0].scrollTop = pos;
      }
    }
  });
  var DropDown$1 = __AMD("components/adapt-contrib-matching/js/dropdown", DropDown);

  var MatchingView = QuestionView$1.extend({
    dropdowns: [],
    disableQuestion: function () {
      this.dropdowns.forEach(function (dropdown) {
        dropdown.toggleDisabled(true);
      });
    },
    enableQuestion: function () {
      this.dropdowns.forEach(function (dropdown) {
        dropdown.toggleDisabled(false);
      });
    },
    resetQuestionOnRevisit: function () {
      this.resetQuestion();
    },
    setupQuestion: function () {
      this.listenToOnce(Adapt.parentView, 'postRemove', this.onPostRemove);
      this.model.setupRandomisation();
    },
    onPostRemove: function () {
      this.dropdowns.forEach(function (dropdown) {
        dropdown.off('change', this.onOptionSelected);
        dropdown.destroy();
      }, this);
    },
    onQuestionRendered: function () {
      this.setReadyStatus();
      this.setUpDropdowns();
    },
    setUpDropdowns: function () {
      _.bindAll(this, 'onOptionSelected');

      this.dropdowns = [];
      var items = this.model.get('_items');
      this.$('.matching__item').each(function (i, el) {
        var item = items[i];

        var selectedOption = _.find(item._options, function (option) {
          return option._isSelected;
        });

        var value = selectedOption ? selectedOption._index : null;
        var dropdown = new DropDown$1({
          el: $(el).find('.dropdown')[0],
          placeholder: this.model.get('placeholder'),
          value: value
        });
        this.dropdowns.push(dropdown);
        dropdown.on('change', this.onOptionSelected);
      }.bind(this));
      this.enableQuestion();

      if (this.model.get('_isEnabled') !== true) {
        this.disableQuestion();
      }
    },
    onCannotSubmit: function () {
      this.dropdowns.forEach(function (dropdown) {
        if (!dropdown.isEmpty()) return;
        dropdown.$el.parents('.matching__select-container').addClass('has-error');
      });
    },
    onOptionSelected: function (dropdown) {
      if (this.model.get('_isInteractionComplete')) return;
      var $container = dropdown.$el.parents('.matching__select-container');
      $container.removeClass('error');
      var itemIndex = dropdown.$el.parents('.matching__item').index();
      if (dropdown.isEmpty()) return;
      var optionIndex = parseInt(dropdown.val());
      this.model.setOptionSelected(itemIndex, optionIndex, true);
    },
    showMarking: function () {
      if (!this.model.get('_canShowMarking')) return;
      this.model.get('_items').forEach(function (item, i) {
        var $item = this.$('.matching__item').eq(i);
        $item.removeClass('is-correct is-incorrect').addClass(item._isCorrect ? 'is-correct' : 'is-incorrect');
      }, this);
    },
    resetQuestion: function () {
      this.$('.matching__item').removeClass('is-correct is-incorrect');
      this.model.set('_isAtLeastOneCorrectSelection', false);
      var resetAll = this.model.get('_shouldResetAllAnswers');
      this.model.get('_items').forEach(function (item, index) {
        if (item._isCorrect && resetAll === false) return;
        this.selectValue(index, null);

        item._options.forEach(function (option, index) {
          option._isSelected = false;
        });

        item._selected = null;
      }, this);
    },
    showCorrectAnswer: function () {
      this.model.get('_items').forEach(function (item, index) {
        var correctOption = _.findWhere(item._options, {
          _isCorrect: true
        });

        this.selectValue(index, correctOption._index);
      }, this);
    },
    hideCorrectAnswer: function () {
      var answerArray = this.model.has('_tempUserAnswer') ? this.model.get('_tempUserAnswer') : this.model.get('_userAnswer');
      this.model.get('_items').forEach(function (item, index) {
        var key = answerArray[index];
        var value = item._options[key]._index;
        this.selectValue(index, value);
      }, this);
    },
    selectValue: function (index, optionIndex) {
      if (!this.dropdowns) return;
      var dropdown = this.dropdowns[index];
      if (!dropdown) return;
      dropdown.select(optionIndex);
    }
  });
  var MatchingView$1 = __AMD("components/adapt-contrib-matching/js/matchingView", MatchingView);

  var MatchingModel = QuestionModel$1.extend({
    init: function () {
      QuestionModel$1.prototype.init.call(this);
      this.setupQuestionItemIndexes();
    },
    setupQuestionItemIndexes: function () {
      this.get('_items').forEach(function (item, index) {
        if (item._index === undefined) {
          item._index = index;
          item._selected = false;
        }

        item._options.forEach(function (option, index) {
          if (option._index === undefined) {
            option._index = index;
            option._isSelected = false;
          }
        });
      });
    },
    setupRandomisation: function () {
      if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
      this.get('_items').forEach(function (item) {
        item._options = _.shuffle(item._options);
      });
    },
    restoreUserAnswers: function () {
      if (!this.get('_isSubmitted')) return;
      var userAnswer = this.get('_userAnswer');
      this.get('_items').forEach(function (item, index) {
        item._options.forEach(function (option, index) {
          if (option._index === userAnswer[item._index]) {
            option._isSelected = true;
            item._selected = option;
          }
        });
      });
      this.setQuestionAsSubmitted();
      this.checkCanSubmit();
      this.markQuestion();
      this.setScore();
      this.setupFeedback();
    },
    canSubmit: function () {
      var canSubmit = _.every(this.get('_items'), function (item) {
        return _.findWhere(item._options, {
          '_isSelected': true
        }) !== undefined;
      });

      return canSubmit;
    },
    setOptionSelected: function (itemIndex, optionIndex, isSelected) {
      var item = this.get('_items')[itemIndex];

      if (isNaN(optionIndex)) {
        item._options.forEach(function (option) {
          return option._isSelected = false;
        });

        item._selected = null;
        return this.checkCanSubmit();
      }

      var option = _.findWhere(item._options, {
        '_index': optionIndex
      });

      option._isSelected = isSelected;
      item._selected = option;
      this.checkCanSubmit();
    },
    storeUserAnswer: function () {
      var userAnswer = new Array(this.get('_items').length);
      var tempUserAnswer = new Array(this.get('_items').length);
      this.get('_items').forEach(function (item, index) {
        var optionIndex = _.findIndex(item._options, function (o) {
          return o._isSelected;
        });

        tempUserAnswer[item._index] = optionIndex;
        userAnswer[item._index] = item._options[optionIndex]._index;
      }, this);
      this.set({
        _userAnswer: userAnswer,
        _tempUserAnswer: tempUserAnswer
      });
    },
    isCorrect: function () {
      var numberOfCorrectAnswers = 0;
      this.get('_items').forEach(function (item, index) {
        var isCorrect = item._selected && item._selected._isCorrect;

        if (!isCorrect) {
          item._isCorrect = false;
          return;
        }

        numberOfCorrectAnswers++;
        item._isCorrect = true;
        this.set({
          _numberOfCorrectAnswers: numberOfCorrectAnswers,
          _isAtLeastOneCorrectSelection: true
        });
      }, this);
      this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);

      if (numberOfCorrectAnswers === this.get('_items').length) {
        return true;
      }

      return false;
    },
    setScore: function () {
      var questionWeight = this.get('_questionWeight');

      if (this.get('_isCorrect')) {
        this.set('_score', questionWeight);
        return;
      }

      var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
      var itemLength = this.get('_items').length;
      var score = questionWeight * numberOfCorrectAnswers / itemLength;
      this.set('_score', score);
    },
    isPartlyCorrect: function () {
      return this.get('_isAtLeastOneCorrectSelection');
    },
    resetUserAnswer: function () {
      this.set('_userAnswer', []);
    },
    getInteractionObject: function () {
      var interactions = {
        correctResponsesPattern: null,
        source: null,
        target: null
      };
      var items = this.get('_items');
      interactions.correctResponsesPattern = [items.map(function (item, questionIndex) {
        questionIndex = questionIndex + 1;
        return [questionIndex, item._options.filter(function (item) {
          return item._isCorrect;
        }).map(function (item) {
          return questionIndex + '_' + (item._index + 1).toString();
        })].join('[.]');
      }).join('[,]')];
      interactions.source = _.flatten(items.map(function (item) {
        return {
          id: (item._index + 1).toString(),
          description: item.text
        };
      }));
      interactions.target = _.flatten(items.map(function (item, index) {
        index = index + 1;
        return item._options.map(function (option) {
          return {
            id: index + '_' + (option._index + 1),
            description: option.text
          };
        });
      }));
      return interactions;
    },
    getResponse: function () {
      var responses = [];
      this.get('_userAnswer').forEach(function (userAnswer, index) {
        responses.push(index + 1 + '.' + (userAnswer + 1));
      });
      return responses.join('#');
    },
    getResponseType: function () {
      return 'matching';
    },
    getCorrectAnswerAsText: function () {
      var correctAnswerTemplate = Adapt.course.get('_globals')._components._matching.ariaCorrectAnswer;

      var ariaAnswer = this.get('_items').map(function (item) {
        var correctOption = _.findWhere(item._options, {
          _isCorrect: true
        });

        return Handlebars.compile(correctAnswerTemplate)({
          itemText: item.text,
          correctAnswer: correctOption.text
        });
      }).join('<br>');
      return ariaAnswer;
    },
    getUserAnswerAsText: function () {
      var userAnswerTemplate = Adapt.course.get('_globals')._components._matching.ariaUserAnswer;

      var answerArray = this.has('_tempUserAnswer') ? this.get('_tempUserAnswer') : this.get('_userAnswer');
      var ariaAnswer = this.get('_items').map(function (item, index) {
        var key = answerArray[index];
        return Handlebars.compile(userAnswerTemplate)({
          itemText: item.text,
          userAnswer: item._options[key].text
        });
      }).join('<br>');
      return ariaAnswer;
    }
  });
  var MatchingModel$1 = __AMD("components/adapt-contrib-matching/js/matchingModel", MatchingModel);

  __AMD("components/adapt-contrib-matching/js/adapt-contrib-matching", Adapt.register('matching', {
    view: MatchingView$1,
    model: MatchingModel$1
  }));

  var mepPrototype = $.extend({}, mejs.MediaElementPlayer.prototype);
  $.extend(mejs.MediaElementPlayer.prototype, {
    detectFullscreenMode: function () {
      var vendorPrefix = this.getVendorPrefix();
      var fsEventName = 'on' + vendorPrefix + 'fullscreenchange';

      if (document[fsEventName] === null) {
        document[fsEventName] = function fullScreenEventHandler() {
          var elementName = vendorPrefix === '' ? 'fullscreenElement' : vendorPrefix + 'FullscreenElement';

          if (document[elementName] !== null) {
            $.inview.lock('mediaelement');
            Adapt.trigger('media:fullscreen:enter');
          } else {
            $.inview.unlock('mediaelement');
            Adapt.trigger('media:fullscreen:exit');
          }
        };
      }

      if (Adapt.config.get('_isDesktopBookshelf')) {
        var t = this;
        var mode = "fullwindow";
        t.fullscreenMode = mode;
        return mode;
      }

      return mepPrototype.detectFullscreenMode.apply(this, arguments);
    },
    getVendorPrefix: function () {
      var browser = Adapt.device.browser;

      if (browser === 'internet explorer') {
        return 'ms';
      }

      if (browser === 'microsoft edge' || browser === 'safari') {
        return 'webkit';
      }

      return '';
    }
  });

  var froogaloopAdded = false;

  function purge(d) {
    var a = d.attributes;

    if (a) {
      for (var i = a.length - 1; i >= 0; i -= 1) {
        var n = a[i].name;

        if (typeof d[n] === 'function') {
          d[n] = null;
        }
      }
    }

    a = d.childNodes;

    if (a) {
      for (var _i = 0, count = a.length; _i < count; _i += 1) {
        purge(d.childNodes[_i]);
      }
    }
  }

  _.extend(window.mejs.MepDefaults, {
    keyActions: [],
    defaultSeekForwardInterval: function (duration) {
      if (_typeof(duration) === 'object') return duration.duration * 0.05;
      return duration * 0.05;
    },
    defaultSeekBackwardInterval: function (duration) {
      if (_typeof(duration) === 'object') return duration.duration * 0.05;
      return duration * 0.05;
    }
  });

  var MediaView = ComponentView$1.extend({
    events: {
      'click .js-media-inline-transcript-toggle': 'onToggleInlineTranscript',
      'click .js-media-external-transcript-click': 'onExternalTranscriptClicked',
      'click .js-skip-to-transcript': 'onSkipToTranscript'
    },
    className: function () {
      var classes = ComponentView$1.prototype.className.call(this);
      var playerOptions = this.model.get('_playerOptions');

      if (playerOptions && playerOptions.toggleCaptionsButtonWhenOnlyOne) {
        classes += ' toggle-captions';
      }

      return classes;
    },
    preRender: function () {
      this.listenTo(Adapt, {
        'device:resize': this.onScreenSizeChanged,
        'device:changed': this.onDeviceChanged,
        'media:stop': this.onMediaStop
      });

      _.bindAll(this, 'onMediaElementPlay', 'onMediaElementPause', 'onMediaElementEnded', 'onMediaElementTimeUpdate', 'onMediaElementSeeking');

      this.model.set({
        '_isMediaEnded': false,
        '_isMediaPlaying': false
      });

      if (this.model.get('_media').source) {
        var media = this.model.get('_media');

        if (window.location.protocol === 'https:' && media.source.indexOf('http:') === 0) {
          media.source = media.source.replace(/^http:/, 'https:');
        }

        this.model.set('_media', media);
      }

      this.checkIfResetOnRevisit();
    },
    postRender: function () {
      this.setupPlayer();
      this.addMejsButtonClass();
    },
    addMejsButtonClass: function () {
      this.$('.mejs-overlay-button').addClass('icon');
    },
    setupPlayer: function () {
      if (!this.model.get('_playerOptions')) this.model.set('_playerOptions', {});
      var modelOptions = this.model.get('_playerOptions');

      if (modelOptions.pluginPath === undefined) {
        _.extend(modelOptions, {
          pluginPath: 'https://cdnjs.cloudflare.com/ajax/libs/mediaelement/2.21.2/',
          flashName: 'flashmediaelement-cdn.swf',
          flashScriptAccess: 'always'
        });
      }

      if (modelOptions.features === undefined) {
        modelOptions.features = ['playpause', 'progress', 'current', 'duration'];

        if (this.model.get('_useClosedCaptions')) {
          modelOptions.features.unshift('tracks');
        }

        if (this.model.get('_allowFullScreen')) {
          modelOptions.features.push('fullscreen');
        }

        if (this.model.get('_showVolumeControl')) {
          modelOptions.features.push('volume');
        }
      }

      modelOptions.success = _.debounce(this.onPlayerReady.bind(this), 100);

      if (this.model.get('_useClosedCaptions')) {
        var startLanguage = this.model.get('_startLanguage') || 'en';

        if (!Adapt.offlineStorage.get('captions')) {
          Adapt.offlineStorage.set('captions', startLanguage);
        }

        modelOptions.startLanguage = this.checkForSupportedCCLanguage(Adapt.offlineStorage.get('captions'));
      }

      if (modelOptions.alwaysShowControls === undefined) {
        modelOptions.alwaysShowControls = false;
      }

      if (modelOptions.hideVideoControlsOnLoad === undefined) {
        modelOptions.hideVideoControlsOnLoad = true;
      }

      this.addMediaTypeClass();
      this.addThirdPartyFixes(modelOptions, function createPlayer() {
        this.$('audio, video').mediaelementplayer(modelOptions);
        this.cleanUpPlayer();

        var _media = this.model.get('_media');

        if (!_media.mp3 && !_media.mp4 && !_media.ogv && !_media.webm && !_media.source) {
          Adapt.log.warn('ERROR! No media is selected in components.json for component ' + this.model.get('_id'));
          this.setReadyStatus();
          return;
        }

        if (_media.source) {
          this.$('.media__widget').addClass('external-source');
        }
      }.bind(this));
    },
    addMediaTypeClass: function () {
      var media = this.model.get('_media');

      if (media && media.type) {
        var typeClass = media.type.replace(/\//, '-');
        this.$('.media__widget').addClass(typeClass);
      }
    },
    addThirdPartyFixes: function (modelOptions, callback) {
      var media = this.model.get('_media');
      if (!media) return callback();

      switch (media.type) {
        case 'video/vimeo':
          modelOptions.alwaysShowControls = false;
          modelOptions.hideVideoControlsOnLoad = true;
          modelOptions.features = [];
          if (froogaloopAdded) return callback();
          $.getScript('assets/froogaloop.js').done(function () {
            froogaloopAdded = true;
            callback();
          }).fail(function () {
            froogaloopAdded = false;
            console.log('Could not load froogaloop.js');
          });
          break;

        default:
          callback();
      }
    },
    cleanUpPlayer: function () {
      this.$('.media__widget').children('.mejs-offscreen').remove();
      this.$('[role=application]').removeAttr('role tabindex');
      this.$('[aria-controls]').removeAttr('aria-controls');
    },
    setupEventListeners: function () {
      this.completionEvent = this.model.get('_setCompletionOn') || 'play';

      if (this.completionEvent === 'inview') {
        this.setupInviewCompletion('.component__widget');
      }

      if (this.model.get('_preventForwardScrubbing') && !this.model.get('_isComplete')) {
        $(this.mediaElement).on({
          'seeking': this.onMediaElementSeeking,
          'timeupdate': this.onMediaElementTimeUpdate
        });
      }

      $(this.mediaElement).on({
        'play': this.onMediaElementPlay,
        'pause': this.onMediaElementPause,
        'ended': this.onMediaElementEnded
      });

      _.delay(this.listenForCaptionsChange.bind(this), 250);
    },
    listenForCaptionsChange: function () {
      if (!this.model.get('_useClosedCaptions')) return;
      var selector = this.model.get('_playerOptions').toggleCaptionsButtonWhenOnlyOne ? '.mejs-captions-button button' : '.mejs-captions-selector';
      this.$(selector).on('click.mediaCaptionsChange', _.debounce(function () {
        var srclang = this.mediaElement.player.selectedTrack ? this.mediaElement.player.selectedTrack.srclang : 'none';
        Adapt.offlineStorage.set('captions', srclang);
        Adapt.trigger('media:captionsChange', this, srclang);
      }.bind(this), 250));
      this.listenTo(Adapt, 'media:captionsChange', this.onCaptionsChanged);
    },
    onCaptionsChanged: function (view, lang) {
      if (view && view.cid === this.cid) return;
      lang = this.checkForSupportedCCLanguage(lang);
      this.mediaElement.player.setTrack(lang);
      var $inputs = this.$('.mejs-captions-selector input');
      $inputs.filter(':checked').prop('checked', false);
      $inputs.filter('[value="' + lang + '"]').prop('checked', true);
    },
    checkForSupportedCCLanguage: function (lang) {
      if (!lang || lang === 'none') return 'none';
      if (_.findWhere(this.model.get('_media').cc, {
        srclang: lang
      })) return lang;
      return this.model.get('_startLanguage') || 'none';
    },
    onMediaElementPlay: function (event) {
      this.queueGlobalEvent('play');
      Adapt.trigger('media:stop', this);
      if (this.model.get('_pauseWhenOffScreen')) $(this.mediaElement).on('inview', this.onMediaElementInview);
      this.model.set({
        '_isMediaPlaying': true,
        '_isMediaEnded': false
      });

      if (this.completionEvent === 'play') {
        this.setCompletionStatus();
      }
    },
    onMediaElementPause: function (event) {
      this.queueGlobalEvent('pause');
      $(this.mediaElement).off('inview', this.onMediaElementInview);
      this.model.set('_isMediaPlaying', false);
    },
    onMediaElementEnded: function (event) {
      this.queueGlobalEvent('ended');
      this.model.set('_isMediaEnded', true);

      if (this.completionEvent === 'ended') {
        this.setCompletionStatus();
      }
    },
    onMediaElementInview: function (event, isInView) {
      if (!isInView && !event.currentTarget.paused) event.currentTarget.pause();
    },
    onMediaElementSeeking: function (event) {
      var maxViewed = this.model.get('_maxViewed');

      if (!maxViewed) {
        maxViewed = 0;
      }

      if (event.target.currentTime > maxViewed) {
        event.target.currentTime = maxViewed;
      }
    },
    onMediaElementTimeUpdate: function (event) {
      var maxViewed = this.model.get('_maxViewed');

      if (!maxViewed) {
        maxViewed = 0;
      }

      if (event.target.currentTime > maxViewed) {
        this.model.set('_maxViewed', event.target.currentTime);
      }
    },
    setupPlayPauseToggle: function () {
      var player = this.mediaElement.player;

      if (!player) {
        console.log("Media.setupPlayPauseToggle: OOPS! there's no player reference.");
        return;
      }

      player.options.clickToPlayPause = false;
      this.onOverlayClick = this.onOverlayClick.bind(this);
      this.onMediaElementClick = this.onMediaElementClick.bind(this);
      this.$('.mejs-overlay-button').on('click', this.onOverlayClick);
      this.$('.mejs-mediaelement').on('click', this.onMediaElementClick);
    },
    onMediaStop: function (view) {
      if (view && view.cid === this.cid) return;
      if (!this.mediaElement || !this.mediaElement.player) return;
      this.mediaElement.player.pause();
    },
    onOverlayClick: function () {
      var player = this.mediaElement.player;
      if (!player) return;
      player.play();
    },
    onMediaElementClick: function (event) {
      var player = this.mediaElement.player;
      if (!player) return;
      var isPaused = player.media.paused;
      if (!isPaused) player.pause();
    },
    checkIfResetOnRevisit: function () {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    },
    remove: function () {
      this.$('.mejs-overlay-button').off('click', this.onOverlayClick);
      this.$('.mejs-mediaelement').off('click', this.onMediaElementClick);

      if (this.model.get('_useClosedCaptions')) {
        var selector = this.model.get('_playerOptions').toggleCaptionsButtonWhenOnlyOne ? '.mejs-captions-button button' : '.mejs-captions-selector';
        this.$(selector).off('click.mediaCaptionsChange');
      }

      var modelOptions = this.model.get('_playerOptions');
      delete modelOptions.success;
      var media = this.model.get('_media');

      if (media) {
        switch (media.type) {
          case 'video/vimeo':
            this.$('iframe')[0].isRemoved = true;
        }
      }

      if (this.mediaElement && this.mediaElement.player) {
        var playerId = this.mediaElement.player.id;
        purge(this.$el[0]);
        this.mediaElement.player.remove();

        if (window.mejs.players[playerId]) {
          delete window.mejs.players[playerId];
        }
      }

      if (this.mediaElement) {
        $(this.mediaElement).off({
          'play': this.onMediaElementPlay,
          'pause': this.onMediaElementPause,
          'ended': this.onMediaElementEnded,
          'seeking': this.onMediaElementSeeking,
          'timeupdate': this.onMediaElementTimeUpdate,
          'inview': this.onMediaElementInview
        });
        this.mediaElement.src = '';
        $(this.mediaElement.pluginElement).remove();
        delete this.mediaElement;
      }

      ComponentView$1.prototype.remove.call(this);
    },
    onDeviceChanged: function () {
      if (this.model.get('_media').source) {
        this.$('.mejs-container').width(this.$('.component__widget').width());
      }
    },
    onPlayerReady: function (mediaElement, domObject) {
      this.mediaElement = mediaElement;
      var player = this.mediaElement.player;
      if (!player) player = window.mejs.players[this.$('.mejs-container').attr('id')];
      var hasTouch = window.mejs.MediaFeatures.hasTouch;

      if (hasTouch) {
        this.setupPlayPauseToggle();
      }

      this.addThirdPartyAfterFixes();
      this.cleanUpPlayerAfter();

      if (player && this.model.has('_startVolume')) {
        player.setVolume(parseInt(this.model.get('_startVolume')) / 100);
      }

      this.setReadyStatus();
      this.setupEventListeners();
    },
    addThirdPartyAfterFixes: function () {
      var media = this.model.get('_media');

      switch (media.type) {
        case 'video/vimeo':
          this.$('.mejs-container').attr('tabindex', 0);
      }
    },
    cleanUpPlayerAfter: function () {
      this.$("[aria-valuemax='NaN']").attr('aria-valuemax', 0);
    },
    onScreenSizeChanged: function () {
      this.$('audio, video').width(this.$('.component__widget').width());
    },
    onSkipToTranscript: function () {
      _.delay(function () {
        this.$('.media__transcript-btn').a11y_focus();
      }.bind(this), 250);
    },
    onToggleInlineTranscript: function (event) {
      if (event) event.preventDefault();
      var $transcriptBodyContainer = this.$('.media__transcript-body-inline');
      var $button = this.$('.media__transcript-btn-inline');
      var $buttonText = this.$('.media__transcript-btn-inline .media__transcript-btn-text');

      if ($transcriptBodyContainer.hasClass('inline-transcript-open')) {
        $transcriptBodyContainer.stop(true, true).slideUp(function () {
          $(window).resize();
        });
        $button.attr('aria-expanded', false);
        $transcriptBodyContainer.removeClass('inline-transcript-open');
        $buttonText.html(this.model.get('_transcript').inlineTranscriptButton);
      } else {
        $transcriptBodyContainer.stop(true, true).slideDown(function () {
          $(window).resize();
        });
        $button.attr('aria-expanded', true);
        $transcriptBodyContainer.addClass('inline-transcript-open');
        $buttonText.html(this.model.get('_transcript').inlineTranscriptCloseButton);

        if (this.model.get('_transcript')._setCompletionOnView !== false) {
          this.setCompletionStatus();
        }
      }
    },
    onExternalTranscriptClicked: function (event) {
      if (this.model.get('_transcript')._setCompletionOnView !== false) {
        this.setCompletionStatus();
      }
    },
    queueGlobalEvent: function (eventType) {
      var t = Date.now();
      var lastEvent = this.lastEvent || {
        time: 0
      };
      var timeSinceLastEvent = t - lastEvent.time;
      var debounceTime = 500;
      this.lastEvent = {
        time: t,
        type: eventType
      };
      clearTimeout(this.eventTimeout);

      if (eventType === 'ended') {
        return this.triggerGlobalEvent(eventType);
      }

      if (timeSinceLastEvent > debounceTime) {
        this.eventTimeout = setTimeout(this.triggerGlobalEvent.bind(this, eventType), debounceTime);
      }
    },
    triggerGlobalEvent: function (eventType) {
      var player = this.mediaElement.player;
      var eventObj = {
        type: eventType,
        src: this.mediaElement.src,
        platform: this.mediaElement.pluginType
      };
      if (player) eventObj.isVideo = player.isVideo;
      Adapt.trigger('media', eventObj);
    }
  });
  var Media = __AMD("components/adapt-contrib-media/js/adapt-contrib-media", Adapt.register('media', {
    model: ComponentModel$1.extend({}),
    view: MediaView
  }));

  var MODE$2 = __AMD("components/adapt-contrib-narrative/js/modeEnum", new ENUM(['SMALL', 'LARGE']));

  var NarrativeView = ComponentView$1.extend({
    _isInitial: true,
    events: {
      'click .js-narrative-strapline-open-popup': 'openPopup',
      'click .js-narrative-controls-click': 'onNavigationClicked',
      'click .js-narrative-progress-click': 'onProgressClicked'
    },
    preRender: function () {
      this.listenTo(Adapt, {
        'device:changed device:resize': this.reRender,
        'notify:closed': this.closeNotify
      });
      this.renderMode();
      this.listenTo(this.model.getChildren(), {
        'change:_isActive': this.onItemsActiveChange,
        'change:_isVisited': this.onItemsVisitedChange
      });
      this.checkIfResetOnRevisit();
      this.calculateWidths();
    },
    onItemsActiveChange: function (item, _isActive) {
      if (_isActive === true) {
        this.setStage(item);
      }
    },
    onItemsVisitedChange: function (item, isVisited) {
      if (!isVisited) return;
      this.$('[data-index="' + item.get('_index') + '"]').addClass('is-visited');
    },
    calculateMode: function () {
      var mode = Adapt.device.screenSize === 'large' ? MODE$2.LARGE : MODE$2.SMALL;
      this.model.set('_mode', mode);
    },
    renderMode: function () {
      this.calculateMode();

      if (this.isLargeMode()) {
        this.$el.addClass('mode-large').removeClass('mode-small');
      } else {
        this.$el.addClass('mode-small').removeClass('mode-large');
      }
    },
    isLargeMode: function () {
      return this.model.get('_mode') === MODE$2.LARGE;
    },
    postRender: function () {
      this.renderMode();
      this.setupNarrative();
      this.$('.narrative__slider').imageready(this.setReadyStatus.bind(this));

      if (Adapt.config.get('_disableAnimation')) {
        this.$el.addClass('disable-animation');
      }
    },
    checkIfResetOnRevisit: function () {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    },
    setupNarrative: function () {
      this.renderMode();
      var items = this.model.getChildren();
      if (!items || !items.length) return;
      var activeItem = this.model.getActiveItem();

      if (!activeItem) {
        activeItem = this.model.getItem(0);
        activeItem.toggleActive(true);
      } else {
        items.trigger('change:_isActive', activeItem, true);
      }

      this.calculateWidths();

      if (!this.isLargeMode() && !this.model.get('_wasHotgraphic')) {
        this.replaceInstructions();
      }

      this.setupEventListeners();
      this._isInitial = false;
    },
    calculateWidths: function () {
      var itemCount = this.model.getChildren().length;
      this.model.set({
        '_totalWidth': 100 * itemCount,
        '_itemWidth': 100 / itemCount
      });
    },
    resizeControl: function () {
      var previousMode = this.model.get('_mode');
      this.renderMode();
      if (previousMode !== this.model.get('_mode')) this.replaceInstructions();
      this.evaluateNavigation();
      var activeItem = this.model.getActiveItem();
      if (activeItem) this.setStage(activeItem);
    },
    reRender: function () {
      if (this.model.get('_wasHotgraphic') && this.isLargeMode()) {
        this.replaceWithHotgraphic();
      } else {
        this.resizeControl();
      }
    },
    closeNotify: function () {
      this.evaluateCompletion();
    },
    replaceInstructions: function () {
      if (this.isLargeMode()) {
        this.$('.narrative__instruction-inner').html(this.model.get('instruction'));
      } else if (this.model.get('mobileInstruction') && !this.model.get('_wasHotgraphic')) {
        this.$('.narrative__instruction-inner').html(this.model.get('mobileInstruction'));
      }
    },
    replaceWithHotgraphic: function () {
      if (!Adapt.componentStore.hotgraphic) throw "Hotgraphic not included in build";
      var HotgraphicView = Adapt.componentStore.hotgraphic.view;
      var model = this.prepareHotgraphicModel();
      var newHotgraphic = new HotgraphicView({
        model: model
      });
      var $container = $(".component__container", $("." + this.model.get("_parentId")));
      $container.append(newHotgraphic.$el);
      this.remove();
      $.a11y_update();

      _.defer(function () {
        Adapt.trigger('device:resize');
      });
    },
    prepareHotgraphicModel: function () {
      var model = this.model;
      model.resetActiveItems();
      model.set({
        '_isPopupOpen': false,
        '_component': 'hotgraphic',
        'body': model.get('originalBody'),
        'instruction': model.get('originalInstruction')
      });
      return model;
    },
    moveSliderToIndex: function (itemIndex) {
      var offset = this.model.get('_itemWidth') * itemIndex;

      if (Adapt.config.get('_defaultDirection') === 'ltr') {
        offset *= -1;
      }

      var cssValue = 'translateX(' + offset + '%)';
      var $sliderElm = this.$('.narrative__slider');
      var $straplineHeaderElm = this.$('.narrative__strapline-header-inner');
      $sliderElm.css('transform', cssValue);
      $straplineHeaderElm.css('transform', cssValue);

      if (Adapt.config.get('_disableAnimation') || this._isInitial) {
        this.onTransitionEnd();
      } else {
        $sliderElm.one('transitionend', this.onTransitionEnd.bind(this));
      }
    },
    onTransitionEnd: function () {
      if (this._isInitial) return;
      var index = this.model.getActiveItem().get('_index');

      if (this.isLargeMode()) {
        this.$('.narrative__content-item[data-index="' + index + '"]').a11y_focus();
      } else {
        this.$('.narrative__strapline-btn').a11y_focus();
      }
    },
    setStage: function (item) {
      var index = item.get('_index');

      if (this.isLargeMode()) {
        item.toggleVisited(true);
      }

      var $slideGraphics = this.$('.narrative__slider-image-container');
      this.$('.narrative__progress:visible').removeClass('is-selected').filter('[data-index="' + index + '"]').addClass('is-selected');
      $slideGraphics.children('.controls').a11y_cntrl_enabled(false);
      $slideGraphics.filter('[data-index="' + index + '"]').children('.controls').a11y_cntrl_enabled(true);
      this.$('.narrative__content-item').addClass('u-visibility-hidden u-display-none').a11y_on(false).filter('[data-index="' + index + '"]').removeClass('u-visibility-hidden u-display-none').a11y_on(true);
      this.$('.narrative__strapline-btn').a11y_cntrl_enabled(false).filter('[data-index="' + index + '"]').a11y_cntrl_enabled(true);
      this.evaluateNavigation();
      this.evaluateCompletion();
      this.moveSliderToIndex(index);
    },
    evaluateNavigation: function () {
      var active = this.model.getActiveItem();
      if (!active) return;
      var currentStage = active.get('_index');
      var itemCount = this.model.getChildren().length;
      var isAtStart = currentStage === 0;
      var isAtEnd = currentStage === itemCount - 1;
      this.$('.narrative__controls-left').toggleClass('u-visibility-hidden', isAtStart);
      this.$('.narrative__controls-right').toggleClass('u-visibility-hidden', isAtEnd);
    },
    evaluateCompletion: function () {
      if (this.model.areAllItemsCompleted()) {
        this.trigger('allItems');
      }
    },
    openPopup: function (event) {
      event && event.preventDefault();
      var currentItem = this.model.getActiveItem();
      Adapt.trigger('notify:popup', {
        title: currentItem.get('title'),
        body: currentItem.get('body')
      });
      Adapt.on('popup:opened', function () {
        currentItem.toggleVisited(true);
      });
    },
    onNavigationClicked: function (event) {
      var stage = this.model.getActiveItem().get('_index');

      if ($(event.currentTarget).hasClass('narrative__controls-right')) {
        this.model.setActiveItem(++stage);
      } else if ($(event.currentTarget).hasClass('narrative__controls-left')) {
        this.model.setActiveItem(--stage);
      }
    },
    onProgressClicked: function (event) {
      event && event.preventDefault();
      var clickedIndex = $(event.target).data('index');
      this.model.setActiveItem(clickedIndex);
    },
    setupEventListeners: function () {
      if (this.model.get('_setCompletionOn') === 'inview') {
        this.setupInviewCompletion('.component__widget');
      }
    }
  });
  var NarrativeView$1 = __AMD("components/adapt-contrib-narrative/js/narrativeView", NarrativeView);

  __AMD("components/adapt-contrib-narrative/js/adapt-contrib-narrative", Adapt.register('narrative', {
    model: ItemsComponentModel,
    view: NarrativeView$1
  }));

  var SliderView = QuestionView$1.extend({
    events: {
      'click .js-slider-number-click': 'onNumberSelected',
      'focus .js-slider-item-input': 'onHandleFocus',
      'blur .js-slider-item-input': 'onHandleBlur'
    },
    resetQuestionOnRevisit: function () {
      this.setAllItemsEnabled();
      this.model.deselectAllItems();
      this.resetQuestion();
    },
    setupQuestion: function () {
      if (this.model.get('_isSubmitted')) return;
      this.selectItem(this.getIndexFromValue(this.model.get('_selectedItem').value), true);
    },
    setupRangeslider: function () {
      this.$sliderScaleMarker = this.$('.js-slider-number-selection');
      this.$slider = this.$('.js-slider-item-input');

      if (this.model.has('_scaleStep')) {
        this.$slider.attr({
          "step": this.model.get('_scaleStep')
        });
      }

      this.$slider.rangeslider({
        polyfill: false,
        onSlide: _.bind(this.handleSlide, this)
      });
      this.oldValue = 0;

      if (this._deferEnable) {
        this.setAllItemsEnabled();
      }
    },
    handleSlide: function (position, value) {
      if (this.oldValue === value) {
        return;
      }

      var itemIndex = this.getIndexFromValue(value);
      var pixels = this.mapIndexToPixels(itemIndex);
      this.selectItem(itemIndex, false);
      this.animateToPosition(pixels);
      this.oldValue = value;
    },
    disableQuestion: function () {
      this.setAllItemsEnabled();
    },
    enableQuestion: function () {
      this.setAllItemsEnabled();
    },
    setAllItemsEnabled: function () {
      var isEnabled = this.model.get('_isEnabled');

      if (!this.$slider) {
        this._deferEnable = true;
        return;
      }

      if (!isEnabled) {
        this.$('.slider__widget').addClass('is-disabled');
        this.$slider.prop('disabled', true).rangeslider('update', true);
        return;
      }

      this.$('.slider__widget').removeClass('is-disabled');
      this.$slider.prop('disabled', false).rangeslider('update', true);
    },
    onQuestionRendered: function () {
      this.setupRangeslider();
      this.setScalePositions();
      this.onScreenSizeChanged();
      this.showScaleMarker(true);
      this.listenTo(Adapt, 'device:resize', this.onScreenSizeChanged);
      this.setReadyStatus();
    },
    animateToPosition: function (newPosition) {
      if (!this.$sliderScaleMarker) return;
      this.$sliderScaleMarker.velocity('stop').velocity({
        left: newPosition
      }, {
        duration: 200,
        easing: "linear",
        mobileHA: false
      });
    },
    getIndexFromValue: function (itemValue) {
      var scaleStart = this.model.get('_scaleStart');
      var scaleEnd = this.model.get('_scaleEnd');
      return Math.round(this.mapValue(itemValue, scaleStart, scaleEnd, 0, this.model.get('_items').length - 1));
    },
    mapIndexToPixels: function (value, $widthObject) {
      var numberOfItems = this.model.get('_items').length;
      var width = $widthObject ? $widthObject.width() : this.$('.js-slider-scale').width();
      return Math.round(this.mapValue(value, 0, numberOfItems - 1, 0, width));
    },
    mapPixelsToIndex: function (value) {
      var numberOfItems = this.model.get('_items').length;
      var width = this.$('.slider-sliderange').width();
      return Math.round(this.mapValue(value, 0, width, 0, numberOfItems - 1));
    },
    normalise: function (value, low, high) {
      var range = high - low;
      return (value - low) / range;
    },
    mapValue: function (value, inputLow, inputHigh, outputLow, outputHigh) {
      var normal = this.normalise(value, inputLow, inputHigh);
      return normal * (outputHigh - outputLow) + outputLow;
    },
    onHandleFocus: function (event) {
      event.preventDefault();
      this.$slider.on('keydown', _.bind(this.onKeyDown, this));
    },
    onHandleBlur: function (event) {
      event.preventDefault();
      this.$slider.off('keydown');
    },
    onKeyDown: function (event) {
      if (event.which === 9) return;
      event.preventDefault();
      var newItemIndex = this.getIndexFromValue(this.model.get('_selectedItem').value);

      switch (event.which) {
        case 40:
        case 37:
          newItemIndex = Math.max(newItemIndex - 1, 0);
          break;

        case 38:
        case 39:
          newItemIndex = Math.min(newItemIndex + 1, this.model.get('_items').length - 1);
          break;
      }

      this.selectItem(newItemIndex);
      if (typeof newItemIndex === 'number') this.showScaleMarker(true);
      this.animateToPosition(this.mapIndexToPixels(newItemIndex));
      this.setSliderValue(this.getValueFromIndex(newItemIndex));
    },
    onNumberSelected: function (event) {
      event.preventDefault();

      if (this.model.get('_isInteractionComplete')) {
        return;
      }

      if (this.$slider.prop('disabled')) {
        return;
      }

      var itemValue = parseFloat($(event.currentTarget).attr('data-id'));
      var index = this.getIndexFromValue(itemValue);
      this.selectItem(index);
      this.animateToPosition(this.mapIndexToPixels(index));
      this.setSliderValue(itemValue);
    },
    getValueFromIndex: function (index) {
      return this.model.get('_items')[index].value;
    },
    resetControlStyles: function () {
      this.$('.slider-handle').empty();
      this.showScaleMarker(false);
      this.$('.slider-bar').animate({
        width: '0px'
      });
      this.setSliderValue(this.model.get('_items')[0].value);
    },
    onCannotSubmit: function () {},
    setSliderValue: function (value) {
      if (this.$slider) {
        this.$slider.val(value).change();
      }
    },
    showMarking: function () {
      if (!this.model.get('_canShowMarking')) return;
      this.$('.slider__widget').removeClass('is-correct is-incorrect').addClass(this.model.get('_selectedItem').correct ? 'is-correct' : 'is-incorrect');
    },
    resetQuestion: function () {
      this.selectItem(0, true);
      this.animateToPosition(0);
      this.resetControlStyles();
      this.showScaleMarker(true);
    },
    setScalePositions: function () {
      var numberOfItems = this.model.get('_items').length;

      _.each(this.model.get('_items'), function (item, index) {
        var normalisedPosition = this.normalise(index, 0, numberOfItems - 1);
        this.$('.js-slider-number').eq(index).data('normalisedPosition', normalisedPosition);
      }, this);
    },
    showScale: function () {
      var $markers = this.$('.js-slider-scale-notch-container').empty();

      if (this.model.get('_showScale') === false) {
        $markers.eq(0).css({
          display: 'none'
        });
        this.$('.js-slider-number').css(this.model.get('_showScaleIndicator') ? {
          visibility: 'hidden'
        } : {
          display: 'none'
        });
        return;
      }

      var $scaler = this.$('.js-slider-scale');

      for (var i = 1, count = this.model.get('_items').length - 1; i < count; i++) {
        $markers.append("<div class='slider__scale-notch' style='left: " + this.mapIndexToPixels(i, $scaler) + "px'>");
      }

      this.showScaleNumbers();
    },
    showScaleNumbers: function () {
      var $scaler = this.$('.js-slider-scale');
      var $numbers = this.$('.js-slider-number');

      if (this.model.get('_showScaleNumbers') === false) {
        $numbers.css('display', 'none');
        return;
      }

      var scaleWidth = $scaler.width();
      this.model.get('_items').forEach(function (item, index) {
        var $number = $numbers.eq(index);
        var newLeft = Math.round($number.data('normalisedPosition') * scaleWidth);
        $number.css({
          left: newLeft
        });
      });
    },
    showLabels: function () {
      if (!this.model.get('labelStart') && !this.model.get('labelEnd')) {
        this.$('.js-slider-label-container').eq(0).css({
          display: 'none'
        });
      }
    },
    remapSliderBar: function () {
      var $scaler = this.$('.js-slider-scale');
      var currentIndex = this.getIndexFromValue(this.model.get('_selectedItem').value);
      var left = this.mapIndexToPixels(currentIndex, $scaler);
      this.$('.slider-handle').css({
        left: left + 'px'
      });
      this.$('.js-slider-number-selection').css({
        left: left + 'px'
      });
      this.$('.slider-bar').width(left);
    },
    onScreenSizeChanged: function () {
      this.showScale();
      this.showLabels();
      this.remapSliderBar();

      if (this.$('.slider__widget').hasClass('show-user-answer')) {
        this.hideCorrectAnswer();
      } else if (this.$('.slider__widget').hasClass('show-correct-answer')) {
        this.showCorrectAnswer();
      }
    },
    showCorrectAnswer: function () {
      var answers = [];

      if (this.model.has('_correctAnswer')) {
        var correctAnswer = this.model.get('_correctAnswer');
      }

      if (this.model.has('_correctRange')) {
        var bottom = this.model.get('_correctRange')._bottom;

        var top = this.model.get('_correctRange')._top;

        var step = this.model.has('_scaleStep') ? this.model.get('_scaleStep') : 1;
      }

      this.showScaleMarker(false);

      if (correctAnswer) {
        answers.push(correctAnswer);
      } else if (bottom !== undefined && top !== undefined) {
        var answer = this.model.get('_correctRange')._bottom;

        var topOfRange = this.model.get('_correctRange')._top;

        while (answer <= topOfRange) {
          answers.push(answer);
          answer += step;
        }
      } else {
        console.log("adapt-contrib-slider::WARNING: no correct answer or correct range set in JSON");
      }

      var middleAnswer = answers[Math.floor(answers.length / 2)];
      this.animateToPosition(this.mapIndexToPixels(this.getIndexFromValue(middleAnswer)));
      this.showModelAnswers(answers);
      this.setSliderValue(middleAnswer);
    },
    showModelAnswers: function (correctAnswerArray) {
      var $parentDiv = this.$('.js-slider-model-range');

      _.each(correctAnswerArray, function (correctAnswer, index) {
        $parentDiv.append($("<div class='slider__number-model-answer'>"));
        var $element = $(this.$('.js-slider-model-range .slider__number-model-answer')[index]);
        var startingLeft = this.mapIndexToPixels(this.getIndexFromValue(this.model.get('_selectedItem').value));
        if (this.model.get('_showNumber')) $element.html(correctAnswer);
        $element.css({
          left: startingLeft
        }).fadeIn(0, _.bind(function () {
          $element.animate({
            left: this.mapIndexToPixels(this.getIndexFromValue(correctAnswer))
          });
        }, this));
      }, this);
    },
    hideCorrectAnswer: function () {
      var userAnswerIndex = this.getIndexFromValue(this.model.get('_userAnswer'));
      this.$('.js-slider-model-range').empty();
      this.showScaleMarker(true);
      this.selectItem(userAnswerIndex, true);
      this.animateToPosition(this.mapIndexToPixels(userAnswerIndex));
      this.setSliderValue(this.model.get('_userAnswer'));
    },
    selectItem: function (itemIndex, noFocus) {
      _.each(this.model.get('_items'), function (item, index) {
        item.selected = index === itemIndex;

        if (item.selected) {
          this.model.set('_selectedItem', item);
          this.$('.js-slider-item-input').attr({
            "value": item.value,
            "aria-valuenow": item.value
          });
        }
      }, this);

      this.showNumber(true);
    },
    showScaleMarker: function (show) {
      var $scaleMarker = this.$('.js-slider-number-selection');

      if (this.model.get('_showScaleIndicator')) {
        this.showNumber(show);

        if (show) {
          $scaleMarker.addClass('display-block');
        } else {
          $scaleMarker.removeClass('display-block');
        }
      }
    },
    showNumber: function (show) {
      var $scaleMarker = this.$('.js-slider-number-selection');

      if (this.model.get('_showNumber')) {
        if (show) {
          $scaleMarker.html(this.model.get('_selectedItem').value);
        } else {
          $scaleMarker.html = "";
        }
      }
    }
  });
  var SliderView$1 = __AMD("components/adapt-contrib-slider/js/sliderView", SliderView);

  var SliderModel = QuestionModel$1.extend({
    init: function () {
      QuestionModel$1.prototype.init.call(this);
      this.setupModelItems();
      this.set('_selectedItem', this.get('_items')[0]);
    },
    getDecimalPlaces: function (num) {
      return (num.toString().split('.')[1] || []).length;
    },
    setupModelItems: function () {
      var items = [];
      var answer = this.get('_correctAnswer');
      var range = this.get('_correctRange');
      var start = this.get('_scaleStart');
      var end = this.get('_scaleEnd');
      var step = this.get('_scaleStep') || 1;
      var dp = this.getDecimalPlaces(step);

      for (var i = start; i <= end; i += step) {
        if (dp !== 0) {
          i = parseFloat(i.toFixed(dp));
        }

        items.push({
          value: i,
          selected: false,
          correct: answer ? i === Number(answer) : i >= range._bottom && i <= range._top
        });
      }

      this.set({
        '_items': items,
        '_marginDir': Adapt.config.get('_defaultDirection') === 'rtl' ? 'right' : 'left'
      });
    },
    canSubmit: function () {
      return true;
    },
    restoreUserAnswers: function () {
      if (!this.get('_isSubmitted')) {
        this.set({
          _selectedItem: {},
          _userAnswer: undefined
        });
        return;
      }

      var items = this.get('_items');
      var userAnswer = this.get('_userAnswer');

      for (var i = 0, l = items.length; i < l; i++) {
        var item = items[i];

        if (item.value === userAnswer) {
          item.selected = true;
          this.set('_selectedItem', item);
          break;
        }
      }

      this.setQuestionAsSubmitted();
      this.markQuestion();
      this.setScore();
      this.setupFeedback();
    },
    storeUserAnswer: function () {
      this.set('_userAnswer', this.get('_selectedItem').value);
    },
    resetUserAnswer: function () {
      this.set({
        _isAtLeastOneCorrectSelection: false,
        _selectedItem: {},
        _userAnswer: undefined
      });
    },
    deselectAllItems: function () {
      _.each(this.get('_items'), function (item) {
        item.selected = false;
      }, this);
    },
    isCorrect: function () {
      var numberOfCorrectAnswers = 0;

      _.each(this.get('_items'), function (item, index) {
        if (item.selected && item.correct) {
          this.set('_isAtLeastOneCorrectSelection', true);
          numberOfCorrectAnswers++;
        }
      }, this);

      this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);
      return this.get('_isAtLeastOneCorrectSelection') ? true : false;
    },
    isPartlyCorrect: function () {
      return this.get('_isAtLeastOneCorrectSelection');
    },
    setScore: function () {
      var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
      var questionWeight = this.get('_questionWeight');
      var score = questionWeight * numberOfCorrectAnswers;
      this.set('_score', score);
    },
    getResponse: function () {
      return this.get('_userAnswer').toString();
    },
    getResponseType: function () {
      return "numeric";
    }
  });
  var SliderModel$1 = __AMD("components/adapt-contrib-slider/js/sliderModel", SliderModel);

  __AMD("components/adapt-contrib-slider/js/adapt-contrib-slider", Adapt.register("slider", {
    view: SliderView$1,
    model: SliderModel$1
  }));

  var TextView = ComponentView$1.extend({
    preRender: function () {
      this.checkIfResetOnRevisit();
    },
    postRender: function () {
      this.setReadyStatus();
      this.setupInview();
    },
    setupInview: function () {
      var selector = this.getInviewElementSelector();

      if (!selector) {
        this.setCompletionStatus();
        return;
      }

      this.setupInviewCompletion(selector);
    },
    getInviewElementSelector: function () {
      if (this.model.get('body')) return '.component__body';
      if (this.model.get('instruction')) return '.component__instruction';
      if (this.model.get('title') || this.model.get('displayTitle')) return '.component__title';
      return null;
    },
    checkIfResetOnRevisit: function () {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    }
  }, {
    template: 'text'
  });
  __AMD("components/adapt-contrib-text/js/adapt-contrib-text", Adapt.register('text', {
    model: ComponentModel$1.extend({}),
    view: TextView
  }));

  var TextInputView = QuestionView$1.extend({
    events: {
      'focus .js-textinput-textbox': 'clearValidationError',
      'change .js-textinput-textbox': 'onInputChanged',
      'keyup .js-textinput-textbox': 'onInputChanged'
    },
    resetQuestionOnRevisit: function () {
      this.setAllItemsEnabled(false);
      this.resetQuestion();
    },
    setupQuestion: function () {
      this.model.setupRandomisation();
    },
    disableQuestion: function () {
      this.setAllItemsEnabled(false);
    },
    enableQuestion: function () {
      this.setAllItemsEnabled(true);
    },
    setAllItemsEnabled: function (isEnabled) {
      this.model.get('_items').forEach(function (item, index) {
        var $itemInput = this.$('.js-textinput-textbox').eq(index);
        $itemInput.prop('disabled', !isEnabled);
      }, this);
    },
    onQuestionRendered: function () {
      this.setReadyStatus();
    },
    clearValidationError: function () {
      this.$('.js-textinput-textbox').removeClass('has-error');
    },
    onCannotSubmit: function () {
      this.showValidationError();
    },
    showValidationError: function () {
      this.$('.js-textinput-textbox').addClass('has-error');
    },
    showMarking: function () {
      if (!this.model.get('_canShowMarking')) return;
      this.model.get('_items').forEach(function (item, i) {
        var $item = this.$('.js-textinput-item').eq(i);
        $item.removeClass('is-correct is-incorrect').addClass(item._isCorrect ? 'is-correct' : 'is-incorrect');
      }, this);
    },
    resetQuestion: function () {
      this.$('.js-textinput-textbox').prop('disabled', !this.model.get('_isEnabled')).val('');
      this.model.set({
        _isAtLeastOneCorrectSelection: false,
        _isCorrect: undefined
      });
    },
    showCorrectAnswer: function () {
      if (this.model.get('_answers')) {
        var correctAnswers = this.model.get('_answers');
        this.model.get('_items').forEach(function (item, index) {
          this.$('.js-textinput-textbox').eq(index).val(correctAnswers[index][0]);
        }, this);
      } else {
        this.model.get('_items').forEach(function (item, index) {
          this.$('.js-textinput-textbox').eq(index).val(item._answers[0]);
        }, this);
      }
    },
    hideCorrectAnswer: function () {
      this.model.get('_items').forEach(function (item, index) {
        this.$('.js-textinput-textbox').eq(index).val(item.userAnswer);
      }, this);
    },
    onInputChanged: function (e) {
      var $input = $(e.target);
      this.model.setItemUserAnswer($input.parents('.js-textinput-item').index(), $input.val());
    }
  });
  var TextInputView$1 = __AMD("components/adapt-contrib-textInput/js/textInputView", TextInputView);

  var TextInputModel = QuestionModel$1.extend({
    init: function () {
      QuestionModel$1.prototype.init.call(this);
      this.set('_genericAnswerIndexOffset', TextInputModel.genericAnswerIndexOffset);
      this.setupQuestionItemIndexes();
      this.checkCanSubmit();
    },
    setupQuestionItemIndexes: function () {
      this.get('_items').forEach(function (item, index) {
        if (item._index === undefined) item._index = index;
        if (item._answerIndex === undefined) item._answerIndex = -1;
      });
    },
    restoreUserAnswers: function () {
      if (!this.get('_isSubmitted')) return;
      var userAnswer = this.get('_userAnswer');
      var genericAnswers = this.get('_answers');
      this.get('_items').forEach(function (item) {
        var answerIndex = userAnswer[item._index];

        if (answerIndex >= TextInputModel.genericAnswerIndexOffset) {
          item.userAnswer = genericAnswers[answerIndex - TextInputModel.genericAnswerIndexOffset];
          item._answerIndex = answerIndex;
        } else if (answerIndex > -1) {
          item.userAnswer = item._answers[answerIndex];
          item._answerIndex = answerIndex;
        } else {
          if (item.userAnswer === undefined) item.userAnswer = '******';
          item._answerIndex = -1;
        }

        if (item.userAnswer instanceof Array) item.userAnswer = item.userAnswer[0];
      });
      this.setQuestionAsSubmitted();
      this.markQuestion();
      this.setScore();
      this.setupFeedback();
    },
    setupRandomisation: function () {
      if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
      this.set('_items', _.shuffle(this.get('_items')));
    },
    canSubmit: function () {
      return this.get('_items').every(function (_ref) {
        var userAnswer = _ref.userAnswer;
        return userAnswer;
      });
    },
    setItemUserAnswer: function (itemIndex, userAnswer) {
      var item = this.get('_items')[itemIndex];
      item.userAnswer = userAnswer;
      this.checkCanSubmit();
    },
    storeUserAnswer: function () {
      var items = this.get('_items');
      this.isCorrect();
      var userAnswer = new Array(items.length);
      items.forEach(function (item, index) {
        userAnswer[item._index] = item._answerIndex;
      });
      this.set('_userAnswer', userAnswer);
    },
    isCorrect: function () {
      if (this.get('_answers')) {
        this.markGenericAnswers();
      } else {
        this.markSpecificAnswers();
      }

      return !_.contains(_.pluck(this.get('_items'), '_isCorrect'), false);
    },
    isPartlyCorrect: function () {
      return this.get('_isAtLeastOneCorrectSelection');
    },
    markGenericAnswers: function () {
      var numberOfCorrectAnswers = 0;
      var correctAnswers = this.get('_answers').slice();
      var usedAnswerIndexes = [];
      this.get('_items').forEach(function (item) {
        correctAnswers.forEach(function (answerGroup, answerIndex) {
          if (_.indexOf(usedAnswerIndexes, answerIndex) > -1) return;
          if (this.checkAnswerIsCorrect(answerGroup, item.userAnswer) == false) return;
          usedAnswerIndexes.push(answerIndex);
          item._isCorrect = true;
          item._answerIndex = answerIndex + TextInputModel.genericAnswerIndexOffset;
          this.set({
            _numberOfCorrectAnswers: ++numberOfCorrectAnswers,
            _isAtLeastOneCorrectSelection: true
          });
        }, this);
        if (!item._isCorrect) item._isCorrect = false;
      }, this);
    },
    markSpecificAnswers: function () {
      var numberOfCorrectAnswers = 0;
      this.get('_items').forEach(function (item) {
        if (!item._answers) return;
        var userAnswer = item.userAnswer || '';

        if (this.checkAnswerIsCorrect(item._answers, userAnswer)) {
          item._isCorrect = true;
          item._answerIndex = _.indexOf(item._answers, this.cleanupUserAnswer(userAnswer));
          this.set({
            _numberOfCorrectAnswers: ++numberOfCorrectAnswers,
            _isAtLeastOneCorrectSelection: true
          });
        } else {
          item._isCorrect = false;
          item._answerIndex = -1;
        }
      }, this);
    },
    checkAnswerIsCorrect: function (possibleAnswers, userAnswer) {
      var uAnswer = this.cleanupUserAnswer(userAnswer);
      var matched = possibleAnswers.filter(function (cAnswer) {
        return this.cleanupUserAnswer(cAnswer) == uAnswer;
      }, this);
      var answerIsCorrect = matched && matched.length > 0;
      if (answerIsCorrect) this.set('_hasAtLeastOneCorrectSelection', true);
      return answerIsCorrect;
    },
    cleanupUserAnswer: function (userAnswer) {
      if (this.get('_allowsAnyCase')) {
        userAnswer = userAnswer.toLowerCase();
      }

      if (this.get('_allowsPunctuation')) {
        userAnswer = userAnswer.replace(/[\.,-\/#!$£%\^&\*;:{}=\-_`~()]/g, '');
        userAnswer = userAnswer.replace(/(  +)+/g, ' ');
      }

      return $.trim(userAnswer);
    },
    setScore: function () {
      var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
      var questionWeight = this.get('_questionWeight');
      var itemLength = this.get('_items').length;
      var score = questionWeight * numberOfCorrectAnswers / itemLength;
      this.set('_score', score);
    },
    resetUserAnswer: function () {
      this.get('_items').forEach(function (item) {
        item._isCorrect = false;
        item.userAnswer = '';
      });
    },
    getResponse: function () {
      return _.pluck(this.get('_items'), 'userAnswer').join('[,]');
    },
    getResponseType: function () {
      return 'fill-in';
    }
  }, {
    genericAnswerIndexOffset: 65536
  });
  var TextInputModel$1 = __AMD("components/adapt-contrib-textInput/js/textInputModel", TextInputModel);

  __AMD("components/adapt-contrib-textInput/js/adapt-contrib-textInput", Adapt.register('textinput', {
    view: TextInputView$1,
    model: TextInputModel$1
  }));

  var TextInputPlusView$2 = function (_QuestionView) {
    _inherits(TextInputPlusView, _QuestionView);

    var _super = _createSuper(TextInputPlusView);

    function TextInputPlusView() {
      _classCallCheck(this, TextInputPlusView);

      return _super.apply(this, arguments);
    }

    _createClass(TextInputPlusView, [{
      key: "events",
      value: function events() {
        return {
          "input .js-essay-textarea": "onTextAreaInput",
          "click .js-essay-answer-btn": "onAnswerBtnClick"
        };
      }
    }, {
      key: "onTextAreaInput",
      value: function onTextAreaInput(event) {
        this.model.set("_userInput", $(event.currentTarget).val());
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(this.model, "change:_userInput", this.onUserInputChange);
        this.listenTo(this.model, "change:_isShowingAnswer", this.onShowingAnswerChange);
      }
    }, {
      key: "onUserInputChange",
      value: function onUserInputChange(model, userInput) {
        this.$(".js-essay-length").toggleClass("has-error", userInput.length < this.model.get("_answerLength")._min || userInput.length > this.model.get("_answerLength")._max);
        this.$(".js-essay-length-count").text(userInput.length);
      }
    }, {
      key: "onAnswerBtnClick",
      value: function onAnswerBtnClick() {
        this.model.set("_isShowingAnswer", !Boolean(this.model.get("_isShowingAnswer")));
      }
    }, {
      key: "onShowingAnswerChange",
      value: function onShowingAnswerChange(model, isShowingAnswer) {
        this.$el.toggleClass("is-answer-shown", isShowingAnswer);
        this.$(".js-essay-answer-btn").text(isShowingAnswer ? "Hide example essay" : "Show example essay");
      }
    }, {
      key: "postRender",
      value: function postRender() {
        _get(_getPrototypeOf(TextInputPlusView.prototype), "postRender", this).call(this);

        this.setupEventListeners();
      }
    }, {
      key: "resetQuestionOnRevisit",
      value: function resetQuestionOnRevisit() {
        this.setAllItemsEnabled(false);
        this.resetQuestion();
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.model.setupRandomisation();
      }
    }, {
      key: "disableQuestion",
      value: function disableQuestion() {
        this.setAllItemsEnabled(false);
      }
    }, {
      key: "enableQuestion",
      value: function enableQuestion() {
        this.setAllItemsEnabled(true);
      }
    }, {
      key: "setAllItemsEnabled",
      value: function setAllItemsEnabled(isEnabled) {
        this.model.get('_items').forEach(function (item, index) {
          var $itemInput = this.$('.js-textinputplus-textbox').eq(index);
          $itemInput.prop('disabled', !isEnabled);
        }, this);
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setReadyStatus();
      }
    }, {
      key: "clearValidationError",
      value: function clearValidationError() {}
    }, {
      key: "onCannotSubmit",
      value: function onCannotSubmit() {
        this.showValidationError();
      }
    }, {
      key: "showValidationError",
      value: function showValidationError() {}
    }, {
      key: "showMarking",
      value: function showMarking() {}
    }, {
      key: "updateMarking",
      value: function updateMarking() {}
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        this.$('.js-textinputplus-textbox').prop('disabled', !this.model.get('_isEnabled')).val('');
        this.attemptsBeforeHint = 3;
        this.model.set({
          _isAtLeastOneCorrectSelection: false,
          _isCorrect: undefined
        });
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        if (this.model.get('_answers')) {
          var correctAnswers = this.model.get('_answers');
          this.model.get('_items').forEach(function (item, index) {
            this.$('.js-textinputplus-textbox').eq(index).val(correctAnswers[index][0]);
          }, this);
        } else {
          this.model.get('_items').forEach(function (item, index) {
            this.$('.js-textinputplus-textbox').eq(index).val(item._answers[0]);
          }, this);
        }
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        this.model.get('_items').forEach(function (item, index) {
          this.$('.js-textinputplus-textbox').eq(index).val(item.userAnswer);
        }, this);
      }
    }, {
      key: "onInputChanged",
      value: function onInputChanged(e) {
        var $input = $(e.target);
        this.model.setItemUserAnswer($input.attr('data-adapt-index'), $input.val());
      }
    }, {
      key: "clearItemState",
      value: function clearItemState(index) {
        var $input = this.$('.js-textinputplus-textbox');
        var $item = this.$('.js-textinputplus-item');

        if (index !== undefined) {
          $item = $item.filter("[data-adapt-index=" + index + "]");
          $input = $input.filter("[data-adapt-index=" + index + "]");
        }

        $input.prop('disabled', !this.model.get('_isEnabled')).val('').parent().removeClass('is-incorrect is-correct');
        this.model.setItemUserAnswer(index, '');
        $item.removeClass('is-correct is-incorrect');
      }
    }, {
      key: "onIncorrectIconClick",
      value: function onIncorrectIconClick(event) {
        var index = $(event.currentTarget).attr("data-adapt-index");
        this.clearItemState(index);
      }
    }]);

    return TextInputPlusView;
  }(QuestionView$1);

  var EssayView = __AMD("components/adapt-essay/js/essayView", TextInputPlusView$2);

  var TextInputPlusModel$2 = QuestionModel$1.extend({
    init: function () {
      QuestionModel$1.prototype.init.call(this);
      this.checkCanSubmit();
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      this.listenTo(this, "change:_userInput", this.checkCanSubmit);
    },
    restoreUserAnswers: function () {
      if (!this.get('_isSubmitted')) return;
      var userAnswer = this.get('_userAnswer');
      var genericAnswers = this.get('_answers');
      this.get('_items').forEach(function (item) {
        var answerIndex = userAnswer[item._index];

        if (answerIndex >= TextInputPlusModel$2.genericAnswerIndexOffset) {
          item.userAnswer = genericAnswers[answerIndex - TextInputPlusModel$2.genericAnswerIndexOffset];
          item._answerIndex = answerIndex;
        } else if (answerIndex > -1) {
          item.userAnswer = item._answers[answerIndex];
          item._answerIndex = answerIndex;
        } else {
          if (item.userAnswer === undefined) item.userAnswer = '******';
          item._answerIndex = -1;
        }

        if (item.userAnswer instanceof Array) item.userAnswer = item.userAnswer[0];
      });
      this.setQuestionAsSubmitted();
      this.markQuestion();
      this.setScore();
      this.setupFeedback();
    },
    setupFeedback: function () {
      var customFeedback = "";
      this.get("_incorrectItems").forEach(function (item) {
        var _item$_feedback, _item$_feedback$_inco;

        var incorrectText = item === null || item === void 0 ? void 0 : (_item$_feedback = item._feedback) === null || _item$_feedback === void 0 ? void 0 : (_item$_feedback$_inco = _item$_feedback._incorrect) === null || _item$_feedback$_inco === void 0 ? void 0 : _item$_feedback$_inco.body;

        if (incorrectText) {
          customFeedback += "<p>".concat(incorrectText, "</p>");
        }
      });
      this.get("_correctItems").forEach(function (item) {
        var _item$_feedback2, _item$_feedback2$_cor;

        var correText = item === null || item === void 0 ? void 0 : (_item$_feedback2 = item._feedback) === null || _item$_feedback2 === void 0 ? void 0 : (_item$_feedback2$_cor = _item$_feedback2._correct) === null || _item$_feedback2$_cor === void 0 ? void 0 : _item$_feedback2$_cor.body;

        if (correText) {
          customFeedback += "<p>".concat(correText, "</p>");
        }
      });
      this.get("_feedback")._incorrect = _.extend({}, this.get("_feedback")._incorrect, {
        body: customFeedback
      });
      Adapt.questionPlus.setUpFeedback(this);
      QuestionModel$1.prototype.setupFeedback.call(this);
    },
    setupRandomisation: function () {},
    canSubmit: function () {
      var _this$get;

      var userInputLength = (_this$get = this.get('_userInput')) === null || _this$get === void 0 ? void 0 : _this$get.length;
      return userInputLength > this.get("_answerLength")._min && userInputLength < this.get("_answerLength")._max;
    },
    setItemUserAnswer: function (itemIndex, userAnswer) {
      var item = this.get('_items')[itemIndex];
      item.userAnswer = userAnswer;
      this.checkCanSubmit();
    },
    storeUserAnswer: function () {
      var items = this.get('_items');
      this.isCorrect();
      var userAnswer = new Array(items.length);
      items.forEach(function (item, index) {
        userAnswer[item._index] = item._answerIndex;
      });
      this.set('_userAnswer', userAnswer);
    },
    isCorrect: function () {
      var userInput = this.get("_userInput");
      var items = this.get("_items");
      var correctItems = [];
      var incorrectItems = [];
      items.forEach(function (item) {
        var found = Boolean(item._terms.find(function (term) {
          var termFound = userInput.match(new RegExp("\\b" + term + "\\b", "i"));
          return Boolean(termFound);
        }));
        if (found) correctItems.push(item);else incorrectItems.push(item);
      });
      this.set({
        _correctItems: correctItems,
        _incorrectItems: incorrectItems
      });
      return incorrectItems.length === 0;
    },
    isPartlyCorrect: function () {
      return this.get('_isAtLeastOneCorrectSelection');
    },
    checkAnswerIsCorrect: function (possibleAnswers, userAnswer) {
      var uAnswer = this.cleanupUserAnswer(userAnswer);
      var matched = possibleAnswers.filter(function (cAnswer) {
        return this.cleanupUserAnswer(cAnswer) == uAnswer;
      }, this);
      var answerIsCorrect = matched && matched.length > 0;
      if (answerIsCorrect) this.set('_hasAtLeastOneCorrectSelection', true);
      return answerIsCorrect;
    },
    cleanupUserAnswer: function (userAnswer) {
      if (this.get('_allowsAnyCase')) {
        userAnswer = userAnswer.toLowerCase();
      }

      if (this.get('_allowsPunctuation')) {
        userAnswer = userAnswer.replace(/[\.,-\/#!$£%\^&\*;:{}=\-_`~()]/g, '');
        userAnswer = userAnswer.replace(/(  +)+/g, ' ');
      }

      return $.trim(userAnswer);
    },
    setScore: function () {
      var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
      var questionWeight = this.get('_questionWeight');
      var itemLength = this.get('_items').length;
      var score = questionWeight * numberOfCorrectAnswers / itemLength;
      this.set('_score', score);
    },
    resetUserAnswer: function () {
      this.get('_items').forEach(function (item) {
        item._isCorrect = false;
        item.userAnswer = '';
      });
    },
    getResponse: function () {
      return _.pluck(this.get('_items'), 'userAnswer').join('[,]');
    },
    getResponseType: function () {
      return 'fill-in';
    }
  }, {
    genericAnswerIndexOffset: 65536
  });
  var EssayModel = __AMD("components/adapt-essay/js/essayModel", TextInputPlusModel$2);

  __AMD("components/adapt-essay/js/adapt-essay", Adapt.register('essay', {
    view: EssayView,
    model: EssayModel
  }));

  var DESELECT_INCORRECT_DELAY = 1000;

  var FinderView = function (_QuestionView) {
    _inherits(FinderView, _QuestionView);

    var _super = _createSuper(FinderView);

    function FinderView() {
      _classCallCheck(this, FinderView);

      return _super.apply(this, arguments);
    }

    _createClass(FinderView, [{
      key: "events",
      value: function events() {
        return {
          "click .finder__item": "onItemClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        _get(_getPrototypeOf(FinderView.prototype), "initialize", this).call(this);

        this.update = _.debounce(this.update.bind(this), 1);
        this.setUpEventListeners();
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.model.setupRandomisation();
        this.model.stopListening(this.model.getChildren(), "change:_isVisited", this.model.checkCompletionStatus);
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        this.updateMarking();
      }
    }, {
      key: "update",
      value: function update() {
        this.updateMarking();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        _get(_getPrototypeOf(FinderView.prototype), "postRender", this).call(this);

        this.setUpGridSize();
      }
    }, {
      key: "onSubmitted",
      value: function onSubmitted() {
        _get(_getPrototypeOf(FinderView.prototype), "onSubmitted", this).call(this);

        this.listenToOnce(Adapt, "notify:closed", this.onFeedbackClosed);
      }
    }, {
      key: "onFeedbackClosed",
      value: function onFeedbackClosed() {
        this.deselectIncorrectAnswers();
      }
    }, {
      key: "deselectIncorrectAnswers",
      value: function deselectIncorrectAnswers() {
        var _this = this;

        _.debounce(function () {
          _this.model.getChildren().each(function (itemModel) {
            var isVisited = Boolean(itemModel.get("_isVisited"));
            if (!isVisited) return;
            var shouldBeSelected = Boolean(itemModel.get("_shouldBeSelected"));
            var isActive = Boolean(itemModel.get("_isActive"));
            var isCorrect = shouldBeSelected && isActive;
            if (!isCorrect && isActive) itemModel.set("_isActive", false);
          });
        }, DESELECT_INCORRECT_DELAY)();
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        this.update();
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        this.update();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model.getChildren(), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
      }
    }, {
      key: "onItemClick",
      value: function onItemClick(event) {
        if (event) event.preventDefault();
        var item = this.model.getItem($(event.currentTarget).data('adapt-index'));
        item.toggleActive();
      }
    }, {
      key: "getItemElement",
      value: function getItemElement(model) {
        var index = model.get('_index');
        return this.$('.js-finder-item').filter('[data-adapt-index="' + index + '"]');
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(model, _isActive) {
        this.getItemElement(model).toggleClass('is-active', _isActive).find(".js-item-label").toggleClass('is-selected', _isActive);
        this.updateContainer();
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(model, _isVisited) {
        if (!_isVisited) return;
        var $item = this.getItemElement(model);
        $item.addClass('is-visited');
      }
    }, {
      key: "updateMarking",
      value: function updateMarking() {
        var _this2 = this;

        var isInteractive = this.model.isInteractive();
        var canShowMarking = this.model.get('_canShowMarking');

        Adapt.course.get('_globals')._accessibility._ariaLabels;

        this.model.getChildren().each(function (itemModel) {
          itemModel.get('_index');

          var $item = _this2.getItemElement(itemModel);

          var $itemLabel = $item.find(".js-item-label");
          var shouldBeSelected = Boolean(itemModel.get("_shouldBeSelected"));
          var isActive = Boolean(itemModel.get("_isActive"));
          var isVisited = Boolean(itemModel.get("_isVisited") || isActive);
          itemModel.set("_isVisited", isVisited);
          var isCorrect = shouldBeSelected && isActive;
          var isDisabled = !isInteractive || isCorrect;
          $item.prop('disabled', isDisabled).toggleClass('is-disabled', isDisabled).find(".finder__item-answer-icon").toggleClass('is-disabled', isDisabled);

          if (!isVisited || !canShowMarking) {
            $item.removeClass('is-correct is-incorrect');
            $itemLabel.removeClass('is-correct is-incorrect');
            return;
          }

          if (!isActive) return;
          $item.toggleClass('is-correct', isCorrect).toggleClass('is-incorrect', !isCorrect).toggleClass('is-disabled', isDisabled).prop('disabled', isDisabled);
          $itemLabel.toggleClass('is-correct', isCorrect).toggleClass('is-incorrect', !isCorrect).toggleClass('is-disabled', isDisabled);
        });
        this.updateContainer();
      }
    }, {
      key: "updateContainer",
      value: function updateContainer() {
        var isAtLeastOneIncorrect = Boolean(this.model.getChildren().find(function (itemModel) {
          return itemModel.get("_isVisited") && itemModel.get("_isActive") && !itemModel.get("_shouldBeSelected");
        }));
        var $container = this.$(".finder__items-container");
        $container.toggleClass("is-incorrect", isAtLeastOneIncorrect).toggleClass("is-correct", Boolean(this.model.get("_isCorrect")));
      }
    }, {
      key: "setUpGridSize",
      value: function setUpGridSize() {}
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setReadyStatus();
        this.update();
      }
    }]);

    return FinderView;
  }(QuestionView$1);

  FinderView.template = "finder";
  var FinderView$1 = __AMD("components/adapt-finder/js/finderView", FinderView);

  var FinderModel = function (_ItemsQuestionModel) {
    _inherits(FinderModel, _ItemsQuestionModel);

    var _super = _createSuper(FinderModel);

    function FinderModel() {
      _classCallCheck(this, FinderModel);

      return _super.apply(this, arguments);
    }

    _createClass(FinderModel, [{
      key: "isCorrect",
      value: function isCorrect() {
        var props = {
          _numberOfIncorrectAnswers: 0,
          _numberOfCorrectAnswers: 0,
          _numberOfRequiredAnswers: 0,
          _isAtLeastOneIncorrectSelection: false
        };
        this.getChildren().each(function (itemModel) {
          var shouldBeSelected = Boolean(itemModel.get('_shouldBeSelected'));
          var isActive = Boolean(itemModel.get("_isActive"));
          itemModel.set('_isCorrect', shouldBeSelected == isActive);

          if (shouldBeSelected) {
            props._numberOfRequiredAnswers++;
          }

          if (!isActive) return;

          if (!shouldBeSelected) {
            props._numberOfIncorrectAnswers++;
            props._isAtLeastOneIncorrectSelection = true;
            return;
          }

          props._numberOfCorrectAnswers++;
        });
        this.set(props);
        var hasRightNumberOfCorrectAnswers = props._numberOfCorrectAnswers === props._numberOfRequiredAnswers;
        var hasNoIncorrectAnswers = !props._isAtLeastOneIncorrectSelection;
        return hasRightNumberOfCorrectAnswers && hasNoIncorrectAnswers;
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return !this.get('_isAtLeastOneIncorrectSelection');
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (!this.has('_feedback')) return;

        if (this.get('_isCorrect')) {
          this.setupCorrectFeedback();
          return;
        }

        if (this.isPartlyCorrect()) {
          this.setupPartlyCorrectFeedback();
          return;
        }

        this.setupIncorrectFeedback();
      }
    }]);

    return FinderModel;
  }(ItemsQuestionModel);

  var FinderModel$1 = __AMD("components/adapt-finder/js/finderModel", FinderModel);

  __AMD("components/adapt-finder/js/adapt-finder", Adapt.register("finder", {
    view: FinderView$1,
    model: FinderModel$1
  }));

  var FlipCardView = function (_ComponentView) {
    _inherits(FlipCardView, _ComponentView);

    var _super = _createSuper(FlipCardView);

    function FlipCardView() {
      _classCallCheck(this, FlipCardView);

      return _super.apply(this, arguments);
    }

    _createClass(FlipCardView, [{
      key: "events",
      value: function events() {
        return {
          "click .js-flipcard-btn": "onBtnClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        ComponentView$1.prototype.initialize.call(this);
        this.setUpEventListeners();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model, "change:_isFlipCardActive", this.onFlipCardActiveChange);
      }
    }, {
      key: "onBtnClick",
      value: function onBtnClick() {
        this.model.set("_isFlipCardActive", !this.model.get("_isFlipCardActive"));
      }
    }, {
      key: "onFlipCardActiveChange",
      value: function onFlipCardActiveChange(model, isFlipCardActive) {
        this.$(".js-flipcard-card, .js-flipcard-btn").toggleClass("is-active", isFlipCardActive);
        this.$(".js-flipcard-btn").html(isFlipCardActive ? this.model.get("_frontSide").buttonText : this.model.get("_backSide").buttonText);
        Adapt.navigateToElement(this.$(".js-flipcard-btn, .js-flipcard-card"), {
          duration: 400,
          align: "inview"
        });
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }, {
      key: "preRender",
      value: function preRender() {}
    }, {
      key: "postRender",
      value: function postRender() {
        this.setReadyStatus();
      }
    }]);

    return FlipCardView;
  }(ComponentView$1);

  FlipCardView.template = "flipCard";
  var flipCardView = __AMD("components/adapt-flipCard/js/flipCardView", FlipCardView);

  var FlipCardModel = function (_ComponentModel) {
    _inherits(FlipCardModel, _ComponentModel);

    var _super = _createSuper(FlipCardModel);

    function FlipCardModel() {
      _classCallCheck(this, FlipCardModel);

      return _super.apply(this, arguments);
    }

    return FlipCardModel;
  }(ComponentModel$1);

  var flipCardModel = __AMD("components/adapt-flipCard/js/flipCardModel", FlipCardModel);

  __AMD("components/adapt-flipCard/js/adapt-flipCard", Adapt.register('flipcard', {
    model: flipCardModel,
    view: flipCardView
  }));

  var FreeThinkingView = function (_ComponentView) {
    _inherits(FreeThinkingView, _ComponentView);

    var _super = _createSuper(FreeThinkingView);

    function FreeThinkingView() {
      _classCallCheck(this, FreeThinkingView);

      return _super.apply(this, arguments);
    }

    _createClass(FreeThinkingView, [{
      key: "events",
      value: function events() {
        return {
          "click .js-freethinking-btn": "onShowAnswersBtnClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        ComponentView$1.prototype.initialize.call(this);
        this.setUpEventListeners();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model, "change:_isShowingAnswer", this.onShowingAnswerChange);
      }
    }, {
      key: "onShowingAnswerChange",
      value: function onShowingAnswerChange(model, isShowingAnswer) {
        if (isShowingAnswer) {
          this.$(".js-freethinking-header").slideUp();
          this.$(".js-freethinking-correct").slideDown();
        } else {
          this.$(".js-freethinking-header").slideDown();
          this.$(".js-freethinking-correct").slideUp();
        }
      }
    }, {
      key: "onShowAnswersBtnClick",
      value: function onShowAnswersBtnClick() {
        var isShowingAnswer = !this.model.get("_isShowingAnswer");
        this.model.set("_isShowingAnswer", isShowingAnswer);

        var buttons = this.model.get("_freeThinking")._buttons;

        this.$(".js-freethinking-btn").toggleClass("is-disabled", isShowingAnswer).text(isShowingAnswer ? buttons._hideCorrectAnswer.buttonText : buttons._showCorrectAnswer.buttonText);

        if (isShowingAnswer) {
          Adapt.navigateToElement(this.$(".freethinking__content-inner"), {
            duration: 400,
            align: "inview"
          });
        }

        this.setCompletionStatus();
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }, {
      key: "preRender",
      value: function preRender() {}
    }, {
      key: "postRender",
      value: function postRender() {
        this.setReadyStatus();
      }
    }]);

    return FreeThinkingView;
  }(ComponentView$1);

  FreeThinkingView.template = "freeThinking";
  var freeThinkingView = __AMD("components/adapt-freeThinking/js/freeThinkingView", FreeThinkingView);

  var FreeThinkingModel = function (_ComponentModel) {
    _inherits(FreeThinkingModel, _ComponentModel);

    var _super = _createSuper(FreeThinkingModel);

    function FreeThinkingModel() {
      _classCallCheck(this, FreeThinkingModel);

      return _super.apply(this, arguments);
    }

    _createClass(FreeThinkingModel, [{
      key: "initialize",
      value: function initialize() {
        this.set("_freeThinking", Adapt.course.get("_freeThinking"));
        this.set("_isShowingAnswer", false);
        this.set("_componentLogo", {
          src: "assets/freethinking-logo.svg"
        });
        var parentClasses = this.getParent().get("_classes");
        this.getParent().set("_classes", parentClasses + " is-freethinking");

        _get(_getPrototypeOf(FreeThinkingModel.prototype), "initialize", this).call(this);
      }
    }]);

    return FreeThinkingModel;
  }(ComponentModel$1);

  var freeThinkingModel = __AMD("components/adapt-freeThinking/js/freeThinkingModel", FreeThinkingModel);

  __AMD("components/adapt-freeThinking/js/adapt-freeThinking", Adapt.register('freethinking', {
    model: freeThinkingModel,
    view: freeThinkingView
  }));

  var NAVIGATE_DURATION = 400;

  var GLabelPopupView = function (_Backbone$View) {
    _inherits(GLabelPopupView, _Backbone$View);

    var _super = _createSuper(GLabelPopupView);

    function GLabelPopupView() {
      _classCallCheck(this, GLabelPopupView);

      return _super.apply(this, arguments);
    }

    _createClass(GLabelPopupView, [{
      key: "events",
      value: function events() {
        return {
          'change .js-glabel-item-input': 'onOptionSelect'
        };
      }
    }, {
      key: "className",
      value: function className() {
        return 'glabel-popup';
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenToOnce(Adapt, "notify:opened", this.onOpened);
        this.listenTo(Adapt, "notify:closed", this.onClosed);
        this.listenTo(Adapt, "device:resize", this.onDeviceResize);
        this.listenTo(this.model, {
          "change:tooltip": this.onTooltipChange,
          "change:_isSelected": this.onIsSelectedChange,
          "change:_isIncorrect": this.onIncorrectChange
        });
        this.listenTo(this.model.get("_options"), {
          "change:_isSelected": this.onOptionSelectedChange
        });
        this.render();
      }
    }, {
      key: "onTooltipChange",
      value: function onTooltipChange(model, tooltip) {
        this.$(".js-glabel-item-tooltip").html(tooltip);
      }
    }, {
      key: "onIsSelectedChange",
      value: function onIsSelectedChange(model, isSelected) {
        this.$(".js-glabel-popup-tooltip").toggleClass("is-selected", isSelected);
      }
    }, {
      key: "onIncorrectChange",
      value: function onIncorrectChange(model, isIncorrect) {
        this.$(".js-glabel-item").toggleClass("is-incorrect", isIncorrect);
        this.$(".js-glabel-popup-content-anim").toggleClass("is-incorrect", isIncorrect);
      }
    }, {
      key: "onOptionSelect",
      value: function onOptionSelect(event) {
        var _this = this;

        if (!this.model.get("_parent").isInteractive()) return;
        var index = $(event.currentTarget).data('index');
        var isSelected = $(event.currentTarget).prop('checked');
        this.model.get("_options").find(function (option) {
          return option.get("_index") === index;
        }).toggle(isSelected);

        _.delay(function () {
          _this.closePopup();
        }, 100);
      }
    }, {
      key: "onOptionSelectedChange",
      value: function onOptionSelectedChange(optionModel, isSelected) {
        var $label = this.$(".js-glabel-item-label").filter("[data-index=" + optionModel.get("_index") + "]");
        $label.toggleClass("is-selected", isSelected);
      }
    }, {
      key: "onDeviceResize",
      value: function onDeviceResize() {
        this.alignEverything();
      }
    }, {
      key: "onOpened",
      value: function onOpened() {
        var _this2 = this;

        this.$el.addClass("u-visibility-hidden");
        this.$el.imageready(_.debounce(function () {
          _this2.alignEverything();

          _this2.playContentAnim();

          _this2.$el.removeClass("u-visibility-hidden");

          _this2.$el.addClass("is-active");

          _this2.model.set("_isFocused", true);
        }, 0));
      }
    }, {
      key: "getAlignOffset",
      value: function getAlignOffset($el, $target) {
        var myBB = $el[0].getBoundingClientRect();
        var targetBB = $target[0].getBoundingClientRect();
        var offset = {
          left: targetBB.left - myBB.left,
          top: targetBB.top - myBB.top
        };
        return offset;
      }
    }, {
      key: "alignContentToItem",
      value: function alignContentToItem() {
        var $item = this.$(".js-glabel-item");
        var $container = this.$(".js-glabel-popup-content-helper");
        var $content = this.$(".js-glabel-popup-content");
        $content.css("left", "");
        var contentWidth = $content.outerWidth();
        var containerWidth = $container.outerWidth();
        var itemWidth = $item.outerWidth();
        var itemLeftCenter = parseInt($item.css("left"), 10) + itemWidth / 2;

        if (itemLeftCenter < contentWidth / 2) {
          $container.css("justify-content", "flex-start");
        } else if (itemLeftCenter > containerWidth - contentWidth / 2) {
          $container.css("justify-content", "flex-end");
        } else {
            $content.css("left", itemLeftCenter - contentWidth / 2);
          }
      }
    }, {
      key: "alignImg",
      value: function alignImg() {
        var $graphic = this.$(".js-glabel-popup-img");
        var $parGraphic = this.getParentView().$(".js-glabel-img");
        $graphic.css({
          "left": "",
          "top": ""
        });
        var offset = this.getAlignOffset($graphic, $parGraphic);
        $graphic.width($parGraphic.width());
        $graphic.height($parGraphic.height());
        $graphic.css(offset);
      }
    }, {
      key: "alignViewport",
      value: function alignViewport() {
        var $item = this.$(".js-glabel-item");
        var $parItem = this.getParentItemEl();
        this.$el.css("top", "");
        var yDiff = this.getAlignOffset($item, $parItem).top;
        var yDiffTarget = undefined;
        var yDiffMin = 0;
        var yDiffMax = this.$el.closest(".notify__popup-inner").height() - this.$el.outerHeight();
        var yOffset = 0;

        if (yDiffMax < 1) {
          yDiff = undefined;
        } else if (yDiff < yDiffMin) {
            yOffset = yDiff - yDiffMin;
            yDiffTarget = yDiffMin;
          } else if (yDiff > yDiffMax) {
              yOffset = yDiff - yDiffMax;
              yDiffTarget = yDiffMax;
            }

        if (yOffset) {
          this.navigateToRelOffset(yOffset);
        }

        this.$el.css("top", yDiff);
        this.$el.animate({
          "top": yDiffTarget
        }, NAVIGATE_DURATION);
      }
    }, {
      key: "playContentAnim",
      value: function playContentAnim() {
        var $anim = this.$(".js-glabel-popup-content-anim");
        var $tooltip = this.$(".js-glabel-popup-tooltip");
        $anim.offset($tooltip.offset());
        $anim.outerWidth($tooltip.outerWidth());
        $anim.outerHeight($tooltip.outerHeight());
        $anim.hide(0).show(0);

        _.delay(function () {
          $anim.addClass("is-active");
          $tooltip.addClass("is-active");
        });
      }
    }, {
      key: "alignEverything",
      value: function alignEverything() {
        var $item = this.$(".js-glabel-item");
        var $parItem = this.getParentItemEl();
        $item.css("left", "");
        $item.css("left", this.getAlignOffset($item, $parItem).left);
        $item.width($parItem.width());
        $item.height($parItem.height());
        this.alignContentToItem();
        this.alignViewport();
        this.alignImg();
      }
    }, {
      key: "navigateToRelOffset",
      value: function navigateToRelOffset(relativeTop) {
        var notifyView = Adapt.notify.stack[Adapt.notify.stack.length - 1];
        notifyView.hasOpened = false;
        notifyView.isOpen = false;
        Adapt.navigateToRelOffset({
          top: relativeTop
        }, {
          duration: NAVIGATE_DURATION
        });

        _.delay(function () {
          if (Adapt.notify.stack[Adapt.notify.stack.length - 1] !== notifyView) {
            Adapt.notify.stack.push(notifyView);
          }

          notifyView.hasOpened = true;
          notifyView.isOpen = true;
        }, 0);
      }
    }, {
      key: "getParentView",
      value: function getParentView() {
        var parent = this.model.get("_parent");
        return Adapt.findViewByModelId(parent.get("_id"));
      }
    }, {
      key: "getParentItemEl",
      value: function getParentItemEl() {
        var parentView = this.getParentView();
        return parentView.$(".js-glabel-item").filter("[data-index=" + this.model.get("_index") + "]");
      }
    }, {
      key: "onClosed",
      value: function onClosed(notifyView) {
        this.model.trigger("notify:close");
        var $anim = this.$(".js-glabel-popup-content-anim");
        $anim.removeClass("is-active");
        this.$el.removeClass("is-active");
        this.$(".js-glabel-popup-tooltip").removeClass("is-active");
        if (!notifyView.$el.hasClass("glabel-popup")) return;
      }
    }, {
      key: "remove",
      value: function remove() {
        this.model.trigger("remove");
        this.model.set("_isFocused", false);
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        data.view = this;
        data._parent = this.model.get("_parent").toJSON();
        data._options = this.model.get("_options").toJSON();
        var template = Handlebars.templates['glabelPopup'];
        this.$el.html(template(data));
      }
    }, {
      key: "closePopup",
      value: function closePopup(event) {
        Adapt.trigger('notify:close');
      }
    }]);

    return GLabelPopupView;
  }(Backbone.View);

  var GLabelPopupView$1 = __AMD("components/adapt-glabel/js/glabelPopupView", GLabelPopupView);

  var GLabelView = function (_QuestionView) {
    _inherits(GLabelView, _QuestionView);

    var _super = _createSuper(GLabelView);

    function GLabelView() {
      _classCallCheck(this, GLabelView);

      return _super.apply(this, arguments);
    }

    _createClass(GLabelView, [{
      key: "events",
      value: function events() {
        return {
          "click .js-glabel-item": "onItemClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpModelData();
        QuestionView$1.prototype.initialize.apply(this, arguments);
        this.setUpEventListeners();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.update = _.debounce(this.update.bind(this), 1);
        this.listenTo(this.model, {
          "change:_isEnabled change:_isComplete change:_isSubmitted": this.update
        });
        this.listenTo(this.model.getChildren(), {
          "change:_isActive": this.onItemActiveChange,
          "change:_isFocused": this.onItemFocusedChange,
          "change:_isSelected": this.onItemSelectedChange,
          "change:_isCorrect": this.onItemCorrectChange,
          "change:_isIncorrect": this.onItemIncorrectChange,
          "change:tooltip": this.onItemTooltipChange
        });
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        var graphic = this.model.get("_graphic");

        if (graphic && graphic._sizing) {
          graphic._sizing._classes = Adapt.sizing.getSizingClass(graphic._sizing);
        }
      }
    }, {
      key: "onItemTooltipChange",
      value: function onItemTooltipChange(itemModel, tooltip) {
        var $item = this.$(".js-glabel-item").filter("[data-index=" + itemModel.get("_index") + "]");
        $item.find(".js-glabel-item-tooltip").html(tooltip);
      }
    }, {
      key: "onItemSelectedChange",
      value: function onItemSelectedChange(itemModel, isSelected) {
        var $item = this.$(".js-glabel-item").filter("[data-index=" + itemModel.get("_index") + "]");
        $item.find(".js-glabel-tooltip").toggleClass("is-selected", isSelected);
      }
    }, {
      key: "onItemCorrectChange",
      value: function onItemCorrectChange(itemModel, isCorrect) {
        var $item = this.$(".js-glabel-item").filter("[data-index=" + itemModel.get("_index") + "]");
        $item.toggleClass("is-correct", isCorrect === true);
      }
    }, {
      key: "onItemIncorrectChange",
      value: function onItemIncorrectChange(itemModel, isIncorrect) {
        var $item = this.$(".js-glabel-item").filter("[data-index=" + itemModel.get("_index") + "]");
        $item.toggleClass("is-incorrect", isIncorrect === true);
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {}
    }, {
      key: "onItemClick",
      value: function onItemClick(event) {
        if (this._isPopupOpen) return;
        var index = $(event.currentTarget).data("index");
        var itemModel = this.model.getItem(index);
        itemModel.set("_isActive", true);
        itemModel.set("_isVisited", true);
      }
    }, {
      key: "onItemFocusedChange",
      value: function onItemFocusedChange(itemModel, isFocused) {
        var $item = this.$(".js-glabel-item").filter("[data-index=" + itemModel.get("_index") + "]");
        $item.toggleClass("is-focused", isFocused);
      }
    }, {
      key: "onItemActiveChange",
      value: function onItemActiveChange(itemModel, isActive) {
        var $item = this.$(".js-glabel-item").filter("[data-index=" + itemModel.get("_index") + "]");
        $item.toggleClass("is-active", isActive);
        this.$(".js-glabel-item-container").toggleClass("has-active-item", isActive);

        if (!isActive) {
          return;
        }

        this.openItemPopup(itemModel);
        this.model.getChildren().each(function (e) {
          if (itemModel == e) return;
          e.set("_isActive", false);
          e.set("_isFocused", false);
        });
      }
    }, {
      key: "onAllItemsInactive",
      value: function onAllItemsInactive() {
        this.$(".js-glabel-item-container").removeClass("has-active-item");
      }
    }, {
      key: "closeItemPopup",
      value: function closeItemPopup() {}
    }, {
      key: "openItemPopup",
      value: function openItemPopup(itemModel) {
        this._isPopupOpen = true;
        itemModel.set("_isActive", true);
        this.itemPopupView = new GLabelPopupView$1({
          model: itemModel
        });
        Adapt.trigger("notify:popup", {
          _view: this.itemPopupView,
          _isCancellable: true,
          _classes: 'glabel ' + this.model.get('_classes') + " " + this.model.get("_id")
        });
        this.listenToOnce(this.itemPopupView.model, "notify:close", this.onItemPopupClosed);
      }
    }, {
      key: "onItemPopupClosed",
      value: function onItemPopupClosed() {
        var activeItem = this.model.getActiveItem();
        activeItem.set("_isActive", false);
        this._isPopupOpen = false;
        this.itemPopupView = null;
      }
    }, {
      key: "postRender",
      value: function postRender() {
        var _Adapt$debug;

        QuestionView$1.prototype.postRender.apply(this, arguments);

        if ((_Adapt$debug = Adapt.debug) !== null && _Adapt$debug !== void 0 && _Adapt$debug.setUpInteract) {
          Adapt.debug.setUpInteract(this.$(".js-glabel-item"), this.$(".js-glabel-item-container"), false);
        }

        this.updateMarking();
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setReadyStatus();
        this.update();
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        this.update();
        this.updateMarking();
      }
    }, {
      key: "update",
      value: function update(model) {
        this.updateSelection();
      }
    }, {
      key: "updateSelection",
      value: function updateSelection() {
        var _this = this;

        _.each(this.model.get("_items"), function (item) {
          var itemIdx = item._index;
          var isEnabled = !Boolean(item._isCorrect);

          _.each(item._optionsSelected, function (option, optionIdx) {
            var isSelected = _this.isCorrectAnswerShown ? _.contains(item._optionsCorrect, optionIdx) : option;
            var filter = '[data-adapt-index="' + itemIdx + '"][data-adapt-option-index="' + optionIdx + '"]';

            _this.$('.js-item-label').filter(filter).toggleClass('is-selected', isSelected).toggleClass('is-disabled', !isEnabled).find(".mmcq__item-answer-icon").toggleClass('is-disabled', !isEnabled);

            _this.$('.js-item-input').filter(filter).prop('checked', isSelected).prop('disabled', !isEnabled);
          });
        });
      }
    }, {
      key: "resetQuestionOnRevisit",
      value: function resetQuestionOnRevisit() {}
    }, {
      key: "updateMarking",
      value: function updateMarking() {
        var _this2 = this;

        var canShowMarking = this.model.get('_canShowMarking');

        var ariaLabels = Adapt.course.get('_globals')._accessibility._ariaLabels;

        _.each(this.model.get("_items"), function (item) {
          var index = item._index;

          var $item = _this2.$('.js-mmcq-item').filter('[data-adapt-index="' + index + '"]');

          $item.toggleClass('is-correct', item._isCorrect).toggleClass('is-incorrect', !item._isCorrect);

          if (!canShowMarking) {
            $item.removeClass('is-correct').removeClass('is-incorrect');
          }

          _.each(item._optionsSelected, function (option, optionIdx) {
            var filter = '[data-adapt-index="' + index + '"][data-adapt-option-index="' + optionIdx + '"]';

            var $itemInput = _this2.$(".js-item-input").filter(filter);

            var $itemLabel = _this2.$(".js-item-label").filter(filter);

            var shouldBeSelected = Boolean(_.contains(item._optionsCorrect, optionIdx));
            var isCorrect = option == shouldBeSelected;
            var isSelected = option;

            var inputText = (_this2.model.get("_options") || item._options)[optionIdx];

            if (!item._optionsVisited[optionIdx]) {
              $itemInput.attr('aria-label', $.a11y_normalize(inputText));
            } else {
                $itemInput.attr('aria-label', [shouldBeSelected ? ariaLabels.correct : ariaLabels.incorrect, ", ", isSelected ? ariaLabels.selectedAnswer : ariaLabels.unselectedAnswer, ". ", $.a11y_normalize(inputText)].join(""));
              }

            if (!canShowMarking) {
              $itemInput.removeClass('is-correct is-incorrect');
              $itemLabel.removeClass('is-correct is-incorrect');
              return;
            }

            if (!isSelected) return;
            $itemInput.toggleClass("is-correct", isCorrect).toggleClass("is-incorrect", !isCorrect);
            $itemLabel.toggleClass("is-correct", isCorrect).toggleClass("is-incorrect", !isCorrect);
          });
        });

        this.updateSelection();
      }
    }]);

    return GLabelView;
  }(QuestionView$1);

  var GLabelView$1 = __AMD("components/adapt-glabel/js/glabelView", GLabelView);

  var GLabelModel = function (_QuestionModel) {
    _inherits(GLabelModel, _QuestionModel);

    var _super = _createSuper(GLabelModel);

    function GLabelModel() {
      _classCallCheck(this, GLabelModel);

      return _super.apply(this, arguments);
    }

    _createClass(GLabelModel, [{
      key: "init",
      value: function init() {
        _get(_getPrototypeOf(GLabelModel.prototype), "init", this).call(this);

        this.setupQuestionItems();
        this.setupQuestionOptions();
        this.checkCanSubmit();
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var json = _get(_getPrototypeOf(GLabelModel.prototype), "toJSON", this).call(this);

        json._items = this.getChildren().toJSON();
        return json;
      }
    }, {
      key: "setupQuestionItems",
      value: function setupQuestionItems() {
        var _this = this;

        var items = this.get('_items') || [];
        items.forEach(function (item, index) {
          item._index = index;
          item._parent = _this;
          item.tooltip = "?";
        });
        this.setChildren(new Backbone.Collection(items, {
          model: ItemModel
        }));
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        var numberOfCorrectAnswers = 0;
        this.getChildren().each(function (item, index) {
          var isCorrect = true;
          item.get("_options").find(function (option) {
            if (option.get("_shouldBeSelected") !== option.get("_isSelected")) {
              isCorrect = false;
              return true;
            }
          });
          item.get("_options").each(function (option) {
            if (option.get("_isSelected")) {
              option.set("_isVisited", true);

              var _isCorrect = option.get("_shouldBeSelected") === option.get("_isSelected");

              option.set("_isCorrect", _isCorrect);
              option.set("_isIncorrect", !_isCorrect);
              option.set("_isEnabled", !_isCorrect);
            }
          });

          if (!isCorrect) {
            item.set("_isCorrect", false);
            item.set("_isIncorrect", true);
            return;
          }

          numberOfCorrectAnswers++;
          item.set("_isCorrect", true);
          item.set("_isIncorrect", false);
          item.get("_options").each(function (option) {
            option.set("_isEnabled", false);
          });
          this.set({
            '_isAtLeastOneCorrectSelection': true
          });
        }, this);
        this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);

        if (numberOfCorrectAnswers === this.getChildren().length) {
          return true;
        }

        return false;
      }
    }, {
      key: "setupQuestionOptions",
      value: function setupQuestionOptions() {
        var _this2 = this;

        var options = this.get('_options') || [];
        var _options = [];
        options.forEach(function (option, index) {
          _options.push({
            text: option,
            _isEnabled: true,
            _index: index
          });
        });
        this.set("_options", _options);
        this.setupRandomisation();
        this.getChildren().each(function (item) {
          var options = new Backbone.Collection(_this2.get("_options"));
          options.each(function (option) {
            option.set("_shouldBeSelected", Boolean(_.includes(item.get("_optionsCorrect"), option.get("_index"))));
            option.set("_parent", item);

            option.toggle = function (_isSelected) {
              _this2._toggleOption(option, _isSelected);
            };
          });
          item.set("_options", options);
          item.listenTo(options, "change:_isSelected", function (optionModel, _isSelected) {
            var tooltip = [];
            var isIncorrect = false;
            item.get("_options").each(function (option) {
              if (option.get("_isSelected")) tooltip.push(option.get("key"));

              if (!isIncorrect && option.get("_isSelected") !== option.get("_shouldBeSelected") && option.get("_isVisited")) {
                isIncorrect = true;
              }
            });
            item.set("_isIncorrect", isIncorrect);
            item.set("tooltip", tooltip.length ? tooltip.join(",") : "?");
            item.set("_isSelected", Boolean(tooltip.length));

            _this2.checkCanSubmit();
          });
        });
      }
    }, {
      key: "_toggleOption",
      value: function _toggleOption(optionModel, _isSelected) {
        var isRadio = this.get("_isRadio");

        if (!isRadio) {
          optionModel.set("_isSelected", _isSelected === undefined ? !Boolean(optionModel.get("_isSelected")) : Boolean(_isSelected));
        } else {
            optionModel.set("_isSelected", true);
            optionModel.collection.each(function (option) {
              if (option != optionModel) option.set("_isSelected", false);
            });
          }
      }
    }, {
      key: "getItem",
      value: function getItem(index) {
        return this.getChildren().findWhere({
          _index: index
        });
      }
    }, {
      key: "getActiveItem",
      value: function getActiveItem(index) {
        return this.getChildren().findWhere({
          _isActive: true
        });
      }
    }, {
      key: "setupRandomisation",
      value: function setupRandomisation() {
        if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
        this.set("_options", _.shuffle(this.get("_options")));
        this.get("_options").forEach(function (option, index) {
          var key = (index + 10).toString(36).toUpperCase();
          option.key = key;
        });
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        return this.getChildren().every(function (itemModel) {
          return itemModel.get("_isSelected");
        });
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        if (!this.get('_isSubmitted')) return;
        var userAnswer = this.get('_userAnswer');
        var items = this.getChildren();

        _.each(userAnswer, function (optionIndexes, itemIndex) {
          var item = items.find(function (item) {
            return item.get("_index") == itemIndex;
          });
          item.get("_options").each(function (option) {
            if (_.includes(optionIndexes, option.get("_index"))) {
              option.set("_isSelected", true);
            }
          });
        });
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var userAnswer = new Array(this.getChildren().length);
        this.getChildren().each(function (item) {
          var itemAnswer = [];
          item.get("_options").each(function (option) {
            if (option.get("_isSelected")) itemAnswer.push(option.get("_index"));
          });
          userAnswer[item.get("_index")] = itemAnswer;
        }, this);
        this.set({
          '_userAnswer': userAnswer
        });
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set('_userAnswer', []);
        this.getChildren().each(function (item) {
          item.set("_isCorrect", false);
          item.set("_isIncorrect", false);
          item.set("_isSelected", false);
          item.get("_options").each(function (option) {
            option.set("_isSelected", false);
            option.set("_isVisited", false);
          });
        });
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        var resp = [];
        this.getChildren().each(function (item) {
          var optionIndexes = [];
          item.get("_options").each(function (option) {
            if (option.get("_isSelected")) optionIndexes.push(option.get("_index"));
          });
          resp.push(optionIndexes.join('.'));
        });
        return resp.join('[,]');
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return "fill-in";
      }
    }]);

    return GLabelModel;
  }(QuestionModel$1);

  var GLabelModel$1 = __AMD("components/adapt-glabel/js/glabelModel", GLabelModel);

  __AMD("components/adapt-glabel/js/adapt-glabel", Adapt.register('glabel', {
    view: GLabelView$1,
    model: GLabelModel$1
  }));

  var HotgraphicFlipView = function (_ComponentView) {
    _inherits(HotgraphicFlipView, _ComponentView);

    var _super = _createSuper(HotgraphicFlipView);

    function HotgraphicFlipView() {
      _classCallCheck(this, HotgraphicFlipView);

      return _super.apply(this, arguments);
    }

    _createClass(HotgraphicFlipView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-hotgraphicflip-item-click': 'onItemClick',
          'click .js-hotgraphicflip-item-btn': 'onItemBtnClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpModelData();
        ComponentView$1.prototype.initialize.call(this);
        this.setUpEventListeners();
        this.checkIfResetOnRevisit();
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        var itemSizing = this.model.get("_itemSizing");

        if (itemSizing && itemSizing._width) {
          itemSizing._classes = "col-sm-" + itemSizing._width;

          if (itemSizing._maxWidthInner) {
            itemSizing._itemClasses = "--maxwidth-inner-" + itemSizing._maxWidthInner;
          }
        }
      }
    }, {
      key: "preRender",
      value: function preRender() {}
    }, {
      key: "postRender",
      value: function postRender() {
        var _this = this;

        this.$('.hotgraphicflip__widget').imageready(function () {
          _this.setReadyStatus();

          _.debounce(_this.recalcItemHeight.bind(_this), 0)();
        });

        if (this.model.get('_setCompletionOn') === 'inview') {
          this.setupInviewCompletion('.component__widget');
        }
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.onDeviceResize = _.debounce(this.onDeviceResize, 0);
        this.listenTo(Adapt, 'device:resize', this.onDeviceResize);
        this.listenTo(this.model.getChildren(), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
      }
    }, {
      key: "getItemElement",
      value: function getItemElement(model) {
        var index = model.get('_index');
        return this.$('.js-hotgraphicflip-item-click').filter('[data-index="' + index + '"]');
      }
    }, {
      key: "onItemClick",
      value: function onItemClick(event) {
        var item = this.model.getItem($(event.currentTarget).data('index'));
        if (item.get("_isActive")) return;
        event.preventDefault();
        event.stopPropagation();
        item.toggleActive();
        item.toggleVisited(true);
      }
    }, {
      key: "onItemBtnClick",
      value: function onItemBtnClick(event) {
        event.preventDefault();
        event.stopPropagation();
        var item = this.model.getItem($(event.currentTarget).data('index'));
        if (!item.get("_isActive")) return;
        item.toggleActive();
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(model, _isActive) {
        this.getItemElement(model).toggleClass('is-active', _isActive);
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(model, _isVisited) {
        if (!_isVisited) return;
        var $item = this.getItemElement(model);
        var visitedLabel = this.model.get('_globals')._accessibility._ariaLabels.visited + ".";
        $item.find('.aria-label').each(function (index, el) {
          el.innerHTML += " " + visitedLabel;
        });
        $item.addClass('is-visited');
      }
    }, {
      key: "onDeviceResize",
      value: function onDeviceResize() {
        this.recalcItemHeight();
      }
    }, {
      key: "recalcItemHeight",
      value: function recalcItemHeight() {
        var _this$model$get;

        var $items = this.$(".hotgraphicflip__item");
        $items.css({
          "min-height": ""
        });
        var h = 0;
        $items.each(function (i, e) {
          var _h = $(e).height();

          if (_h > h) {
            h = _h;
          }
        });
        var minHeightRatio = (_this$model$get = this.model.get("_itemSizing")) === null || _this$model$get === void 0 ? void 0 : _this$model$get._minHeightRatio;

        if (minHeightRatio && !isNaN(minHeightRatio)) {
          var w = $items.first().width();
          h = Math.max(h, w * minHeightRatio);
        }

        $items.css({
          "min-height": h
        });
      }
    }]);

    return HotgraphicFlipView;
  }(ComponentView$1);

  HotgraphicFlipView.template = "hotgraphicFlip";
  var HotgraphicFlipView$1 = __AMD("components/adapt-hotgraphicFlip/js/hotgraphicFlipView", HotgraphicFlipView);

  __AMD("components/adapt-hotgraphicFlip/js/adapt-hotgraphicFlip", Adapt.register('hotgraphicflip', {
    model: ItemsComponentModel.extend({}),
    view: HotgraphicFlipView$1
  }));

  var HotgraphicMiniView = function (_ComponentView) {
    _inherits(HotgraphicMiniView, _ComponentView);

    var _super = _createSuper(HotgraphicMiniView);

    function HotgraphicMiniView() {
      _classCallCheck(this, HotgraphicMiniView);

      return _super.apply(this, arguments);
    }

    _createClass(HotgraphicMiniView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-hotgraphicmini-item-click': 'onItemClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpModelData();
        ComponentView$1.prototype.initialize.call(this);
        this.setUpEventListeners();
        this.checkIfResetOnRevisit();
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        var itemSizing = this.model.get("_itemSizing");

        if (itemSizing && itemSizing._width) {
          itemSizing._classes = Adapt.sizing.getSizingGridClasses(itemSizing);
        }
      }
    }, {
      key: "setUpSizingListeners",
      value: function setUpSizingListeners() {
        var itemSizing = this.model.get("_itemSizing");

        if (itemSizing) {
          Adapt.sizing.setUpGridListeners(this.$(".sizing-grid"));
        }
      }
    }, {
      key: "preRender",
      value: function preRender() {}
    }, {
      key: "postRender",
      value: function postRender() {
        var _this = this;

        this.$('.hotgraphicmini__widget').imageready(function () {
          _this.setReadyStatus();

          _.debounce(_this.recalcContentMargins.bind(_this), 0)();
        });

        if (this.model.get('_setCompletionOn') === 'inview') {
          this.setupInviewCompletion('.component__widget');
        }

        this.setUpSizingListeners();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.onDeviceResize = _.debounce(this.onDeviceResize, 0);
        this.listenTo(Adapt, 'device:resize', this.onDeviceResize);
        this.listenTo(this.model.getChildren(), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
      }
    }, {
      key: "getItemElement",
      value: function getItemElement(model) {
        var index = model.get('_index');
        return this.$('.js-hotgraphicmini-item').filter('[data-adapt-index="' + index + '"]');
      }
    }, {
      key: "onItemClick",
      value: function onItemClick(event) {
        if (event) event.preventDefault();
        var item = this.model.getItem($(event.currentTarget).data('adapt-index'));
        item.toggleActive();
        item.toggleVisited(true);
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(model, _isActive) {
        this.getItemElement(model).toggleClass('is-active', _isActive);
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(model, _isVisited) {
        if (!_isVisited) return;
        var $item = this.getItemElement(model);
        var visitedLabel = this.model.get('_globals')._accessibility._ariaLabels.visited + ".";
        $item.find('.aria-label').each(function (index, el) {
          el.innerHTML += " " + visitedLabel;
        });
        $item.addClass('is-visited');
        $item.find(".js-hotgraphicmini-item-click").addClass("is-visited");
      }
    }, {
      key: "onDeviceResize",
      value: function onDeviceResize() {
        this.recalcContentMargins();
      }
    }, {
      key: "recalcContentMargins",
      value: function recalcContentMargins() {
        var $contents = this.$(".js-hotgraphicmini-content");
        $contents.css({
          "margin-bottom": ""
        });
        $contents.each(function (i, e) {
          var h = $(e).height();
          $(e).css("margin-bottom", -h).hide(0).show(0);
        });
      }
    }]);

    return HotgraphicMiniView;
  }(ComponentView$1);

  HotgraphicMiniView.template = "hotgraphicMini";
  var HotgraphicMiniView$1 = __AMD("components/adapt-hotgraphicMini/js/hotgraphicMiniView", HotgraphicMiniView);

  __AMD("components/adapt-hotgraphicMini/js/adapt-hotgraphicMini", Adapt.register('hotgraphicmini', {
    model: ItemsComponentModel.extend({}),
    view: HotgraphicMiniView$1
  }));

  var CLOSE_TIMEOUT = 500;
  var HotgraphicPlusPopupView = Backbone.View.extend({
    className: function () {
      var classes = ["hotgraphicplus-popup", this.model.get("_isSingleColumn") ? "is-single" : ""];
      return classes.join(" ");
    },
    events: {
      'click .js-hotgraphicplus-popup-close': 'onClickClose',
      'click .hotgraphicplus-popup__inner, .hotgraphicplus-popup__item-content, .hotgraphicplus-popup__item-graphic': 'onClickBG',
      'click .js-hotgraphic-controls-click': 'onControlClick'
    },
    initialize: function () {
      var _this$model$get,
          _this = this,
          _this$model$get2;

      this._canUserClose = false;
      this._hasAltImg = Boolean((_this$model$get = this.model.get("_graphic")) === null || _this$model$get === void 0 ? void 0 : _this$model$get.srcPopup);

      _.delay(function () {
        _this._canUserClose = true;
      }, CLOSE_TIMEOUT);

      var sizing = (_this$model$get2 = this.model.get("_graphic")) === null || _this$model$get2 === void 0 ? void 0 : _this$model$get2._sizing;

      if (sizing) {
        this.model.get("_graphic")._sizing._classes = Adapt.sizing.getSizingClasses(sizing);
      }

      this.listenToOnce(Adapt, "notify:opened", this.onOpened);
      this.listenTo(Adapt, "notify:closed", this.onClosed);
      this.render();
    },
    onClickClose: function (event) {
      if (!this._canUserClose) return;
      this.closePopup();
    },
    onClickBG: function (event) {
      event.stopPropagation();
      if (event.target != event.currentTarget) return;
      if (!this._canUserClose) return;
      this.closePopup();
    },
    onOpened: function () {
      this.$el.imageready(_.debounce(this.setupGraphicTransition.bind(this), 0));
    },
    alignGraphicToPin: function () {
      var parentView = Adapt.findViewByModelId(this.model.get("_parent").get("_id"));
      var itemIdx = this.model.get("_index");
      var $pin = parentView.$(".hotgraphicplus__item-image-transition").filter(".item-" + itemIdx);
      var $img = this.$(".js-hotgraphicplus-popup-image");
      var $tran = this.$(".js-hotgraphicplus-popup-image-transition");
      $tran.css({
        "transform": ""
      });
      var pinBB = $pin[0].getBoundingClientRect();
      var imgBB = $img[0].getBoundingClientRect();
      var scale = pinBB.width / imgBB.width;
      var offset = {
        top: pinBB.top - imgBB.top,
        left: pinBB.left - imgBB.left
      };

      if (this._hasAltImg) {
        var tranBB = $tran[0].getBoundingClientRect();
        offset.top = pinBB.top - tranBB.top - (imgBB.top - tranBB.top) * scale;
      }

      $tran.css({
        "transform": "translate(" + offset.left + "px, " + offset.top + "px) scale(" + scale + ")"
      });
      return $tran;
    },
    setupGraphicTransition: function () {
      var $img = this.alignGraphicToPin();
      this.setReadyStatus();

      _.debounce(function () {
        return $img.addClass("is-active transition-enabled").find(".hotgraphicplus-popup__item-image-transition-inner").addClass("is-active");
      }, 50)();
    },
    setReadyStatus: function () {
      this.model.trigger("hotgraphicPlusPopupView:ready");
      this.$el.addClass("is-ready");
    },
    onClosed: function (notifyView) {
      if (!notifyView.$el.hasClass("hotgraphicplus")) return;
      var $img = this.alignGraphicToPin();
      $img.removeClass("is-active").find(".hotgraphicplus-popup__item-image-transition-inner").removeClass("is-active");
      this.$el.addClass("is-closed");
    },
    remove: function () {
      this.model.trigger("remove");
    },
    render: function () {
      var data = this.model.toJSON();
      data.view = this;
      var template = Handlebars.templates['hotgraphicPlusPopup'];
      this.$el.html(template(data));
    },
    closePopup: function (event) {
      Adapt.trigger('notify:close');
    }
  });
  var HotgraphicPlusPopupView$1 = __AMD("components/adapt-hotgraphicPlus/js/hotgraphicPlusPopupView", HotgraphicPlusPopupView);

  var HotGraphicPlusView = ComponentView$1.extend({
    events: {
      'click .js-hotgraphicplus-item-click': 'onPinClicked',
      'click .js-hotgraphicplus-counter': 'onFinderCounterClick'
    },
    className: function () {
      var classes = ComponentView$1.prototype.className.call(this);
      if (this.model.get("_isSingleColumn")) classes += " is-single";
      return classes;
    },
    initialize: function () {
      this.setUpModelData();
      ComponentView$1.prototype.initialize.call(this);
      this.setUpViewData();
      this.setUpEventListeners();
      this.checkIfResetOnRevisit();
    },
    setUpViewData: function () {
      this.popupView = null;
      this._isPopupOpen = false;
    },
    setUpModelData: function () {
      var graphic = this.model.get("_graphic");

      if (graphic && graphic._sizing) {
        graphic._sizing._classes = Adapt.sizing.getSizingClass(graphic._sizing);
      } else {
          var itemSizing = this.model.get("_itemSizing");

          if (itemSizing) {
            itemSizing._classes = Adapt.sizing.getSizingGridClasses(itemSizing);
          }
        }

      var itemPopupSizing = this.model.get("_itemPopupSizing");

      if (itemPopupSizing) {
        this.model.getChildren().each(function (item) {
          if (!item.get("_graphic")) item.set("_graphic", {});
          var itemSizing = item.get("_sizing") || item.get("_graphic")._sizing || {};
          item.get("_graphic")._sizing = _.extend({}, itemPopupSizing, itemSizing);
        });
      }

      var finderData = this.model.get("_finder");

      if (finderData && finderData._isEnabled !== false) {
        var _finderData$_counter;

        var counterSizing = (_finderData$_counter = finderData._counter) === null || _finderData$_counter === void 0 ? void 0 : _finderData$_counter._sizing;
        if (!counterSizing) throw "adapt-hotgraphicplus: \"_finder._counter._sizing\" must be defined if using \"_finder\" mode.";
        finderData._counter._sizing._classes = Adapt.sizing.getSizingClass(counterSizing);
      }
    },
    setUpSizingListeners: function () {
      var itemSizing = this.model.get("_itemSizing");

      if (itemSizing) {
        Adapt.sizing.setUpGridListeners(this.$(".sizing-grid"));
      }
    },
    updateFinderCounter: function () {
      var finderData = this.model.get("_finder");
      if (!finderData || finderData._isEnabled === false) return;
      var items = this.model.getChildren();
      var itemsRemaining = 0;
      items.each(function (item) {
        if (!item.get("_isVisited")) itemsRemaining++;
      });
      this.$(".js-hotgraphicplus-counter-num").text(itemsRemaining);
      this.$(".js-hotgraphicplus-counter-suffix").text(itemsRemaining == 1 ? "Remains" : "Remain");

      if (itemsRemaining === 0) {
        this.$(".js-hotgraphicplus-counter").addClass("is-complete");
        this.$(".js-hotgraphicplus-counter-hint").text("Well done!");
      }
    },
    onFinderCounterClick: function () {
      var _this = this;

      var items = this.model.getChildren();
      var nonVisitedItem = items.find(function (item) {
        if (!item.get("_isVisited")) return item;
      });
      if (!nonVisitedItem) return;
      this.clearFinderHints();

      _.delay(function () {
        var $item = _this.getItemElement(nonVisitedItem);

        $item.addClass("is-finder-hint");
        Adapt.navigateToElement($item, {
          duration: 400,
          align: "inview"
        });
      });
    },
    clearFinderHints: function () {
      this.$(".is-finder-hint").removeClass("is-finder-hint");
    },
    setUpEventListeners: function () {
      this.listenTo(this.model.getChildren(), {
        'change:_isActive': this.onItemsActiveChange,
        'change:_isVisited': this.onItemsVisitedChange,
        'change:_isVisible': this.onItemsVisibleChange
      });

      if (this.isTabsMode()) {
        this.listenTo(Adapt, 'device:resize', this.onDeviceResizeTabs);
        this._isTabsOpen = false;
      }
    },
    isTabsMode: function () {
      var _this$model$get;

      return (_this$model$get = this.model.get("_tabs")) === null || _this$model$get === void 0 ? void 0 : _this$model$get._isEnabled;
    },
    reRender: function () {},
    onItemsActiveChange: function (model, _isActive) {
      this.getItemElement(model).toggleClass('is-active', _isActive);
    },
    onItemsVisibleChange: function (model, _isVisible) {
      this.getItemElement(model).toggleClass("is-hidden", !_isVisible);
    },
    getItemElement: function (model) {
      var index = model.get('_index');
      return this.$('.js-hotgraphicplus-item-click').filter('[data-index="' + index + '"]');
    },
    onItemsVisitedChange: function (model, _isVisited) {
      if (!_isVisited) return;
      var $pin = this.getItemElement(model);
      var visitedLabel = this.model.get('_globals')._accessibility._ariaLabels.visited + ".";
      $pin.find('.aria-label').each(function (index, el) {
        el.innerHTML += " " + visitedLabel;
      });
      $pin.addClass('is-visited');

      _.delay(function () {
        $pin.addClass('is-finder-visited');
      }, 500);

      this.updateFinderCounter();
      this.clearFinderHints();
    },
    checkIfResetOnRevisit: function () {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    },
    preRender: function () {},
    postRender: function () {
      this.$('.hotgraphicplus__widget').imageready(this.setReadyStatus.bind(this));

      if (this.model.get('_setCompletionOn') === 'inview') {
        this.setupInviewCompletion('.component__widget');
      }

      this.setUpDebug();
      this.setUpSizingListeners();
    },
    setUpDebug: function () {
      var _Adapt$debug, _Adapt$debug2;

      if (!((_Adapt$debug = Adapt.debug) !== null && _Adapt$debug !== void 0 && _Adapt$debug._isEnabled)) return;
      var $pinItems = this.$(".hotgraphicplus__pin-item");

      if ((_Adapt$debug2 = Adapt.debug) !== null && _Adapt$debug2 !== void 0 && _Adapt$debug2.setUpInteract) {
        Adapt.debug.setUpInteract($pinItems, this.$(".hotgraphicplus__pin-item-container"));
      }
    },
    onPinClicked: function (event) {
      if (event) event.preventDefault();
      var item = this.model.getItem($(event.currentTarget).data('index'));
      this.model.getChildren().each(function (e) {
        e.toggleActive(e == item);
      });
      item.toggleVisited(true);

      if (this.isTabsMode() && Adapt.device.screenSize !== "small") {
        if (!this._isTabsOpen) {
          this.showTab(item);
          this.$(".js-hotgraphicplus-tabs").slideDown();
          this._isTabsOpen = true;
        } else {
          this.showTab(item);
          this.$(".js-hotgraphicplus-tabs").show(0);
        }
      } else {
        this.openPopup(item);
      }
    },
    onDeviceResizeTabs: function () {
      _.delay(this.updateTabTail.bind(this), 0);
    },
    updateTabTail: function () {
      var item = this.model.getActiveItem();
      if (!item) return;
      var $item = this.getItemElement(this.model.getActiveItem());
      var itemBB = $item[0].getBoundingClientRect();
      var widgetBB = this.$(".hotgraphicplus__widget")[0].getBoundingClientRect();
      var left = itemBB.left - widgetBB.left;
      var width = itemBB.width;
      var $tail = this.$(".js-hotgraphicplus-tabs-tail");
      var tailLeft = left + width / 2;
      tailLeft = tailLeft / this.$(".component__widget").width();
      $tail.css({
        "left": tailLeft * 100 + "%"
      });

      if (!$tail.hasClass("is-active")) {
        _.delay(function () {
          $tail.hide(0).show(0);
          $tail.addClass("is-active");
        }, 500);
      }
    },
    showTab: function (itemModel) {
      this.updateTabTail();
      this.$(".js-hotgraphicplus-tab-item").removeClass("is-active").filter("[data-index=" + itemModel.get("_index") + "]").addClass("is-active");
      var $tabs = this.$(".js-hotgraphicplus-tabs");
      if (!this._isTabsOpen) $tabs.show(0);
      Adapt.navigateToElement($tabs, {
        duration: 400,
        align: "inview"
      });
      if (!this._isTabsOpen) $tabs.hide(0);
    },
    openPopup: function (itemModel) {
      if (this._isPopupOpen) return;
      this._isPopupOpen = true;
      itemModel.set("_parent", this.model);
      itemModel.set("_isSingleColumn", this.model.get("_isSingleColumn"));

      try {
        this.popupView = new HotgraphicPlusPopupView$1({
          model: itemModel
        });
      } catch (err) {
        Adapt.log.error("hotgraphicPlusView: could not render popup (view has errors; see below):");
        this._isPopupOpen = false;
        throw err;
      }

      this.listenToOnce(this.popupView.model, "hotgraphicPlusPopupView:ready", function () {
        itemModel.set("_isVisible", false);
      });
      Adapt.trigger("notify:popup", {
        _view: this.popupView,
        _isCancellable: true,
        _classes: 'hotgraphicplus ' + this.model.get('_classes') + " " + this.model.get("_id")
      });
      this.listenToOnce(this.popupView.model, "remove", this.onPopupRemoved);
    },
    onPopupRemoved: function () {
      this.model.getActiveItem().set("_isVisible", true);
      this.model.getActiveItem().toggleActive();
      this._isPopupOpen = false;
    }
  }, {
    template: "hotgraphicPlus"
  });
  var HotgraphicPlusView = __AMD("components/adapt-hotgraphicPlus/js/hotgraphicPlusView", HotGraphicPlusView);

  __AMD("components/adapt-hotgraphicPlus/js/adapt-hotgraphicPlus", Adapt.register('hotgraphicplus', {
    model: ItemsComponentModel.extend({}),
    view: HotgraphicPlusView
  }));

  var ImgFinderOutlineModel = function (_Backbone$Model) {
    _inherits(ImgFinderOutlineModel, _Backbone$Model);

    var _super = _createSuper(ImgFinderOutlineModel);

    function ImgFinderOutlineModel() {
      _classCallCheck(this, ImgFinderOutlineModel);

      return _super.apply(this, arguments);
    }

    _createClass(ImgFinderOutlineModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          "_size": "avg",
          "_accuracy": 0,
          "_parent": null,
          "_position": {
            _left: 0,
            _top: 0
          },
          "_myItem": null,
          "_myItems": [],
          _width: 0,
          _height: 0,
          _top: 0,
          _left: 0
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.calcSize();
        this.onPositionChange(this, this.get("_position"));
        this.setupEventListeners();
      }
    }, {
      key: "calcSize",
      value: function calcSize() {
        var sizeType = this.get("_size");

        switch (sizeType) {
          case "near":
            throw "ImgFinder: _outline._size == \"near\" is not implemented yet.";

          case "avg":
          default:
            this.set(this.getAvgOutlineSize());
        }
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(this, "change:_position", this.onPositionChange);
      }
    }, {
      key: "onPositionChange",
      value: function onPositionChange(model, position) {
        this.set("_left", position._left - this.get("_width") / 2);
        this.set("_top", position._top - this.get("_height") / 2);
        this.set("_isIncorrect", this.isOverGuess());
      }
    }, {
      key: "isOverGuess",
      value: function isOverGuess() {
        if (this.get("_isLocked") || this.get("_isCorrect")) return false;
        if (this.calcOverlappedItems().length) return false;
        var position = this.get("_position");
        var guess = this.get("_parent").getGuesses().find(function (guess) {
          if (position._left > guess._left + guess._width) return false;
          if (position._left < guess._left) return false;
          if (position._top > guess._top + guess._height) return false;
          if (position._top < guess._top) return false;
          return true;
        });
        return Boolean(guess);
      }
    }, {
      key: "calcOverlappedItems",
      value: function calcOverlappedItems() {
        var _this = this;

        if (this.get("_isLocked")) {
          this.set("_myItems", []);
          return;
        }

        var parent = this.get("_parent");
        var accuracy = this.get("_accuracy");
        var items = [];
        parent.getChildren().each(function (itemModel) {
          var v = _this.getVectorToItem(itemModel);

          var w = itemModel.get("_width") / 2 * (1 - accuracy);
          var h = itemModel.get("_height") / 2 * (1 - accuracy);
          if (Math.abs(v.x) > w) return false;
          if (Math.abs(v.y) > h) return false;
          items.push({
            proximity: _this.getVectorLengthSquared(v),
            item: itemModel
          });
        });
        items = _.sortBy(items, "proximity");
        this.set("_myItems", items);
        return items;
      }
    }, {
      key: "getOverlappingItemData",
      value: function getOverlappingItemData(itemModel) {
        return _.find(this.get("_myItems"), function (itemObj) {
          return itemObj.item == itemModel;
        });
      }
    }, {
      key: "pairWithItem",
      value: function pairWithItem(itemModel) {
        this.set("_item", itemModel);
        this.set("_isCorrect", true);
        this.set("_isIncorrect", false);
        this.set("_isLocked", true);
        this.set("_position", itemModel.getPosition());
        itemModel.set({
          _outline: this,
          _isCorrect: true,
          _isLocked: true,
          _isActive: true
        });
      }
    }, {
      key: "getVectorToItem",
      value: function getVectorToItem(item) {
        var position = this.get("_position");

        var x = item.get("_left") + item.get("_width") / 2 - position._left;

        var y = item.get("_top") + item.get("_height") / 2 - position._top;

        return {
          x: x,
          y: y
        };
      }
    }, {
      key: "getVectorLength",
      value: function getVectorLength(vector) {
        return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
      }
    }, {
      key: "getVectorLengthSquared",
      value: function getVectorLengthSquared(vector) {
        return Math.pow(vector.x, 2) + Math.pow(vector.y, 2);
      }
    }, {
      key: "getAvgOutlineSize",
      value: function getAvgOutlineSize() {
        var sizeMod = this.get("_sizeMod") || 1;
        var width = 0;
        var height = 0;
        var items = this.get("_parent").getChildren();
        items.each(function (item) {
          var w = item.get("_width");
          var h = item.get("_height");
          if (isNaN(w)) throw "imgFinderView.js: invalid value provided for item \"_width\": ".concat(w, ". Value must be a number!");
          if (isNaN(h)) throw "imgFinderView.js: invalid value provided for item \"_height\": ".concat(h, ". Value must be a number!");
          width += w;
          height += h;
        });
        var avg = {
          _width: width / items.length * sizeMod,
          _height: height / items.length * sizeMod
        };
        return avg;
      }
    }, {
      key: "getGuessObj",
      value: function getGuessObj() {
        return {
          _left: this.get("_left"),
          _top: this.get("_top"),
          _width: this.get("_width"),
          _height: this.get("_height")
        };
      }
    }, {
      key: "remove",
      value: function remove() {
        var _this$collection;

        this.set("_isRemoved", true);
        (_this$collection = this.collection) === null || _this$collection === void 0 ? void 0 : _this$collection.remove(this);
      }
    }]);

    return ImgFinderOutlineModel;
  }(Backbone.Model);

  var ImgFinderOutlineModel$1 = __AMD("components/adapt-imgFinder/js/imgFinderOutlineModel", ImgFinderOutlineModel);

  var DRAGGING_BUFFER = 50;

  var ImgFinderOutlineView = function (_Backbone$View) {
    _inherits(ImgFinderOutlineView, _Backbone$View);

    var _super = _createSuper(ImgFinderOutlineView);

    function ImgFinderOutlineView() {
      _classCallCheck(this, ImgFinderOutlineView);

      return _super.apply(this, arguments);
    }

    _createClass(ImgFinderOutlineView, [{
      key: "className",
      value: function className() {
        var classes = ["imgfinder-outline", this.model.get("_isCorrect") ? "is-correct" : "", this.model.get("_isIncorrect") ? "is-incorrect" : "", this.model.get("_isLocked") ? "is-locked" : ""];
        return classes.join(" ");
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          "style": "top: ".concat(this.model.get("_top"), "%; left: ").concat(this.model.get("_left"), "%; width: ").concat(this.model.get("_width"), "%; height: ").concat(this.model.get("_height"), "%;")
        };
      }
    }, {
      key: "events",
      value: function events() {
        return {
          "mousedown": "onMouseDown",
          "touchstart": "onMouseDown",
          "click": "onClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.render();
        this.setupEventListeners();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(this.model, {
          "change:_left": this.onPositionChange,
          "change:_top": this.onPositionChange,
          "change:_isDragging": this.onDraggingChange,
          "change:_isMouseDown": this.onMouseDownChange,
          "change:_isCorrect": this.onCorrectChange,
          "change:_isIncorrect": this.onIsIncorrectChange,
          "change:_isLocked": this.onLockedChange,
          "change:_isRemoved": this.onIsRemovedChange
        });
      }
    }, {
      key: "onCorrectChange",
      value: function onCorrectChange(model, isCorrect) {
        this.$el.toggleClass("is-correct", isCorrect);
      }
    }, {
      key: "onIsIncorrectChange",
      value: function onIsIncorrectChange(model, isIncorrect) {
        this.$el.toggleClass("is-incorrect", isIncorrect);
      }
    }, {
      key: "onLockedChange",
      value: function onLockedChange(model, isLocked) {
        if (!isLocked) return;
        this.$el.draggable("option", "disabled", true);
        this.$el.off("mousedown").off("touchstart").off("click");
      }
    }, {
      key: "onMouseDown",
      value: function onMouseDown() {
        this.model.set("_isMouseDown", true);
      }
    }, {
      key: "onMouseDownChange",
      value: function onMouseDownChange(model, isMouseDown) {
        this.$el.toggleClass("is-mousedown", isMouseDown);
      }
    }, {
      key: "onBlur",
      value: function onBlur() {
        this.model.set("_isMouseDown", false);
      }
    }, {
      key: "onDraggingChange",
      value: function onDraggingChange(model, isDragging) {
        this.$el.toggleClass("is-dragging", isDragging);
      }
    }, {
      key: "onPositionChange",
      value: function onPositionChange(model) {
        this.$el.css("left", this.model.get("_left") + "%");
        this.$el.css("top", this.model.get("_top") + "%");
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        data.view = this;
        var template = Handlebars.templates['imgFinderOutline'];
        this.$el.html(template(data));
        this.setupDraggable();
      }
    }, {
      key: "setupDraggable",
      value: function setupDraggable() {
        var _this = this;

        this.$el.draggable({
          containment: "parent",
          scroll: false,
          start: function (event, ui) {
            _this.model.set("_isDragging", true);

            _this._isDragging = true;
          },
          stop: function () {
            _this.recalcPosition();

            _this.model.set("_isDragging", false);

            _this.model.set("_isMouseDown", false);

            _.delay(function () {
              _this._isDragging = false;
            }, DRAGGING_BUFFER);
          }
        });
      }
    }, {
      key: "onClick",
      value: function onClick(event) {
        event.preventDefault();
        event.stopPropagation();
        this.model.set("_isMouseDown", false);
        if (this._isDragging) return;
        this.model.remove();
      }
    }, {
      key: "$getArea",
      value: function $getArea() {
        return this.$el.closest(".js-imgfinder-outline-area").first();
      }
    }, {
      key: "recalcPosition",
      value: function recalcPosition() {
        var pos = this.$el.position();
        var $area = this.$getArea();
        var bb = $area[0].getBoundingClientRect();
        this.model.set("_position", {
          _left: pos.left / bb.width * 100 + this.model.get("_width") / 2,
          _top: pos.top / bb.height * 100 + this.model.get("_height") / 2
        });
      }
    }, {
      key: "onIsRemovedChange",
      value: function onIsRemovedChange(model, isRemoved) {
        if (!isRemoved) return;
        this.remove();
      }
    }, {
      key: "remove",
      value: function remove() {
        var _this2 = this;

        this.$el.addClass("is-removed");
        this.model.remove();

        _.delay(function () {
          _get(_getPrototypeOf(ImgFinderOutlineView.prototype), "remove", _this2).call(_this2);
        }, 500);
      }
    }]);

    return ImgFinderOutlineView;
  }(Backbone.View);

  var ImgFinderOutlineView$1 = __AMD("components/adapt-imgFinder/js/imgFinderOutlineView", ImgFinderOutlineView);

  var ImgFinderView = function (_QuestionView) {
    _inherits(ImgFinderView, _QuestionView);

    var _super = _createSuper(ImgFinderView);

    function ImgFinderView() {
      _classCallCheck(this, ImgFinderView);

      return _super.apply(this, arguments);
    }

    _createClass(ImgFinderView, [{
      key: "events",
      value: function events() {
        return {
          "mousedown .js-imgfinder-outline-area": "onOutlineAreaDown",
          "touchstart .js-imgfinder-outline-area": "onOutlineAreaDown"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpModelData();

        _get(_getPrototypeOf(ImgFinderView.prototype), "initialize", this).call(this);

        this.setupEventListeners();
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        var graphic = this.model.get("_graphic");

        if (graphic && graphic._sizing) {
          graphic._sizing._classes = Adapt.sizing.getSizingClass(graphic._sizing);
        }
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(this.model, {
          "change:_isSubmitted": this.onIsSubmittedChange,
          "change:_isCorrect": this.onIsCorrectChange
        });
      }
    }, {
      key: "onIsSubmittedChange",
      value: function onIsSubmittedChange(model, isSubmitted) {
        if (!isSubmitted) return;
        this.$el.toggleClass("is-submitted", isSubmitted);
      }
    }, {
      key: "onIsCorrectChange",
      value: function onIsCorrectChange(model, isCorrect) {
        this.$el.toggleClass("is-correct", isCorrect).toggleClass("is-incorrect", !isCorrect);
      }
    }, {
      key: "setUpDebug",
      value: function setUpDebug() {
        var _Adapt$debug, _Adapt$debug2;

        if (!((_Adapt$debug = Adapt.debug) !== null && _Adapt$debug !== void 0 && _Adapt$debug._isEnabled)) return;

        if ((_Adapt$debug2 = Adapt.debug) !== null && _Adapt$debug2 !== void 0 && _Adapt$debug2.setUpInteract) {
          var $items = this.$(".js-imgfinder-item");
          var $container = this.$(".js-imgfinder-item-container");
          Adapt.debug.setUpInteract($items, $container, false);
        }
      }
    }, {
      key: "onOutlineAreaDown",
      value: function onOutlineAreaDown(event) {
        if (this.model.get("_isSubmitted")) return;
        var $area = this.$(".js-imgfinder-outline-area");
        if (!$area.is($(event.target))) return;
        event.preventDefault();
        event.stopPropagation();
        var x = 0;
        var y = 0;
        var bb = $area[0].getBoundingClientRect();

        if (event.touches) {
          var touch = event.touches[0] || event.changedTouches[0];
          x = touch.clientX - bb.left;
          y = touch.clientY - bb.top;
        } else {
          x = event.clientX - bb.left;
          y = event.clientY - bb.top;
        }

        var pos = {
          _left: x / $area.width() * 100,
          _top: y / $area.height() * 100
        };
        this.addOutline(pos);
      }
    }, {
      key: "addOutline",
      value: function addOutline(position) {
        var $area = this.$(".js-imgfinder-outline-area");

        var modelData = _.extend({}, this.model.get("_outline"), {
          _position: position,
          _parent: this.model
        });

        var outlineModel = new ImgFinderOutlineModel$1(modelData);
        var outlineView = new ImgFinderOutlineView$1({
          model: outlineModel
        });
        $area.append(outlineView.$el);
        this.model.addOutline(outlineModel);
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.model.setupRandomisation();
        this.model.stopListening(this.model.getChildren(), "change:_isVisited", this.model.checkCompletionStatus);
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        this.updateMarking();
      }
    }, {
      key: "update",
      value: function update() {
        this.updateMarking();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        _get(_getPrototypeOf(ImgFinderView.prototype), "postRender", this).call(this);

        this.setUpDebug();
      }
    }, {
      key: "onSubmitted",
      value: function onSubmitted() {
        _get(_getPrototypeOf(ImgFinderView.prototype), "onSubmitted", this).call(this);

        this.listenToOnce(Adapt, "notify:closed", this.onFeedbackClosed);
      }
    }, {
      key: "onFeedbackClosed",
      value: function onFeedbackClosed() {}
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        this.update();
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        this.update();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model.getChildren(), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
      }
    }, {
      key: "onItemClick",
      value: function onItemClick(event) {
        if (event) event.preventDefault();
        var item = this.model.getItem($(event.currentTarget).data('adapt-index'));
        item.toggleActive();
      }
    }, {
      key: "getItemElement",
      value: function getItemElement(model) {
        var index = model.get('_index');
        return this.$('.js-finder-item').filter('[data-adapt-index="' + index + '"]');
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(model, _isActive) {
        this.getItemElement(model).toggleClass('is-active', _isActive).find(".js-item-label").toggleClass('is-selected', _isActive);
        this.updateContainer();
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(model, _isVisited) {
        if (!_isVisited) return;
        var $item = this.getItemElement(model);
        $item.addClass('is-visited');
      }
    }, {
      key: "updateMarking",
      value: function updateMarking() {
        var _this = this;

        var isInteractive = this.model.isInteractive();
        var canShowMarking = this.model.get('_canShowMarking');

        Adapt.course.get('_globals')._accessibility._ariaLabels;

        this.model.getChildren().each(function (itemModel) {
          itemModel.get('_index');

          var $item = _this.getItemElement(itemModel);

          var $itemLabel = $item.find(".js-item-label");
          var shouldBeSelected = Boolean(itemModel.get("_shouldBeSelected"));
          var isActive = Boolean(itemModel.get("_isActive"));
          var isVisited = Boolean(itemModel.get("_isVisited") || isActive);
          itemModel.set("_isVisited", isVisited);
          var isCorrect = shouldBeSelected && isActive;
          var isDisabled = !isInteractive || isCorrect;
          $item.prop('disabled', isDisabled).toggleClass('is-disabled', isDisabled).find(".finder__item-answer-icon").toggleClass('is-disabled', isDisabled);

          if (!isVisited || !canShowMarking) {
            $item.removeClass('is-correct is-incorrect');
            $itemLabel.removeClass('is-correct is-incorrect');
            return;
          }

          if (!isActive) return;
          $item.toggleClass('is-correct', isCorrect).toggleClass('is-incorrect', !isCorrect).toggleClass('is-disabled', isDisabled).prop('disabled', isDisabled);
          $itemLabel.toggleClass('is-correct', isCorrect).toggleClass('is-incorrect', !isCorrect).toggleClass('is-disabled', isDisabled);
        });
        this.updateContainer();
      }
    }, {
      key: "updateContainer",
      value: function updateContainer() {
        var isAtLeastOneIncorrect = Boolean(this.model.getChildren().find(function (itemModel) {
          return itemModel.get("_isVisited") && itemModel.get("_isActive") && !itemModel.get("_shouldBeSelected");
        }));
        var $container = this.$(".finder__items-container");
        $container.toggleClass("is-incorrect", isAtLeastOneIncorrect).toggleClass("is-correct", Boolean(this.model.get("_isCorrect")));
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setReadyStatus();
        this.update();
      }
    }]);

    return ImgFinderView;
  }(QuestionView$1);

  ImgFinderView.template = "imgFinder";
  var ImgFinderView$1 = __AMD("components/adapt-imgFinder/js/imgFinderView", ImgFinderView);

  var ImgFinderItemModel = function (_ItemModel) {
    _inherits(ImgFinderItemModel, _ItemModel);

    var _super = _createSuper(ImgFinderItemModel);

    function ImgFinderItemModel() {
      _classCallCheck(this, ImgFinderItemModel);

      return _super.apply(this, arguments);
    }

    _createClass(ImgFinderItemModel, [{
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(ImgFinderItemModel.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this.setupModelData();
      }
    }, {
      key: "setupModelData",
      value: function setupModelData() {}
    }, {
      key: "getPosition",
      value: function getPosition() {
        return {
          _left: this.get("_left") + this.get("_width") / 2,
          _top: this.get("_top") + this.get("_height") / 2
        };
      }
    }]);

    return ImgFinderItemModel;
  }(ItemModel);

  var ImgFinderItemModel$1 = __AMD("components/adapt-imgFinder/js/imgFinderItemModel", ImgFinderItemModel);

  var FEEDBACK_HINT = "<p><em>(You can click an existing outline to remove it, or you can drag it to reposition it).</em></p>";
  var MAX_GUESSES = 20;

  var ImgFinderModel = function (_ItemsQuestionModel) {
    _inherits(ImgFinderModel, _ItemsQuestionModel);

    var _super = _createSuper(ImgFinderModel);

    function ImgFinderModel() {
      _classCallCheck(this, ImgFinderModel);

      return _super.apply(this, arguments);
    }

    _createClass(ImgFinderModel, [{
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(ImgFinderModel.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this.setupModelData();
        this.setupEventListeners();
      }
    }, {
      key: "setUpItems",
      value: function setUpItems() {
        var _this = this;

        var items = this.get('_items') || [];
        items.forEach(function (item, index) {
          item._index = index;
          item._parent = _this;
        });
        this.setChildren(new Backbone.Collection(items, {
          model: ImgFinderItemModel$1
        }));
      }
    }, {
      key: "setupModelData",
      value: function setupModelData() {
        var outlines = new Backbone.Collection();
        this.set("_outlines", outlines);
        this.set("_guesses", []);
        this.set("_hasShownFeedbackHint", false);
      }
    }, {
      key: "getGuesses",
      value: function getGuesses() {
        return this.get("_guesses");
      }
    }, {
      key: "addGuess",
      value: function addGuess(guess) {
        var g = this.get("_guesses");
        g.push(guess);
        if (g.length > MAX_GUESSES) g.shift();
        this.set("_guesses", g);
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        var _get3;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        if (_get(_getPrototypeOf(ImgFinderModel.prototype), "setupEventListeners", this)) (_get3 = _get(_getPrototypeOf(ImgFinderModel.prototype), "setupEventListeners", this)).call.apply(_get3, [this].concat(args));
        this.listenTo(this.get("_outlines"), {
          "add": this.onOutlinesModified,
          "remove": this.onOutlinesModified
        });
      }
    }, {
      key: "addOutline",
      value: function addOutline(outlineModel) {
        this.get("_outlines").push(outlineModel);
      }
    }, {
      key: "onOutlinesModified",
      value: function onOutlinesModified() {
        this.checkCanSubmit();
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        return this.get("_outlines").length >= 1;
      }
    }, {
      key: "validateOutlines",
      value: function validateOutlines() {
        var _this2 = this;

        var outlines = this.get("_outlines");
        outlines.each(function (outline) {
          outline.calcOverlappedItems();
        });
        this.getChildren().each(function (itemModel) {
          if (itemModel.get("_isLocked")) return;
          var myOutline = null;
          var myProximity = Infinity;
          outlines.each(function (outline) {
            if (outline.get("_isLocked")) return;
            var data = outline.getOverlappingItemData(itemModel);
            if (!data) return;

            if (data.proximity < myProximity) {
              myProximity = data.proximity;
              myOutline = outline;
            }
          });

          if (!myOutline) {
            itemModel.set("_isActive", false);
            return;
          }

          myOutline.pairWithItem(itemModel);
          itemModel.set("_isActive", true);
        });
        outlines.each(function (outline) {
          if (!outline) return;
          if (outline.get("_isLocked")) return;
          if (!outline.get("_myItems").length) return;
          outline.remove();
        });
        outlines.each(function (outline) {
          _this2.addGuess(outline.getGuessObj());

          outline.set("_isIncorrect", true);
        });
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        this.validateOutlines();
        var outlines = this.get("_outlines");
        var correctOutlines = [];
        var incorrectOutlines = [];
        outlines.each(function (outline) {
          if (outline.get("_isCorrect")) {
            correctOutlines.push(outline);
          } else {
            incorrectOutlines.push(outline);
          }
        });
        var props = {
          _numberOfIncorrectAnswers: incorrectOutlines.length,
          _numberOfCorrectAnswers: correctOutlines.length,
          _numberOfRequiredAnswers: this.getChildren().length,
          _isAtLeastOneIncorrectSelection: Boolean(incorrectOutlines.length)
        };
        this.set(props);
        var hasRightNumberOfCorrectAnswers = props._numberOfCorrectAnswers === props._numberOfRequiredAnswers;
        var hasNoIncorrectAnswers = !props._isAtLeastOneIncorrectSelection;
        return hasRightNumberOfCorrectAnswers && hasNoIncorrectAnswers;
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_numberOfCorrectAnswers') > 0;
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (!this.has('_feedback')) return;

        if (this.get('_isCorrect')) {
          this.setupCorrectFeedback();
          return;
        }

        if (!this.get("_hasShownFeedbackHint")) {
          this.set("_hasShownFeedbackHint", true);
          console.log("FIXME");
          console.log("FIXME");
          console.log("FIXME");
          console.log("FIXME");
          console.log("FIXME");
          console.log("FIXME");
          console.log("FIXME");
          var feedback = this.get("_feedback");
          if (feedback._partlyCorrect.final) this.get("_feedback")._partlyCorrect.body += FEEDBACK_HINT;
          feedback._incorrect.final += FEEDBACK_HINT;
          this.set("_feedback", feedback);
        }

        if (this.isPartlyCorrect()) {
          this.setupPartlyCorrectFeedback();
          return;
        }

        this.setupIncorrectFeedback();
      }
    }]);

    return ImgFinderModel;
  }(ItemsQuestionModel);

  var ImgFinderModel$1 = __AMD("components/adapt-imgFinder/js/imgFinderModel", ImgFinderModel);

  __AMD("components/adapt-imgFinder/js/adapt-imgFinder", Adapt.register("imgfinder", {
    view: ImgFinderView$1,
    model: ImgFinderModel$1
  }));

  var MatchingPlusModel = function (_QuestionModel) {
    _inherits(MatchingPlusModel, _QuestionModel);

    var _super = _createSuper(MatchingPlusModel);

    function MatchingPlusModel() {
      _classCallCheck(this, MatchingPlusModel);

      return _super.apply(this, arguments);
    }

    _createClass(MatchingPlusModel, [{
      key: "init",
      value: function init() {
        _get(_getPrototypeOf(MatchingPlusModel.prototype), "init", this).call(this);

        this.setUpItems.apply(this, arguments);
        this.checkCanSubmit();
        this.setUpEventListeners();
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var json = _get(_getPrototypeOf(MatchingPlusModel.prototype), "toJSON", this).call(this);

        json._items = this.getChildren().toJSON();
        return json;
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.getChildren(), {
          "change:_optionsSelected": this.onItemOptionsSelectedChange
        });
      }
    }, {
      key: "setupRandomisation",
      value: function setupRandomisation() {
        if (!this.get('_isRandom') || !this.get('_isEnabled')) {
          Adapt.log.error("matchingPlusModel: '_isRandom: false' setting is not fully implemented yet. Using it is not recommended.");
          return;
        }

        var children = this.getChildren();
        children.reset(children.shuffle(), {
          silent: true
        });
      }
    }, {
      key: "onItemOptionsSelectedChange",
      value: function onItemOptionsSelectedChange() {
        this.checkCanSubmit();
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        var incompleteItem = this.getChildren().find(function (itemModel) {
          return itemModel.get("_optionsSelected").length === 0;
        });
        return !Boolean(incompleteItem);
      }
    }, {
      key: "setUpItems",
      value: function setUpItems() {
        var _this = this;

        var items = this.get("_items");
        var globalOptions = this.get("_options");
        var isOptionsShared = true;
        var goOptionsCorrect = [];

        _.each(items, function (item, index) {
          item._index = index;
          item._optionsSelected = [];

          if (item._optionsCorrect) {
            if (item._optionsCorrect.length !== 1) {
              throw "(".concat(_this.get("_id"), ") adapt-matchingPlus: only 1 correct option per item is supported (you had: \" + ").concat(item._optionsCorrect.length, " + \").");
            }

            if (item._options === undefined) {
              goOptionsCorrect = goOptionsCorrect.concat(item._optionsCorrect);
              item._options = [];

              _.each(globalOptions, function (go, goIndex) {
                item._options.push({
                  text: go,
                  _index: goIndex
                });
              });
            } else {
              isOptionsShared = false;
            }
          }

          _this.setChildren(new Backbone.Collection(items, {
            model: Backbone.Model
          }));
        });

        if (this.get("_hasSharedUniqueOptions") === undefined) {
          if (isOptionsShared && globalOptions.length == _.uniq(globalOptions).length && goOptionsCorrect.length == _.uniq(goOptionsCorrect).length) {
            this.set("_hasSharedUniqueOptions", true);
          }
        }
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        var _this2 = this;

        var hasSharedUniqueOptions = this.get("_hasSharedUniqueOptions");
        var props = {
          _numberOfIncorrectAnswers: 0,
          _numberOfCorrectAnswers: 0,
          _isAtLeastOneIncorrectSelection: false
        };
        this.getChildren().each(function (itemModel) {
          var options = itemModel.get("_options");
          var optionsSelected = itemModel.get("_optionsSelected");
          var optionsCorrect = itemModel.get("_optionsCorrect");
          var isItemCorrect = true;

          _.each(optionsSelected, function (selectedIdx) {
            var isCorrect = _.includes(optionsCorrect, selectedIdx);

            var option = _.find(options, function (o) {
              return o._index == selectedIdx;
            });

            option._isCorrect = isCorrect;
            option._isIncorrect = !isCorrect;
            option._isVisited = true;
            if (!isCorrect) isItemCorrect = false;

            if (isCorrect && hasSharedUniqueOptions) {
              _this2.getChildren().each(function (otherItem) {
                if (otherItem == itemModel) return;
                var otherOptions = otherItem.get("_options");

                var otherOption = _.find(otherOptions, function (o) {
                  return o._index == selectedIdx;
                });

                otherOption._isEliminated = true;
                otherOption._isIncorrect = true;
              });
            }
          });

          itemModel.set('_isCorrect', isItemCorrect);
          itemModel.set('_isIncorrect', !isItemCorrect);
          itemModel.set('_isDisabled', isItemCorrect);

          if (!isItemCorrect) {
            props._numberOfIncorrectAnswers++;
            props._isAtLeastOneIncorrectSelection = true;
            return;
          }

          props._numberOfCorrectAnswers++;
        });
        this.set(props);
        var hasRightNumberOfCorrectAnswers = props._numberOfCorrectAnswers === this.getChildren().length;
        var hasNoIncorrectAnswers = !props._isAtLeastOneIncorrectSelection;
        return hasRightNumberOfCorrectAnswers && hasNoIncorrectAnswers;
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var items = this.getChildren();
        var userAnswer = new Array(items.length);
        var tempUserAnswer = new Array(items.length);
        items.forEach(function (itemModel) {
          var optionIndex = itemModel.get("_optionsSelected")[0];
          tempUserAnswer[itemModel.get("_index")] = optionIndex;
          userAnswer[itemModel.get("_index")] = optionIndex;
        }, this);
        this.set({
          _userAnswer: userAnswer,
          _tempUserAnswer: tempUserAnswer
        });
      }
    }, {
      key: "setScore",
      value: function setScore() {
        var questionWeight = this.get('_questionWeight');

        if (this.get('_isCorrect')) {
          this.set('_score', questionWeight);
          return;
        }

        var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
        var itemLength = this.getChildren().length;
        var score = questionWeight * numberOfCorrectAnswers / itemLength;
        this.set('_score', score);
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_numberOfCorrectAnswers') > 0;
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set('_userAnswer', []);
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        var responses = [];
        this.get('_userAnswer').forEach(function (userAnswer, index) {
          responses.push(index + 1 + '.' + (userAnswer + 1));
        });
        return responses.join('#');
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return 'matching';
      }
    }]);

    return MatchingPlusModel;
  }(QuestionModel$1);

  var MatchingPlusModel$1 = __AMD("components/adapt-matchingPlus/js/matchingPlusModel", MatchingPlusModel);

  var CLICK_ANYWHERE_EVENTS$1 = "click touch mouseup touchend";

  var MatchingPlusDropdownView = function (_Backbone$View) {
    _inherits(MatchingPlusDropdownView, _Backbone$View);

    var _super = _createSuper(MatchingPlusDropdownView);

    function MatchingPlusDropdownView() {
      _classCallCheck(this, MatchingPlusDropdownView);

      return _super.apply(this, arguments);
    }

    _createClass(MatchingPlusDropdownView, [{
      key: "events",
      value: function events() {
        return {
          "click .js-matchingplus-dropdown-trigger": "onTriggerClick",
          "click .js-matchingplus-dropdown-option": "onOptionClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpEventListeners();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model, "change:_isActive", this.onActiveChange);
        this.listenTo(this.model, "change:_optionsSelected", this.onOptionsSelectedChange);
        this.listenTo(this.model, "change:_isDisabled", this.onDisabledChange);
      }
    }, {
      key: "toggleDropdown",
      value: function toggleDropdown(isActive) {
        if (isActive === undefined) isActive = !this.model.get("_isActive");
        this.model.set("_isActive", isActive);
        var $item = this.$el.closest(".js-matchingplus-item");
        $item.toggleClass("is-active", isActive);
        this.$el.toggleClass("is-active", isActive);

        if (isActive) {
          this.onClickAnywhereEvent = this.onClickAnywhere.bind(this);
          $(document).on(CLICK_ANYWHERE_EVENTS$1, this.onClickAnywhereEvent);
        } else {
          $(document).off(CLICK_ANYWHERE_EVENTS$1, this.onClickAnywhereEvent);
        }
      }
    }, {
      key: "onDisabledChange",
      value: function onDisabledChange(model, isDisabled) {
        this.$el.toggleClass("is-disabled", isDisabled);
      }
    }, {
      key: "onActiveChange",
      value: function onActiveChange(model, isActive) {
        this.toggleDropdown(isActive);
      }
    }, {
      key: "onTriggerClick",
      value: function onTriggerClick(event) {
        if (this.model.get("_isDisabled")) return;
        this.model.set("_isActive", !this.model.get("_isActive"));
      }
    }, {
      key: "onOptionClick",
      value: function onOptionClick(event) {
        if (this.model.get("_isDisabled")) return;
        var $option = $(event.currentTarget);
        var val = $option.data("value");
        this.model.set("_optionsSelected", [parseInt(val, 10)]);
        this.model.set("_isActive", false);
      }
    }, {
      key: "updateMarking",
      value: function updateMarking() {
        var _this = this;

        var optionsSelected = this.model.get("_optionsSelected");
        var anyIncorrect = false;

        _.each(optionsSelected, function (optionIdx) {
          var $option = _this.$(".js-matchingplus-dropdown-option").filter("[data-value='" + optionIdx + "']");

          var option = _this.model.get("_options").find(function (o) {
            return o._index == optionIdx;
          });

          $option.addClass("is-visited").toggleClass("is-correct", option._isCorrect).toggleClass("is-incorrect", option._isIncorrect);
          if (option._isIncorrect) anyIncorrect = true;
        });

        _.each(this.model.get("_options"), function (option) {
          if (!option._isEliminated) return;

          var $option = _this.$(".js-matchingplus-dropdown-option").filter("[data-value='" + option._index + "']");

          $option.addClass("is-eliminated");
        });

        this.$el.toggleClass("is-incorrect", anyIncorrect).toggleClass("is-correct", !anyIncorrect);
        this.$el.toggleClass("is-disabled", !anyIncorrect);
      }
    }, {
      key: "onOptionsSelectedChange",
      value: function onOptionsSelectedChange(model, optionsSelected) {
        var _this2 = this;

        var $options = this.$(".js-matchingplus-dropdown-option");
        $options.removeClass("is-selected");
        var triggerText = [];
        var triggerIncorrect = false;

        _.each(optionsSelected, function (optionIdx) {
          var $option = _this2.$(".js-matchingplus-dropdown-option").filter("[data-value='" + optionIdx + "']");

          $option.addClass("is-selected");

          var option = _this2.model.get("_options").find(function (o) {
            return o._index == optionIdx;
          });

          triggerText.push(option.text);

          if (option._isIncorrect || option._isEliminated) {
            triggerIncorrect = true;
          }
        });

        var $trigger = this.$(".js-matchingplus-dropdown-trigger");
        $trigger.addClass("is-visited");
        var $triggerText = this.$(".js-matchingplus-dropdown-trigger-text");
        $triggerText.html(triggerText.join(', '));
        this.$el.toggleClass("is-incorrect", triggerIncorrect);
        this.model.set("_isActive", false);
      }
    }, {
      key: "onClickAnywhere",
      value: function onClickAnywhere(event) {
        if (event.target == this.el || $.contains(this.el, event.target)) return;
        this.model.set("_isActive", false);
      }
    }]);

    return MatchingPlusDropdownView;
  }(Backbone.View);

  var MatchingPlusDropdownView$1 = __AMD("components/adapt-matchingPlus/js/matchingPlusDropdownView", MatchingPlusDropdownView);

  var MIN_OPTION_LENGTH = 12;

  var MatchingPlusView = function (_QuestionView) {
    _inherits(MatchingPlusView, _QuestionView);

    var _super = _createSuper(MatchingPlusView);

    function MatchingPlusView() {
      _classCallCheck(this, MatchingPlusView);

      return _super.apply(this, arguments);
    }

    _createClass(MatchingPlusView, [{
      key: "events",
      value: function events() {
        return {
          "change .js-matchingplus-select": "onSelectChange"
        };
      }
    }, {
      key: "postRender",
      value: function postRender() {
        var _this = this;

        _get(_getPrototypeOf(MatchingPlusView.prototype), "postRender", this).call(this);

        this.$el.closest(".block").addClass("has-matchingplus");
        this.dropdownViews = [];
        this.model.getChildren().each(function (itemModel) {
          _this.dropdownViews.push(new MatchingPlusDropdownView$1({
            model: itemModel,
            el: _this.getItemEl(itemModel).find(".js-matchingplus-dropdown")[0]
          }));
        });
        this.setUpEventListeners();
        var optionLength = 0;

        _.each(this.model.get("_options"), function (option) {
          optionLength = Math.max(option.length, optionLength);
        });

        optionLength = Math.max(Math.round(optionLength * 0.7), MIN_OPTION_LENGTH);
        this.$(".matchingplus__item-select").css("width", optionLength + "em");
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model.getChildren(), {
          "change:_optionsSelected": this.onItemOptionsSelectedChange,
          "change:_isDisabled": this.onItemDisabledChange
        });
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setReadyStatus();
        this.update();
      }
    }, {
      key: "getItemByIndex",
      value: function getItemByIndex(index) {
        return this.model.getChildren().find(function (item) {
          return item.get("_index") === index;
        });
      }
    }, {
      key: "getItemEl",
      value: function getItemEl(itemModel) {
        return this.$(".js-matchingplus-item").filter("[data-adapt-index=" + itemModel.get("_index") + "]");
      }
    }, {
      key: "update",
      value: function update() {
        this.updateMarking();
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        this.updateMarking();
      }
    }, {
      key: "updateMarking",
      value: function updateMarking() {
        var _this2 = this;

        _.each(this.dropdownViews, function (dropdownView) {
          dropdownView.updateMarking();
        });

        this.model.getChildren().each(function (itemModel) {
          _this2.updateItemState(itemModel);
        });
      }
    }, {
      key: "updateItemState",
      value: function updateItemState(itemModel) {
        var $item = this.getItemEl(itemModel);
        var options = itemModel.get("_options");
        var optionsSelected = itemModel.get("_optionsSelected");
        var anyIncorrect = false;
        var anyCorrect = false;

        _.each(optionsSelected, function (optionIdx) {
          var option = _.find(options, function (o) {
            return o._index == optionIdx;
          });

          if (option._isIncorrect) anyIncorrect = true;
          if (option._isCorrect) anyCorrect = true;

          if (option._isVisited) {
            var $option = $item.find(".js-matchingplus-option[data-value='" + optionIdx + "']");
            $option.toggleClass("is-visited", option._isVisited).toggleClass("is-correct", option._isCorrect).toggleClass("is-incorrect", option._isIncorrect);
          }
        });

        _.each(options, function (option) {
          if (!option._isEliminated) return;
          var $option = $item.find(".js-matchingplus-option[data-value='" + option._index + "']");
          $option.toggleClass("is-eliminated", option._isEliminated);
        });

        $item.toggleClass("is-incorrect", anyIncorrect).toggleClass("is-correct", !anyIncorrect && anyCorrect);
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.model.setupRandomisation();
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        return;
      }
    }, {
      key: "onItemOptionsSelectedChange",
      value: function onItemOptionsSelectedChange(itemModel, optionsSelected) {
        if (!optionsSelected.length) return;
        if (optionsSelected.length > 1) throw "matchingPlusView: multiple _optionsSelected values not supported at this time.";
        var optionIdx = optionsSelected[0];
        var $select = this.getItemEl(itemModel).find(".js-matchingplus-select");
        $select.addClass("is-visited");
        $select[0].value = optionIdx;
        this.updateItemState(itemModel);
      }
    }, {
      key: "onItemDisabledChange",
      value: function onItemDisabledChange(itemModel, isDisabled) {
        var $select = this.getItemEl(itemModel).find(".js-matchingplus-select");
        $select.toggleClass("is-disabled", isDisabled);
        if (isDisabled) $select.attr("disabled", "");else $select.removeAttr("disabled");
      }
    }, {
      key: "onSelectChange",
      value: function onSelectChange(event) {
        var itemIdx = $(event.currentTarget).data("adapt-index");
        var itemModel = this.getItemByIndex(itemIdx);
        var val = $(event.currentTarget).val();

        if (!val && val !== 0) {
          var lastVal = itemModel.get("_optionsSelected");

          if (lastVal) {
            $(event.currentTarget).val(lastVal);
          }

          return;
        }

        itemModel.set("_optionsSelected", [parseInt($(event.currentTarget).val(), 10)]);
      }
    }]);

    return MatchingPlusView;
  }(QuestionView$1);

  MatchingPlusView.template = "matchingPlus";
  var MatchingPlusView$1 = __AMD("components/adapt-matchingPlus/js/matchingPlusView", MatchingPlusView);

  __AMD("components/adapt-matchingPlus/js/adapt-matchingPlus", Adapt.register('matchingplus', {
    view: MatchingPlusView$1,
    model: MatchingPlusModel$1
  }));

  var MCQCodeView = function (_MCQ$view) {
    _inherits(MCQCodeView, _MCQ$view);

    var _super = _createSuper(MCQCodeView);

    function MCQCodeView() {
      _classCallCheck(this, MCQCodeView);

      return _super.apply(this, arguments);
    }

    _createClass(MCQCodeView, [{
      key: "events",
      value: function events() {
        return {
          'focus .js-item-input': 'onItemFocus',
          'blur .js-item-input': 'onItemBlur',
          'change .js-item-input': 'onItemSelect',
          'keyup .js-item-input': 'onKeyPress'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        _get(_getPrototypeOf(MCQCodeView.prototype), "initialize", this).call(this);

        this.setUpEventListeners();
      }
    }, {
      key: "render",
      value: function render() {
        _get(_getPrototypeOf(MCQCodeView.prototype), "render", this).call(this);
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        if (_get(_getPrototypeOf(MCQCodeView.prototype), "setUpEventListeners", this)) {
          _get(_getPrototypeOf(MCQCodeView.prototype), "setUpEventListeners", this).call(this);
        }

        this.listenTo(this.model.getChildren(), "change:_isCorrect", this.onItemCorrectChange);
      }
    }, {
      key: "onItemCorrectChange",
      value: function onItemCorrectChange(itemModel, isCorrect) {
        var _this = this;

        if (!isCorrect) return;
        var $item = this.getItemElement(itemModel);
        this.listenToOnce(Adapt, "notify:closed", function () {
          _.debounce(function () {
            var data = itemModel.toJSON();
            data.view = _this;
            var template = Handlebars.templates['mcqCodeFeedback'];
            var feedbackHTML = Handlebars.compile(template(data));
            $item.find(".js-item-codebox").addClass("mcqcode__codebox-incorrect");
            var annotationHTML = Handlebars.compile('{{#annotation tooltip="' + data._feedback.body + '" hasIcon="true"}}{{/annotation}}')(data);
            $item.find(".js-item-content-inner").append(annotationHTML);
            $item.find(".js-item-content-feedback").html(feedbackHTML).hide(0).slideDown();
          }, 500)();
        });
      }
    }, {
      key: "getItemElement",
      value: function getItemElement(model) {
        var index = model.get('_index');
        return this.$('.js-mcqcode-item').filter('[data-adapt-index="' + index + '"]');
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(model, _isActive) {
        this.getItemElement(model).toggleClass('is-active', _isActive).find(".js-item-label").toggleClass("is-selected", _isActive);
        this.updateContainer();
      }
    }]);

    return MCQCodeView;
  }(MCQ.view);

  MCQCodeView.template = "mcqCode";
  var MCQCodeView$1 = __AMD("components/adapt-mcqCode/js/mcqCodeView", MCQCodeView);

  var MCQCodeModel = function (_ItemsQuestionModel) {
    _inherits(MCQCodeModel, _ItemsQuestionModel);

    var _super = _createSuper(MCQCodeModel);

    function MCQCodeModel() {
      _classCallCheck(this, MCQCodeModel);

      return _super.apply(this, arguments);
    }

    _createClass(MCQCodeModel, [{
      key: "initialize",
      value: function initialize() {
        this.preSetUpItems();

        _get(_getPrototypeOf(MCQCodeModel.prototype), "initialize", this).call(this);
      }
    }, {
      key: "preSetUpItems",
      value: function preSetUpItems() {
        var code = this.get("_code");
        var lines = Adapt.codeBox.getLines(code);
        var items = this.get("_items");

        var _items = new Array(lines.length);

        _.each(lines, function (line, i) {
          var item = _.find(items, function (item) {
            return item._lineNum == i + 1;
          });

          if (!item) item = {
            _shouldBeSelected: false
          };else item._shouldBeSelected = true;
          item.text = line;
          _items[i] = item;
        });

        this.set("_items", _items);
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        var props = {
          _numberOfIncorrectAnswers: 0,
          _numberOfCorrectAnswers: 0,
          _numberOfRequiredAnswers: 0,
          _isAtLeastOneIncorrectSelection: false
        };
        this.getChildren().each(function (itemModel) {
          var shouldBeSelected = Boolean(itemModel.get('_shouldBeSelected'));
          var isActive = Boolean(itemModel.get("_isActive"));

          if (isActive) {
            itemModel.set('_isCorrect', shouldBeSelected == isActive);
          }

          if (shouldBeSelected) {
            props._numberOfRequiredAnswers++;
          }

          if (!isActive) return;

          if (!shouldBeSelected) {
            props._numberOfIncorrectAnswers++;
            props._isAtLeastOneIncorrectSelection = true;
            return;
          }

          props._numberOfCorrectAnswers++;
        });
        this.set(props);
        var hasRightNumberOfCorrectAnswers = props._numberOfCorrectAnswers === props._numberOfRequiredAnswers;
        var hasNoIncorrectAnswers = !props._isAtLeastOneIncorrectSelection;
        return hasRightNumberOfCorrectAnswers && hasNoIncorrectAnswers;
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return !this.get('_isAtLeastOneIncorrectSelection');
      }
    }]);

    return MCQCodeModel;
  }(ItemsQuestionModel);

  var MCQCodeModel$1 = __AMD("components/adapt-mcqCode/js/mcqCodeModel", MCQCodeModel);

  __AMD("components/adapt-mcqCode/js/adapt-mcqCode", Adapt.register("mcqcode", {
    view: MCQCodeView$1,
    model: MCQCodeModel$1
  }));

  function _stringToSeconds(str) {
    var a = str.split(":");
    var l = a.length;
    if (l == 0 || a > 3) throw "adapt-mediaPlus: Invalid time string value: " + str;
    var seconds = parseInt(a[l - 1], 10);
    if (l > 1) seconds += parseInt(a[l - 2], 10) * 60;
    if (l > 2) seconds += parseInt(a[l - 3], 10) * 60 * 60;
    return seconds;
  }

  var MediaPlusModel = function (_Media$model) {
    _inherits(MediaPlusModel, _Media$model);

    var _super = _createSuper(MediaPlusModel);

    function MediaPlusModel() {
      _classCallCheck(this, MediaPlusModel);

      return _super.apply(this, arguments);
    }

    _createClass(MediaPlusModel, [{
      key: "initialize",
      value: function initialize() {
        var _get2;

        this.setUpModelData();

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(MediaPlusModel.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        this.setUpDefaultData();
        var chapters = this.get("_chapters");

        if (chapters !== null && chapters !== void 0 && chapters._isEnabled) {
          _.each(chapters._items, function (_items) {
            _items._time = _stringToSeconds(_items.time);
          });
        }
      }
    }, {
      key: "setUpDefaultData",
      value: function setUpDefaultData() {
        var defaults = {};
        defaults = {
          _allowFullScreen: true,
          _setCompletionOn: "play",
          _showVolumeControl: true,
          _pauseWhenOffScreen: false
        };
        defaults._transcript = _.extend({
          _inlineTranscript: true,
          _externalTranscript: false,
          inlineTranscriptButton: "Transcript",
          inlineTranscriptCloseButton: "Close Transcript",
          transcriptLinkButton: "Transcript",
          transcriptLink: ""
        }, this.get("_transcript"));
        defaults._playerOptions = _.extend({
          alwaysShowControls: true,
          toggleCaptionsButtonWhenOnlyOne: true,
          iPadUseNativeControls: true,
          iPhoneUseNativeControls: true,
          AndroidUseNativeControls: true,
          enableProgressTooltip: false
        }, this.get("_playerOptions"));
        this.set(defaults);
      }
    }]);

    return MediaPlusModel;
  }(Media.model);

  var MediaPlusView = function (_Media$view) {
    _inherits(MediaPlusView, _Media$view);

    var _super2 = _createSuper(MediaPlusView);

    function MediaPlusView() {
      _classCallCheck(this, MediaPlusView);

      return _super2.apply(this, arguments);
    }

    _createClass(MediaPlusView, [{
      key: "events",
      value: function events() {
        return _.extend({}, _get(_getPrototypeOf(MediaPlusView.prototype), "events", this), {
          "click .js-mediaplus-chapter-item-time": "onChapterItemClick"
        });
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get3;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        (_get3 = _get(_getPrototypeOf(MediaPlusView.prototype), "initialize", this)).call.apply(_get3, [this].concat(args));
      }
    }, {
      key: "onPlayerReady",
      value: function onPlayerReady() {
        var _get4,
            _this = this;

        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        (_get4 = _get(_getPrototypeOf(MediaPlusView.prototype), "onPlayerReady", this)).call.apply(_get4, [this].concat(args));

        this.$(".mejs-time-float").addClass("u-display-none");
        this.renderChaptersTimeFloat();
        this.renderChaptersMenu();
        this.mediaElement.addEventListener('loadedmetadata', function () {
          _this.$(".mejs-time-float").removeClass("u-display-none");

          _this.renderChaptersDividers();
        });
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        var _get5, _this$model$get;

        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        (_get5 = _get(_getPrototypeOf(MediaPlusView.prototype), "setupEventListeners", this)).call.apply(_get5, [this].concat(args));

        if (!this.mediaElement.player) return;
        if (!((_this$model$get = this.model.get("_chapters")) !== null && _this$model$get !== void 0 && _this$model$get._isEnabled)) return;
        this.listenTo(this.model, "change:_timeFloatTime", this.onTimeFloatTimeChange);
        this.setUpTimeFloat();
      }
    }, {
      key: "onTimeFloatTimeChange",
      value: function onTimeFloatTimeChange(model, time) {
        var title = "";

        _.find(this.model.get("_chapters")._items, function (item) {
          if (item._time <= time) {
            title = item.title;
          } else return true;
        });

        this.$(".mejs-time-float-title").text(title);
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        throw "adapt-mediaPlus: Recent Adapt update has changed \"setupEventListeners\" to \"setUpEventListeners\". Please update the script to use the right capitalization.";
      }
    }, {
      key: "setUpTimeFloat",
      value: function setUpTimeFloat() {
        var _this2 = this;

        var $timeFloat = this.$(".mejs-time-float");
        var $timeFloatCur = $timeFloat.find(".mejs-time-float-current");
        var observer = new MutationObserver(function (event) {
          _this2.model.set("_timeFloatTime", _stringToSeconds($timeFloatCur.text()));
        });
        observer.observe($timeFloatCur[0], {
          childList: true
        });
      }
    }, {
      key: "renderChaptersDividers",
      value: function renderChaptersDividers() {
        var chapters = this.model.get("_chapters");
        if (!chapters) return;
        var $rail = this.$(".mejs-time-rail");
        var duration = this.mediaElement.duration;

        _.each(chapters._items, function (item, i) {
          if (i == 0) return;
          var $divider = $("<div>", {
            class: "mejs-time-rail-divider"
          });
          $divider.css("left", item._time / duration * 100 + "%");
          $rail.append($divider);
        });
      }
    }, {
      key: "renderChaptersTimeFloat",
      value: function renderChaptersTimeFloat() {
        this.$(".mejs-time-float").prepend($("<span>", {
          class: "mejs-time-float-title"
        }));
      }
    }, {
      key: "renderChaptersMenu",
      value: function renderChaptersMenu() {
        var _this$model$get2;

        if (!((_this$model$get2 = this.model.get("_chapters")) !== null && _this$model$get2 !== void 0 && _this$model$get2._isEnabled)) return;
        var data = this.model.toJSON();
        var template = Handlebars.templates['mediaPlusChapters'];
        this.$(".component__widget").append(template(data));
      }
    }, {
      key: "onChapterItemClick",
      value: function onChapterItemClick(event) {
        var time = $(event.target).data("time");
        this.mediaElement.play();
        this.mediaElement.setCurrentTime(time);
      }
    }]);

    return MediaPlusView;
  }(Media.view);
  __AMD("components/adapt-mediaPlus/js/adapt-mediaPlus", Adapt.register('mediaplus', {
    model: MediaPlusModel,
    view: MediaPlusView
  }));

  var MmcqView = QuestionView$1.extend({
    events: {
      'focus .js-item-input': 'onItemFocus',
      'blur .js-item-input': 'onItemBlur',
      'change .js-item-input': 'onItemSelect',
      'keyup .js-item-input': 'onKeyPress'
    },
    isCorrectAnswerShown: false,
    initialize: function () {
      QuestionView$1.prototype.initialize.apply(this, arguments);
      this.update = _.debounce(this.update.bind(this), 1);
      this.listenTo(this.model, {
        "change:_isEnabled change:_isComplete change:_isSubmitted": this.update
      });
      this.listenTo(this.model, {
        "_change:_optionsSelected": this.update
      });
      this.listenTo(Adapt, "device:changed", this.onDeviceChange);
    },
    resetQuestionOnRevisit: function () {
      this.resetQuestion();
    },
    setupQuestion: function () {
      this.model.setupRandomisation();
    },
    postRender: function () {
      QuestionView$1.prototype.postRender.apply(this, arguments);
      this.onDeviceChange();
      this.updateMarking();
    },
    onDeviceChange: function () {
      this.resizeHeaderLabels();
    },
    resizeHeaderLabels: function () {
      if (!this.model.get("_combineOptions")) return;
      var $labelsInner = this.$(".mmcq__items-header-label-inner");
      var minWidth = this.$(".mmcq__item-icon").first().outerWidth() + 1;
      var maxWidth = 0;
      $labelsInner.each(function (i, e) {
        maxWidth = Math.max($(e).width(), maxWidth);
      });
      if (maxWidth < minWidth) maxWidth = minWidth;
      this.$(".mmcq__items-header-label").width(maxWidth);
    },
    onQuestionRendered: function () {
      this.setReadyStatus();
      this.update();
    },
    onKeyPress: function (event) {
      if (event.which !== 13) return;
      this.onItemSelect(event);
    },
    onItemFocus: function (event) {
      if (!this.model.isInteractive()) return;
      $('.js-item-label[for=' + $(event.currentTarget).attr('id') + ']').addClass('is-highlighted');
    },
    onItemBlur: function (event) {
      $('.js-item-label[for=' + $(event.currentTarget).attr('id') + ']').removeClass('is-highlighted');
    },
    onItemSelect: function (event) {
      if (!this.model.isInteractive()) return;
      var index = $(event.currentTarget).data('adapt-index');
      var inputIndex = $(event.currentTarget).data('adapt-option-index');
      this.model.toggleOptionsSelected(index, inputIndex);
      return;
    },
    onCannotSubmit: function () {},
    showMarking: function () {
      this.update();
      this.updateMarking();
    },
    resetQuestion: function () {
      return;
    },
    showCorrectAnswer: function () {
      this.isCorrectAnswerShown = true;
      this.update();
    },
    hideCorrectAnswer: function () {
      this.isCorrectAnswerShown = false;
      this.update();
    },
    update: function (model) {
      this.updateSelection();
    },
    updateSelection: function () {
      var _this = this;

      _.each(this.model.get("_items"), function (item) {
        var itemIdx = item._index;
        var isEnabled = !Boolean(item._isCorrect);

        _.each(item._optionsSelected, function (option, optionIdx) {
          var isSelected = _this.isCorrectAnswerShown ? _.contains(item._optionsCorrect, optionIdx) : option;
          var filter = '[data-adapt-index="' + itemIdx + '"][data-adapt-option-index="' + optionIdx + '"]';

          _this.$('.js-item-label').filter(filter).toggleClass('is-selected', isSelected).toggleClass('is-disabled', !isEnabled).find(".mmcq__item-answer-icon").toggleClass('is-disabled', !isEnabled);

          _this.$('.js-item-input').filter(filter).prop('checked', isSelected).prop('disabled', !isEnabled);
        });
      });
    },
    updateMarking: function () {
      var _this2 = this;

      var canShowMarking = this.model.get('_canShowMarking');

      var ariaLabels = Adapt.course.get('_globals')._accessibility._ariaLabels;

      _.each(this.model.get("_items"), function (item) {
        var index = item._index;

        var $item = _this2.$('.js-mmcq-item').filter('[data-adapt-index="' + index + '"]');

        $item.toggleClass('is-correct', item._isCorrect).toggleClass('is-incorrect', !item._isCorrect);

        if (!canShowMarking) {
          $item.removeClass('is-correct').removeClass('is-incorrect');
        }

        _.each(item._optionsSelected, function (option, optionIdx) {
          var filter = '[data-adapt-index="' + index + '"][data-adapt-option-index="' + optionIdx + '"]';

          var $itemInput = _this2.$(".js-item-input").filter(filter);

          var $itemLabel = _this2.$(".js-item-label").filter(filter);

          var shouldBeSelected = Boolean(_.contains(item._optionsCorrect, optionIdx));
          var isCorrect = option == shouldBeSelected;
          var isSelected = option;

          var inputText = (_this2.model.get("_options") || item._options)[optionIdx];

          if (!item._optionsVisited[optionIdx]) {
            $itemInput.attr('aria-label', $.a11y_normalize(inputText));
          } else {
              $itemInput.attr('aria-label', [shouldBeSelected ? ariaLabels.correct : ariaLabels.incorrect, ", ", isSelected ? ariaLabels.selectedAnswer : ariaLabels.unselectedAnswer, ". ", $.a11y_normalize(inputText)].join(""));
            }

          if (!canShowMarking) {
            $itemInput.removeClass('is-correct is-incorrect');
            $itemLabel.removeClass('is-correct is-incorrect');
            return;
          }

          if (!isSelected) return;
          $itemInput.toggleClass("is-correct", isCorrect).toggleClass("is-incorrect", !isCorrect);
          $itemLabel.toggleClass("is-correct", isCorrect).toggleClass("is-incorrect", !isCorrect);
        });
      });

      this.updateSelection();
    }
  });
  var MmcqView$1 = __AMD("components/adapt-mmcq/js/mmcqView", MmcqView);

  var MmcqModel = QuestionModel$1.extend({
    init: function () {
      QuestionModel$1.prototype.init.call(this);
      this.setupQuestionItemIndexes();
      this.checkCanSubmit();
    },
    getHasUniqueOptions: function () {
      return this.get("_combineOptions") === false || this.get("_hasInlineButtons");
    },
    setupQuestionItemIndexes: function () {
      var hasUniqueOptions = this.getHasUniqueOptions();
      this.set("_combineOptions", !hasUniqueOptions);

      var _options = this.get("_options");

      this.get('_items').forEach(function (item, index) {
        if (item._index === undefined) {
          var itemOptions = [];

          try {
            _.each(hasUniqueOptions ? item._options || _options : _options, function (optionText, optionIndex) {
              itemOptions.push({
                text: optionText,
                _index: optionIndex
              });
            });
          } catch (err) {
            if (hasUniqueOptions) {
              throw "\"mmcq\" component: if \"_combineOptions\": false, then each \"_items\" element must define its own \"_options\" array.";
            } else {
              throw "\"mmcq\" component: if \"_combineOptions\": true, then the root of the component's JSON must define an \"_options\" array.";
            }
          }

          var optionsCount = itemOptions.length;
          item._index = index;
          item._options = itemOptions;
          item._optionsSelected = new Array(optionsCount);
          item._optionsVisited = new Array(optionsCount);

          try {
            item._optionsSelected.fill(false);

            item._optionsVisited.fill(false);
          } catch (err) {}
        }
      });
    },
    setupRandomisation: function () {
      if (!this.get('_isRandom') || !this.get('_isEnabled')) return;

      if (this.getHasUniqueOptions()) {
        this.get('_items').forEach(function (item, index) {
          item._options = _.shuffle(item._options);
        });
        return;
      }

      this.set('_items', _.shuffle(this.get('_items')));
    },
    canSubmit: function () {
      var canSubmit = _.every(this.get('_items'), function (item) {
        return _.find(item._optionsSelected, function (e) {
          return Boolean(e);
        }) !== undefined;
      });

      return canSubmit;
    },
    toggleOptionsSelected: function (itemIndex, optionIndex, _isSelected) {
      if (optionIndex === undefined) throw "\"optionIndex\" cannot be undefined.";
      var isRadio = this.get("_isRadio");

      var item = _.find(this.get('_items'), function (item) {
        return item._index === itemIndex;
      });

      if (!isRadio) {
        item._optionsSelected[optionIndex] = _isSelected === undefined ? !Boolean(item._optionsSelected[optionIndex]) : Boolean(_isSelected);
      } else {
        item._optionsSelected = _.map(item._optionsSelected, function (option, _optionIndex) {
          if (optionIndex != _optionIndex) return false;else return _isSelected === undefined ? !Boolean(option) : Boolean(_isSelected);
        });
      }

      this.trigger("_change:_optionsSelected");
      this.checkCanSubmit();
    },
    isCorrect: function () {
      var numberOfCorrectAnswers = 0;
      this.get('_items').forEach(function (item, index) {
        var isCorrect = true;

        _.find(item._optionsSelected, function (option, optionIdx) {
          var shouldBeSelected = Boolean(_.contains(item._optionsCorrect, optionIdx));

          if (option != shouldBeSelected) {
            isCorrect = false;
            return true;
          }
        });

        _.each(item._optionsSelected, function (optionSelected, optionIdx) {
          if (optionSelected) {
            item._optionsVisited[optionIdx] = true;
          }
        });

        if (!isCorrect) {
          item._isCorrect = false;
          return;
        }

        numberOfCorrectAnswers++;
        item._isCorrect = true;
        this.set({
          '_numberOfCorrectAnswers': numberOfCorrectAnswers,
          '_isAtLeastOneCorrectSelection': true
        });
      }, this);
      this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);

      if (numberOfCorrectAnswers === this.get('_items').length) {
        return true;
      }

      return false;
    },
    setScore: function () {
      var questionWeight = this.get('_questionWeight');

      if (this.get('_isCorrect')) {
        this.set('_score', questionWeight);
        return;
      }

      var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
      var itemLength = this.get('_items').length;
      var score = questionWeight * numberOfCorrectAnswers / itemLength;
      this.set('_score', score);
    },
    isPartlyCorrect: function () {
      return this.get('_isAtLeastOneCorrectSelection');
    },
    restoreUserAnswers: function () {
      if (!this.get('_isSubmitted')) return;
      var userAnswer = this.get('_userAnswer');
      var items = this.get("_items");

      _.each(userAnswer, function (e, itemIdx) {
        items[itemIdx]._optionsSelected = _.toArray(e);
      });

      this.trigger("_change:_optionsSelected");
      this.setQuestionAsSubmitted();
      this.markQuestion();
      this.setScore();
      this.setupFeedback();
    },
    storeUserAnswer: function () {
      var userAnswer = new Array(this.get('_items').length);
      this.get('_items').forEach(function (item, index) {
        userAnswer[item._index] = _.toArray(item._optionsSelected);
      }, this);
      this.set({
        '_userAnswer': userAnswer
      });
    },
    resetUserAnswer: function () {
      this.set('_userAnswer', []);

      _.each(this.get("_items"), function (item) {
        item._isCorrect = false;

        item._optionsSelected.fill(false);
      });
    },
    getResponse: function () {
      var resp = [];

      _.each(this.get("_items"), function (item) {
        resp.push(item._optionsSelected.join('.'));
      });

      return resp.join('[,]');
    },
    getResponseType: function () {
      return "fill-in";
    }
  });
  var MmcqModel$1 = __AMD("components/adapt-mmcq/js/mmcqModel", MmcqModel);

  __AMD("components/adapt-mmcq/js/adapt-mmcq", Adapt.register("mmcq", {
    view: MmcqView$1,
    model: MmcqModel$1
  }));

  var MODE$1 = __AMD("components/adapt-narrativePlus/js/modeEnum", new ENUM(['SMALL', 'LARGE']));

  var NarrativePlusView = function (_ComponentView) {
    _inherits(NarrativePlusView, _ComponentView);

    var _super = _createSuper(NarrativePlusView);

    function NarrativePlusView() {
      _classCallCheck(this, NarrativePlusView);

      return _super.apply(this, arguments);
    }

    _createClass(NarrativePlusView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-narrativeplus-controls-click': 'onNavigationClicked',
          'click .js-narrativeplus-progress-click': 'onProgressClicked',
          'swiperight .narrativeplus__widget': "onSwipeRight",
          'swipeleft .narrativeplus__widget': "onSwipeLeft"
        };
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        if (this.model.get('_setCompletionOn') === 'inview') {
          this.setupInviewCompletion('.component__widget');
        }

        this.$(".component__widget");
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this._isUninteracted = true;
        this.setUpModelData();
        this.listenTo(Adapt, {
          'device:changed device:resize': this.reRender,
          'notify:closed': this.closeNotify
        });
        this.renderMode();
        this.listenTo(this.model.getChildren(), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
        this.checkIfResetOnRevisit();
        this.calculateWidths();
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        if (!Adapt.sizing) return;
        var globalSizing = this.model.get("_itemSizing");

        _.each(this.model.get("_items"), function (item) {
          var graphic = item._graphic;
          if (!graphic) return;
          var itemSizing = graphic._sizing || {};
          itemSizing = _.extend({}, globalSizing, itemSizing);
          item._graphic._sizing = itemSizing;
          item._graphic._sizing._classes = Adapt.sizing.getSizingClass(item._graphic._sizing);
          item._graphic._sizing._parClasses = Adapt.sizing.getParentClasses(item._graphic._sizing);
        });
      }
    }, {
      key: "renderMode",
      value: function renderMode() {
        this.calculateMode();

        if (this.isLargeMode()) {
          this.$el.addClass('mode-large').removeClass('mode-small');
        } else {
          this.$el.addClass('mode-small').removeClass('mode-large');
        }
      }
    }, {
      key: "calculateMode",
      value: function calculateMode() {
        var mode = Adapt.device.screenSize === 'large' ? MODE$1.LARGE : MODE$1.LARGE;
        this.model.set('_mode', mode);
      }
    }, {
      key: "isLargeMode",
      value: function isLargeMode() {
        return this.model.get('_mode') === MODE$1.LARGE;
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(item, _isActive) {
        if (_isActive === true) {
          this.setStage(item);
        }
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(item, isVisited) {
        if (!isVisited) return;
        this.$('[data-index="' + item.get('_index') + '"]').addClass('is-visited');
      }
    }, {
      key: "setupNarrative",
      value: function setupNarrative() {
        this.renderMode();
        var items = this.model.getChildren();
        if (!items || !items.length) return;
        var activeItem = this.model.getActiveItem();

        if (!activeItem) {
          activeItem = this.model.getItem(0);
          activeItem.toggleActive(true);
        } else {
          items.trigger('change:_isActive', activeItem, true);
        }

        this.calculateWidths();
        this.setupEventListeners();
      }
    }, {
      key: "setStage",
      value: function setStage(item) {
        var index = item.get('_index');

        if (this.isLargeMode()) {
          item.toggleVisited(true);
        }

        this.$('.narrativeplus__progress:visible').removeClass('is-selected').filter('[data-index="' + index + '"]').addClass('is-selected');
        var $items = this.$('.narrativeplus__slider-item');
        Adapt.a11y.toggleAccessible($items, false);
        Adapt.a11y.toggleAccessible($items.filter('[data-index="' + index + '"]'), true);
        this.evaluateNavigation();
        this.evaluateCompletion();
        this.moveSliderToIndex(index);
      }
    }, {
      key: "evaluateNavigation",
      value: function evaluateNavigation() {
        var active = this.model.getActiveItem();
        if (!active) return;
        var currentStage = active.get('_index');
        var itemCount = this.model.getChildren().length;
        var isAtStart = currentStage === 0;
        var isAtEnd = currentStage === itemCount - 1;
        this.$('.narrativeplus__controls-left').toggleClass('u-visibility-hidden', isAtStart);
        this.$('.narrativeplus__controls-right').toggleClass('u-visibility-hidden', isAtEnd);
      }
    }, {
      key: "evaluateCompletion",
      value: function evaluateCompletion() {
        if (this.model.areAllItemsCompleted()) {
          this.trigger('allItems');
        }
      }
    }, {
      key: "moveSliderToIndex",
      value: function moveSliderToIndex(itemIndex) {
        var _this = this;

        var $slider = this.$('.narrativeplus__slider');
        $slider.hide(0).show(0);
        var offset = this.model.get('_itemWidth') * itemIndex;

        if (Adapt.config.get('_defaultDirection') === 'ltr') {
          offset *= -1;
        }

        var cssValue = 'translateX(' + offset + '%)';

        if (this._debounceTransitionEnd) {
          this._debounceTransitionEnd.cancel();

          this.onTransitionEnd();
        }

        this._debounceTransitionEnd = _.debounce(function () {
          $slider.css('transform', cssValue);

          if (Adapt.config.get('_disableAnimation') || _this._isUninteracted) {
            _this.onTransitionEnd();
          } else {
            $slider.one('transitionend', _this.onTransitionEnd.bind(_this));
          }

          _this._debounceTransitionEnd = null;
        }, 0);

        this._debounceTransitionEnd();
      }
    }, {
      key: "onTransitionEnd",
      value: function onTransitionEnd() {
        if (this._isUninteracted) return;
        var index = this.model.getActiveItem().get('_index');

        if (this.isLargeMode()) {
          Adapt.a11y.focusFirst(this.$('.narrativeplus__slider-item[data-index="' + index + '"]'), {
            defer: true
          });
        }
      }
    }, {
      key: "calculateWidths",
      value: function calculateWidths() {
        var itemCount = this.model.getChildren().length;
        this.model.set({
          '_totalWidth': 100 * itemCount,
          '_itemWidth': 100 / itemCount
        });
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.renderMode();
        this.setupNarrative();
        this.$('.narrativeplus__slider').imageready(this.setReadyStatus.bind(this));

        if (Adapt.config.get('_disableAnimation')) {
          this.$el.addClass('disable-animation');
        }
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }, {
      key: "scrollIntoView",
      value: function scrollIntoView() {
        var _this2 = this;

        _.debounce(function () {
          Adapt.navigateToElement(_this2.$(".narrativeplus__widget"), {
            duration: 400,
            align: "inview"
          });
        }, 0)();
      }
    }, {
      key: "onNavigationClicked",
      value: function onNavigationClicked(event) {
        this._isUninteracted = false;
        var stage = this.model.getActiveItem().get('_index');

        if ($(event.currentTarget).hasClass('narrativeplus__controls-right')) {
          this.model.setActiveItem(++stage);
        } else if ($(event.currentTarget).hasClass('narrativeplus__controls-left')) {
          this.model.setActiveItem(--stage);
        }

        this.scrollIntoView();
      }
    }, {
      key: "onProgressClicked",
      value: function onProgressClicked(event) {
        this._isUninteracted = false;
        event && event.preventDefault();
        var clickedIndex = $(event.target).data('index');
        if (clickedIndex == this.model.getActiveItem().get("_index")) return;
        this.model.setActiveItem(clickedIndex);
        this.scrollIntoView();
      }
    }, {
      key: "onSwipeRight",
      value: function onSwipeRight(event) {
        console.log("right");
      }
    }, {
      key: "onSwipeLeft",
      value: function onSwipeLeft(event) {
        console.log("left");
      }
    }]);

    return NarrativePlusView;
  }(ComponentView$1);

  NarrativePlusView.template = "narrativePlus";
  var NarrativePlusView$1 = __AMD("components/adapt-narrativePlus/js/narrativePlusView", NarrativePlusView);

  __AMD("components/adapt-narrativePlus/js/adapt-narrativePlus", Adapt.register('narrativeplus', {
    model: ItemsComponentModel,
    view: NarrativePlusView$1
  }));

  var JITTER_THRESHOLD = 1;
  var VIEWPORT_SCROLL_THRESHOLD = 0.175;
  var VIEWPORT_SCROLL_SPEED = 10;

  var ReorderView = function (_QuestionView) {
    _inherits(ReorderView, _QuestionView);

    var _super = _createSuper(ReorderView);

    function ReorderView() {
      _classCallCheck(this, ReorderView);

      return _super.apply(this, arguments);
    }

    _createClass(ReorderView, [{
      key: "events",
      value: function events() {
        return {
          "mousedown .js-reorder-item": "onItemMousedown",
          "touchstart .js-reorder-item": "onItemMousedown",
          "mouseup .js-reorder-item": "onItemMouseup",
          "touchend .js-reorder-item": "onItemMouseup"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.itemCount = this.model.getChildren().length;
        this.itemElementTopCache = new Array(this.itemCount);
        QuestionView$1.prototype.initialize.apply(this, arguments);
        this.update = _.debounce(this.update.bind(this), 1);
        this.listenTo(this.model, {
          "change:_isEnabled change:_isComplete change:_isSubmitted": this.update
        });
      }
    }, {
      key: "resetQuestionOnRevisit",
      value: function resetQuestionOnRevisit() {
        this.resetQuestion();
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.model.setupRandomisation();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        QuestionView$1.prototype.postRender.apply(this, arguments);
        this.renderItems();
        this.updateMarking();
        this.setUpEventListeners();
        this.setReadyStatus();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model.getChildren(), {
          "change:_isGrabbed": this.onItemGrabbedChange,
          "change:_userIndex": this.onItemUserIndexChange,
          "change:_isVisited": this.onItemVisitedChange,
          "change:_isCorrect": this.onItemCorrectChange,
          "change:_isLocked": this.onItemLockedChange,
          "change:_positionTop": this.onItemPositionTopChange
        });
      }
    }, {
      key: "onItemMousedown",
      value: function onItemMousedown(event) {
        var itemModel = this.getItemModel($(event.currentTarget));
        if (itemModel.get("_isLocked")) return;
        $(event.currentTarget).addClass("is-grabbed");
      }
    }, {
      key: "onItemMouseup",
      value: function onItemMouseup(event) {
        var itemModel = this.getItemModel($(event.currentTarget));
        if (itemModel.get("_isLocked") || itemModel.get("_isGrabbed")) return;
        $(event.currentTarget).removeClass("is-grabbed");
      }
    }, {
      key: "getItemModel",
      value: function getItemModel($itemElement) {
        var index = $itemElement.attr("data-adapt-index");
        return this.model.getChildren().find(function (itemModel) {
          return itemModel.get("_index") == index;
        });
      }
    }, {
      key: "getItemElement",
      value: function getItemElement(itemModel) {
        return this.$(".js-reorder-item").filter('[data-adapt-index=' + itemModel.get("_index") + ']');
      }
    }, {
      key: "onItemGrabbedChange",
      value: function onItemGrabbedChange(itemModel, isGrabbed) {
        var $item = this.getItemElement(itemModel);
        $item.toggleClass("is-grabbed", isGrabbed);
      }
    }, {
      key: "onItemVisitedChange",
      value: function onItemVisitedChange(itemModel, isVisited) {
        var $item = this.getItemElement(itemModel);
        $item.toggleClass("is-visited", isVisited);
      }
    }, {
      key: "onItemLockedChange",
      value: function onItemLockedChange(itemModel, isLocked) {
        var $item = this.getItemElement(itemModel);
        $item.toggleClass("is-disabled", isLocked);
        this.getItemElement(itemModel).draggable("option", "disabled", isLocked);
      }
    }, {
      key: "onItemCorrectChange",
      value: function onItemCorrectChange(itemModel, isCorrect) {
        var $item = this.getItemElement(itemModel);
        $item.toggleClass("is-correct", isCorrect === true).toggleClass("is-incorrect", isCorrect === false);
      }
    }, {
      key: "onItemUserIndexChange",
      value: function onItemUserIndexChange(itemModel, userIndex) {
        var $item = this.getItemElement(itemModel);
        $item.attr("data-adapt-user-index", userIndex);
      }
    }, {
      key: "onItemPositionTopChange",
      value: function onItemPositionTopChange(itemModel, positionTop) {
        if (itemModel.get("_isGrabbed")) return;
        var $item = this.getItemElement(itemModel);

        _.debounce(function () {
          var translate = positionTop - $item.position().top;
          translate = Math.abs(translate) < JITTER_THRESHOLD ? 0 : translate;

          if (translate) {
            $item.find(".js-reorder-item-transform").css("transform", "translateY(" + translate + "px)");
          } else {
            $item.find(".js-reorder-item-transform").css("transform", "");
          }
        }, 0)();
      }
    }, {
      key: "renderItems",
      value: function renderItems() {
        var _this = this;

        this.model.getChildren().each(function (itemModel) {
          _this.setUpItem(itemModel);

          _this.getItemElement(itemModel).draggable("option", "disabled", itemModel.get("_isLocked"));
        });
      }
    }, {
      key: "refreshItemElementTopCache",
      value: function refreshItemElementTopCache() {
        var _this2 = this;

        var top = 0;
        this.model.getChildren().each(function (itemModel, index) {
          _this2.itemElementTopCache[index] = top;
          top += _this2.getItemElement(itemModel).outerHeight();
        });
      }
    }, {
      key: "getItemElementTop",
      value: function getItemElementTop(itemModel) {
        return this.itemElementTopCache[itemModel.get("_userIndex")];
      }
    }, {
      key: "_getFirstEmptyIdx",
      value: function _getFirstEmptyIdx(arr) {
        var idx = 0;

        while (arr[idx]) {
          idx++;
          if (idx >= arr.length) throw "Unexpected error has occured: idx out of range of arr (there are no falsy elements)";
        }

        return idx;
      }
    }, {
      key: "setUpItem",
      value: function setUpItem(itemModel) {
        var _this3 = this;

        var $item = this.getItemElement(itemModel);
        var curTop;
        var lastTop;
        var children;
        var offsetY = 0;
        $item.draggable({
          containment: this.$(".js-reorder-containment"),
          scroll: false,
          start: function (event, ui) {
            itemModel.set("_isGrabbed", true);
            _this3.$(".js-reorder-item");
            offsetY = 0;
            var top = $item.position().top;
            curTop = top;
            lastTop = top;
            children = _this3.model.getChildren();
            children.sort();
          },
          drag: _.throttle(function (event, ui) {
            _this3.refreshItemElementTopCache();

            itemModel.set("_isGrabbed", true);
            var bb = $item[0].getBoundingClientRect();
            offsetY += _this3.scrollPage($item, dir, bb.top, bb.bottom);
            ui.position.top += offsetY;
            $item.css("top", ui.position.top);
            curTop = $item.position().top;
            var movement = curTop - lastTop;
            var dir = movement == 0 ? 0 : movement < 0 ? -1 : 1;
            lastTop = curTop;
            if (dir == 0) return;
            var newItemOrder = new Array(_this3.itemCount);
            var itemsAbove = [];
            var itemsBelow = [];
            children.each(function (item) {
              if (!item.get("_isLocked")) return;
              newItemOrder[item.get("_index")] = item;
            });
            var curMiddle = curTop + $item.outerHeight() / 2;

            if (dir > 0) {
              children.each(function (eModel) {
                if (eModel == itemModel) return;
                if (eModel.get("_isLocked")) return;

                var eTop = _this3.getItemElementTop(eModel);

                if (eTop < curMiddle) itemsAbove.push(eModel);else itemsBelow.push(eModel);
              });
            } else {
                children.each(function (eModel) {
                  if (eModel == itemModel) return;
                  if (eModel.get("_isLocked")) return;

                  var eBottom = _this3.getItemElementTop(eModel) + _this3.getItemElement(eModel).outerHeight();

                  if (eBottom > curMiddle) itemsBelow.push(eModel);else itemsAbove.push(eModel);
                });
              }

            _.each(itemsAbove, function (item) {
              newItemOrder[_this3._getFirstEmptyIdx(newItemOrder)] = item;
            });

            newItemOrder[_this3._getFirstEmptyIdx(newItemOrder)] = itemModel;

            _.each(itemsBelow, function (item) {
              newItemOrder[_this3._getFirstEmptyIdx(newItemOrder)] = item;
            });

            _.each(newItemOrder, function (item, index) {
              item.set("_userIndex", index);
            });

            _this3.model.getChildren().sort();

            _.each(newItemOrder, function (item, index) {
              item.set("_positionTop", _this3.getItemElementTop(item));
            });
          }, 1),
          stop: function () {
            var $container = _this3.$(".reorder__items-container");

            var itemGrabbedTop = $item.offset().top;

            _this3.model.getChildren().each(function (item) {
              var $item = _this3.getItemElement(item);

              $item.find(".js-reorder-item-transform").css("transform", "");
              $item.css("top", "");
              $container.append($item);
            });

            var itemGrabbedOffset = itemGrabbedTop - $item.offset().top;
            $item.addClass("is-grabbed").find(".js-reorder-item-transform").css("top", itemGrabbedOffset + "px").hide(0).show(0);

            _.debounce(function () {
              $item.find(".js-reorder-item-transform").css("top", "0");
              itemModel.set("_isGrabbed", false);
            }, 0)();
          },
          axis: 'y'
        });
      }
    }, {
      key: "scrollPage",
      value: function scrollPage($item, dragDir, draggableTop, draggableBottom) {
        var bb = this.$(".js-reorder-containment")[0].getBoundingClientRect();

        if (draggableTop < bb.top) {
          return bb.top - draggableTop;
        }

        if (draggableBottom > bb.bottom) {
          return bb.bottom - draggableBottom;
        }

        var pageY = draggableTop + (draggableBottom - draggableTop) / 2;
        var screenHeight = Adapt.device.screenHeight;
        var dir = 0;
        if (pageY < screenHeight * VIEWPORT_SCROLL_THRESHOLD) dir = -1;else if (pageY > screenHeight - screenHeight * VIEWPORT_SCROLL_THRESHOLD) dir = 1;
        if (dir == 0) return 0;
        $.scrollTo(dir > 0 ? "+=" + VIEWPORT_SCROLL_SPEED + "px" : "-=" + VIEWPORT_SCROLL_SPEED + "px", {});
        return dir * VIEWPORT_SCROLL_SPEED;
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.update();
      }
    }, {
      key: "onCannotSubmit",
      value: function onCannotSubmit() {}
    }, {
      key: "showMarking",
      value: function showMarking() {
        this.update();
        this.updateMarking();
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        return;
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        this.isCorrectAnswerShown = true;
        this.update();
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        this.isCorrectAnswerShown = false;
        this.update();
      }
    }, {
      key: "update",
      value: function update(model) {}
    }, {
      key: "updateSelection",
      value: function updateSelection() {}
    }, {
      key: "updateMarking",
      value: function updateMarking() {}
    }]);

    return ReorderView;
  }(QuestionView$1);
  var ReorderView$1 = __AMD("components/adapt-reorder/js/reorderView", ReorderView);

  var ReorderItemModel = function (_Backbone$Model) {
    _inherits(ReorderItemModel, _Backbone$Model);

    var _super = _createSuper(ReorderItemModel);

    function ReorderItemModel() {
      _classCallCheck(this, ReorderItemModel);

      return _super.apply(this, arguments);
    }

    _createClass(ReorderItemModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _index: -1,
          _userIndex: -1,
          _isCorrect: false,
          _isLocked: false,
          _isVisited: false,
          _visitedIndexes: [],
          _isGrabbed: false,
          _positionTop: 0
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpEventListeners();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this, "change:_userIndex", this.onUserIndexChange);
      }
    }, {
      key: "onUserIndexChange",
      value: function onUserIndexChange(model, userIndex) {
        var isVisited = _.includes(this.get("_visitedIndexes"), userIndex);

        this.set("_isVisited", isVisited);

        if (!isVisited) {
          this.set("_isCorrect", undefined);
          return;
        }

        this.set("_isCorrect", this.get("_index") == this.get("_userIndex"));
      }
    }, {
      key: "setVisited",
      value: function setVisited() {
        var visitedIndexes = this.get("_visitedIndexes");
        var userIndex = this.get("_userIndex");
        if (_.includes(visitedIndexes, userIndex)) return;
        visitedIndexes.push(userIndex);
      }
    }]);

    return ReorderItemModel;
  }(Backbone.Model);

  var ReorderItemModel$1 = __AMD("components/adapt-reorder/js/reorderItemModel", ReorderItemModel);

  var ReorderItemCollection = function (_Backbone$Collection) {
    _inherits(ReorderItemCollection, _Backbone$Collection);

    var _super = _createSuper(ReorderItemCollection);

    function ReorderItemCollection() {
      _classCallCheck(this, ReorderItemCollection);

      return _super.apply(this, arguments);
    }

    _createClass(ReorderItemCollection, [{
      key: "comparator",
      value: function comparator(item) {
        return item.get("_userIndex");
      }
    }]);

    return ReorderItemCollection;
  }(Backbone.Collection);

  var ReorderItemCollection$1 = __AMD("components/adapt-reorder/js/reorderItemCollection", ReorderItemCollection);

  var ReorderModel = function (_QuestionModel) {
    _inherits(ReorderModel, _QuestionModel);

    var _super = _createSuper(ReorderModel);

    function ReorderModel() {
      _classCallCheck(this, ReorderModel);

      return _super.apply(this, arguments);
    }

    _createClass(ReorderModel, [{
      key: "toJSON",
      value: function toJSON() {
        var json = _get(_getPrototypeOf(ReorderModel.prototype), "toJSON", this).call(this);

        json._items = this.getChildren().toJSON();
        return json;
      }
    }, {
      key: "init",
      value: function init() {
        QuestionModel$1.prototype.init.call(this);
        this.setUpItems();
        this.setUpLabels();
        this.checkCanSubmit();
      }
    }, {
      key: "setUpLabels",
      value: function setUpLabels() {
        var legacyHeader = this.get("header");
        var legacyFooter = this.get("footer");

        if (legacyHeader || legacyFooter) {
          Adapt.log.deprecated("reorderModel.js: \"header\" and \"footer\" properties are now defined in the \"_labels\" object.");
        }

        var labels = this.get("_labels") || {};
        labels = _.extend({}, {
          header: legacyHeader,
          footer: legacyFooter
        }, labels);
        this.set("_labels", labels);
      }
    }, {
      key: "setUpItems",
      value: function setUpItems() {
        var items = this.get('_items') || [];
        items.forEach(function (item, index) {
          item._index = index;
        });
        this.setChildren(new ReorderItemCollection$1(items, {
          model: ReorderItemModel$1
        }));
      }
    }, {
      key: "setupRandomisation",
      value: function setupRandomisation() {
        if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
        var children = this.getChildren();
        children.reset(children.shuffle(), {
          silent: true
        });
        var temp = new Array(children.length);
        children.each(function (item, index) {
          if (!item.get("_isLocked")) return;
          temp[item.get("_index")] = item;
        });
        children.each(function (item, index) {
          if (item.get("_isLocked")) return;
          temp[_.indexOf(temp, undefined)] = item;
        });

        _.each(temp, function (item, index) {
          item.set("_userIndex", index);
        });

        children.sort();
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        return true;
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        var props = {
          _numberOfIncorrectAnswers: 0,
          _numberOfCorrectAnswers: 0,
          _isAtLeastOneCorrectAnswer: false
        };
        this.getChildren().each(function (item) {
          var isCorrect = Boolean(item.get("_index") == item.get("_userIndex"));
          item.set("_isCorrect", isCorrect);
          item.set("_isLocked", isCorrect);
          item.setVisited();

          if (isCorrect) {
            props._numberOfCorrectAnswers++;
            props._isAtLeastOneCorrectAnswer = true;
          } else {
            props._numberOfIncorrectAnswers++;
          }
        });
        this.set(props);
        return props._numberOfIncorrectAnswers === 0;
      }
    }, {
      key: "setScore",
      value: function setScore() {
        var questionWeight = this.get('_questionWeight');

        if (this.get('_isCorrect')) {
          this.set('_score', questionWeight);
          return;
        }

        var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
        var itemLength = this.getChildren().length;
        var score = questionWeight * numberOfCorrectAnswers / itemLength;
        this.set('_score', score);
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_isAtLeastOneCorrectAnswer');
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set('_userAnswer', []);
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        if (!this.get('_isSubmitted')) return;
        var userAnswer = this.get('_userAnswer');
        this.set("_items", _.sortBy(this.get("_items"), function (item, index) {
          item.set("_userAnswer", userAnswer[index]);
          return userAnswer[index];
        }));
        this.setQuestionAsSubmitted();
        this.markQuestion();
        this.setScore();
        this.setupFeedback();
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var userAnswer = new Array(this.getChildren().length);
        var tempUserAnswer = new Array(this.getChildren().length);
        this.getChildren().each(function (item, index) {
          tempUserAnswer[item._index] = item.get("_userAnswer");
          userAnswer[item._index] = item.get("_userAnswer");
        }, this);
        this.set({
          '_userAnswer': userAnswer,
          '_tempUserAnswer': tempUserAnswer
        });
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        var responses = [];

        _.each(this.get('_userAnswer'), function (userAnswer, index) {
          responses.push(userAnswer + 1);
        });

        return responses.join('#');
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return "sequencing";
      }
    }]);

    return ReorderModel;
  }(QuestionModel$1);

  var ReorderModel$1 = __AMD("components/adapt-reorder/js/reorderModel", ReorderModel);

  __AMD("components/adapt-reorder/js/adapt-reorder", Adapt.register("reorder", {
    view: ReorderView$1,
    model: ReorderModel$1
  }));

  var Tabs = ComponentView$1.extend({
    events: {
      'click .js-tabs-nav-item-btn-click': 'onTabItemClicked'
    },
    preRender: function () {
      this.checkIfResetOnRevisit();
      this.setUpModelData();
      this.model.resetActiveItems();
      this.listenTo(this.model.getChildren(), {
        'change:_isActive': this.onItemsActiveChange,
        'change:_isVisited': this.onItemsVisitedChange
      });
    },
    setUpModelData: function () {
      if (!Adapt.sizing) return;
      var globalSizing = this.model.get("_itemSizing");

      if (globalSizing) {
        globalSizing = Adapt.sizing.getSizingClass(globalSizing);
        this.model.getChildren().each(function (item) {
          var itemGraphic = item.get("_graphic");
          if (!itemGraphic) return;
          var itemSizing = itemGraphic._sizing;
          itemGraphic._sizing = _.extend({}, itemSizing, {
            _classes: itemSizing ? Adapt.sizing.getSizingClass(itemSizing) : globalSizing
          });
        });
        this.model.set("_parSizingClasses", Adapt.sizing.getParentClasses(globalSizing));
      }
    },
    postRender: function () {
      this.setReadyStatus();
      this.setLayout();
      this.listenTo(Adapt, 'device:resize', this.setLayout);
      this.model.setActiveItem(0);

      if (this.model.get('_setCompletionOn') === 'inview') {
        this.setupInviewCompletion();
      }

      if (Adapt.isPDFMode()) {
        this.replaceWithAccordion();
      }
    },
    replaceWithAccordion: function () {
      if (!Adapt.componentStore.accordion) throw "Accordion not included in build";
      var AccordionView = Adapt.componentStore.accordion.view;
      var model = this.prepareAccordionModel();
      var newAccordion = new AccordionView({
        model: model
      });
      var $container = $(".component__container", $("." + this.model.get("_parentId")));
      $container.append(newAccordion.$el);
      this.remove();
      $.a11y_update();

      _.defer(function () {
        Adapt.trigger('device:resize');
      });
    },
    prepareAccordionModel: function () {
      var model = this.model;
      return model;
    },
    checkIfResetOnRevisit: function () {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    },
    setLayout: function () {
      this.$el.removeClass('is-horizontal-layout is-vertical-layout');

      if (Adapt.device.screenSize === 'large') {
        var tabLayout = this.model.get('_tabLayout');
        this.$el.addClass('is-' + tabLayout + '-layout');

        if (tabLayout === 'vertical') {
          this.setTabLayoutVertical();
          return;
        }

        this.setTabLayoutHorizontal();
        return;
      }

      this.$el.addClass('is-horizontal-layout');
      this.setTabLayoutVertical();
    },
    setTabLayoutHorizontal: function () {
      return;
    },
    setTabLayoutVertical: function () {
      this.$('.tabs__nav-item-btn').css({
        width: 100 + '%'
      });
    },
    onTabItemClicked: function (e) {
      if (e && e.preventDefault) e.preventDefault();
      var index = $(e.currentTarget).data('index');
      this.model.setActiveItem(index);
      var dataFilter = '[data-index="' + index + '"]';
      var $tabButton = this.$('.js-tabs-nav-item-btn-click').filter(dataFilter);
      var $tabPanel = this.$('.tabs__content-item').filter(dataFilter);
      Adapt.navigateToElement($tabPanel.add($tabButton), {
        duration: 400,
        align: "inview",
        offset: {
          top: -15,
          left: 0
        }
      });
    },
    onItemsActiveChange: function (item, isActive) {
      var dataFilter = '[data-index="' + item.get('_index') + '"]';
      var $tabButton = this.$('.js-tabs-nav-item-btn-click').filter(dataFilter);
      var $tabPanel = this.$('.tabs__content-item').filter(dataFilter);
      $tabButton.toggleClass('is-selected', isActive).attr('aria-selected', isActive);
      $tabPanel.toggleClass('is-active', isActive);

      if (isActive) {
        $tabPanel.a11y_focus();
        item.toggleVisited(true);
      }
    },
    onItemsVisitedChange: function (item, isVisited) {
      if (!isVisited) return;

      var ariaLabel = item.get('title') + '. ' + this.model.get('_globals')._accessibility._ariaLabels.visited;

      var $tabButton = this.$('.js-tabs-nav-item-btn-click').filter('[data-index="' + item.get('_index') + '"]');
      $tabButton.addClass('is-visited').attr('aria-label', ariaLabel);
    }
  }, {
    template: 'tabs'
  });
  __AMD("components/adapt-tabs/js/adapt-tabs", Adapt.register('tabs', {
    model: ItemsComponentModel,
    view: Tabs
  }));

  var TextInputPlusView = function (_QuestionView) {
    _inherits(TextInputPlusView, _QuestionView);

    var _super = _createSuper(TextInputPlusView);

    function TextInputPlusView() {
      _classCallCheck(this, TextInputPlusView);

      return _super.apply(this, arguments);
    }

    _createClass(TextInputPlusView, [{
      key: "events",
      value: function events() {
        return {
          'focus .js-textinputplus-textbox': 'clearValidationError',
          'change .js-textinputplus-textbox': 'onInputChanged',
          'keyup .js-textinputplus-textbox': 'onInputChanged',
          'click .js-textinputplus-incorrect-icon': 'onIncorrectIconClick'
        };
      }
    }, {
      key: "postRender",
      value: function postRender() {
        _get(_getPrototypeOf(TextInputPlusView.prototype), "postRender", this).call(this);

        this.setUpInputFields();
        this.attemptsBeforeHint = 3;
      }
    }, {
      key: "setUpInputFields",
      value: function setUpInputFields() {
        var items = [];
        var $inputFields = this.$(".inputfield");
        $inputFields.each(function (i, e) {
          var view = Adapt.inputField.findViewByEl($(e));
          var model = view.model;
          view.$(".js-inputfield-input").addClass("js-textinputplus-textbox").attr("data-adapt-index", i);
          items.push({
            _answers: model.getAnswers(),
            _inputFieldModel: model
          });
          model.disableHint();
          model.enableRequireSubmit();
        });
        this.model.set("_items", items);
        this.model.setupQuestionItemIndexes();
        this.model.checkCanSubmit();
        return true;
      }
    }, {
      key: "resetQuestionOnRevisit",
      value: function resetQuestionOnRevisit() {
        this.setAllItemsEnabled(false);
        this.resetQuestion();
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.model.setupRandomisation();
      }
    }, {
      key: "disableQuestion",
      value: function disableQuestion() {
        this.setAllItemsEnabled(false);
      }
    }, {
      key: "enableQuestion",
      value: function enableQuestion() {
        this.setAllItemsEnabled(true);
      }
    }, {
      key: "setAllItemsEnabled",
      value: function setAllItemsEnabled(isEnabled) {
        this.model.get('_items').forEach(function (item, index) {
          var $itemInput = this.$('.js-textinputplus-textbox').eq(index);
          $itemInput.prop('disabled', !isEnabled);
        }, this);
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setReadyStatus();
      }
    }, {
      key: "clearValidationError",
      value: function clearValidationError() {}
    }, {
      key: "onCannotSubmit",
      value: function onCannotSubmit() {
        this.showValidationError();
      }
    }, {
      key: "showValidationError",
      value: function showValidationError() {}
    }, {
      key: "showMarking",
      value: function showMarking() {}
    }, {
      key: "updateMarking",
      value: function updateMarking() {
        var _this = this;

        if (!this.model.get('_canShowMarking')) return;
        this.model.get('_items').forEach(function (item, i) {
          var _item$_inputFieldMode;

          var $item = this.$('.js-textinputplus-item').eq(i);
          $item.toggleClass('is-correct', item._isCorrect);
          $item.toggleClass('is-incorrect', !item._isCorrect);

          if ((_item$_inputFieldMode = item._inputFieldModel) !== null && _item$_inputFieldMode !== void 0 && _item$_inputFieldMode.isCorrect()) {
            item._inputFieldModel.lock();
          }
        }, this);
        this.attemptsBeforeHint--;

        if (this.attemptsBeforeHint == 0) {
          this.listenToOnce(Adapt, "notify:closed", function () {
            _.debounce(function () {
              _.each(_this.model.get("_items"), function (item) {
                if (item._inputFieldModel) {
                  item._inputFieldModel.enableHint();
                }
              });
            }, 600)();
          });
        }
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        this.$('.js-textinputplus-textbox').prop('disabled', !this.model.get('_isEnabled')).val('');
        this.attemptsBeforeHint = 3;
        this.model.set({
          _isAtLeastOneCorrectSelection: false,
          _isCorrect: undefined
        });
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        if (this.model.get('_answers')) {
          var correctAnswers = this.model.get('_answers');
          this.model.get('_items').forEach(function (item, index) {
            this.$('.js-textinputplus-textbox').eq(index).val(correctAnswers[index][0]);
          }, this);
        } else {
          this.model.get('_items').forEach(function (item, index) {
            this.$('.js-textinputplus-textbox').eq(index).val(item._answers[0]);
          }, this);
        }
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        this.model.get('_items').forEach(function (item, index) {
          this.$('.js-textinputplus-textbox').eq(index).val(item.userAnswer);
        }, this);
      }
    }, {
      key: "onInputChanged",
      value: function onInputChanged(e) {
        var $input = $(e.target);
        this.model.setItemUserAnswer($input.attr('data-adapt-index'), $input.val());
      }
    }, {
      key: "clearItemState",
      value: function clearItemState(index) {
        var $input = this.$('.js-textinputplus-textbox');
        var $item = this.$('.js-textinputplus-item');

        if (index !== undefined) {
          $item = $item.filter("[data-adapt-index=" + index + "]");
          $input = $input.filter("[data-adapt-index=" + index + "]");
        }

        $input.prop('disabled', !this.model.get('_isEnabled')).val('').parent().removeClass('is-incorrect is-correct');
        this.model.setItemUserAnswer(index, '');
        $item.removeClass('is-correct is-incorrect');
      }
    }, {
      key: "onIncorrectIconClick",
      value: function onIncorrectIconClick(event) {
        var index = $(event.currentTarget).attr("data-adapt-index");
        this.clearItemState(index);
      }
    }]);

    return TextInputPlusView;
  }(QuestionView$1);

  var TextInputPlusView$1 = __AMD("components/adapt-textInputPlus/js/textInputPlusView", TextInputPlusView);

  var TextInputPlusModel = QuestionModel$1.extend({
    init: function () {
      QuestionModel$1.prototype.init.call(this);
      this.set('_genericAnswerIndexOffset', TextInputPlusModel.genericAnswerIndexOffset);
      this.setupQuestionItemIndexes();
      this.setUpQuestionItemInputWidths();
      this.checkCanSubmit();
    },
    setUpQuestionItemInputWidths: function () {
      var maxAnswerLength = 0;
      var inputWidthExtra = this.get("_inputWidthExtra") || 2;

      _.each(this.get('_items'), function (item) {
        _.each(item._answers, function (answer) {
          var answerLength = String(answer).length;

          if (answerLength > maxAnswerLength) {
            maxAnswerLength = answerLength;
          }
        });
      });

      maxAnswerLength += inputWidthExtra;

      _.each(this.get("_items"), function (item) {
        item._inputWidth = maxAnswerLength;
      });
    },
    setupQuestionItemIndexes: function () {
      this.get('_items').forEach(function (item, index) {
        if (item._index === undefined) item._index = index;
        if (item._answerIndex === undefined) item._answerIndex = -1;
      });
    },
    restoreUserAnswers: function () {
      if (!this.get('_isSubmitted')) return;
      var userAnswer = this.get('_userAnswer');
      var genericAnswers = this.get('_answers');
      this.get('_items').forEach(function (item) {
        var answerIndex = userAnswer[item._index];

        if (answerIndex >= TextInputPlusModel.genericAnswerIndexOffset) {
          item.userAnswer = genericAnswers[answerIndex - TextInputPlusModel.genericAnswerIndexOffset];
          item._answerIndex = answerIndex;
        } else if (answerIndex > -1) {
          item.userAnswer = item._answers[answerIndex];
          item._answerIndex = answerIndex;
        } else {
          if (item.userAnswer === undefined) item.userAnswer = '******';
          item._answerIndex = -1;
        }

        if (item.userAnswer instanceof Array) item.userAnswer = item.userAnswer[0];
      });
      this.setQuestionAsSubmitted();
      this.markQuestion();
      this.setScore();
      this.setupFeedback();
    },
    setupRandomisation: function () {
      if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
      this.set('_items', _.shuffle(this.get('_items')));
    },
    canSubmit: function () {
      return this.get('_items').every(function (_ref) {
        var userAnswer = _ref.userAnswer;
        return userAnswer;
      });
    },
    setItemUserAnswer: function (itemIndex, userAnswer) {
      var item = this.get('_items')[itemIndex];
      item.userAnswer = userAnswer;
      this.checkCanSubmit();
    },
    storeUserAnswer: function () {
      var items = this.get('_items');
      this.isCorrect();
      var userAnswer = new Array(items.length);
      items.forEach(function (item, index) {
        userAnswer[item._index] = item._answerIndex;
      });
      this.set('_userAnswer', userAnswer);
    },
    isCorrect: function () {
      this.get('_items').forEach(function (item) {
        if (item._inputFieldModel) {
          item._inputFieldModel.submit();
        }
      });

      if (this.get('_answers')) {
        this.markGenericAnswers();
      } else {
        this.markSpecificAnswers();
      }

      return !_.contains(_.pluck(this.get('_items'), '_isCorrect'), false);
    },
    isPartlyCorrect: function () {
      return this.get('_isAtLeastOneCorrectSelection');
    },
    markGenericAnswers: function () {
      var numberOfCorrectAnswers = 0;
      var correctAnswers = this.get('_answers').slice();
      var usedAnswerIndexes = [];
      this.get('_items').forEach(function (item) {
        correctAnswers.forEach(function (answerGroup, answerIndex) {
          if (_.indexOf(usedAnswerIndexes, answerIndex) > -1) return;
          if (this.checkAnswerIsCorrect(answerGroup, item.userAnswer) == false) return;
          usedAnswerIndexes.push(answerIndex);
          item._isCorrect = true;
          item._answerIndex = answerIndex + TextInputPlusModel.genericAnswerIndexOffset;
          this.set({
            _numberOfCorrectAnswers: ++numberOfCorrectAnswers,
            _isAtLeastOneCorrectSelection: true
          });
        }, this);
        if (!item._isCorrect) item._isCorrect = false;
      }, this);
    },
    markSpecificAnswers: function () {
      var numberOfCorrectAnswers = 0;
      this.get('_items').forEach(function (item) {
        if (item._inputFieldModel) {
          var isCorrect = item._inputFieldModel.isCorrect();

          if (isCorrect) {
            item._isCorrect = true;
            item._answerIndex = item._inputFieldModel.getAnswerIndex();
            this.set({
              _numberOfCorrectAnswers: ++numberOfCorrectAnswers,
              _isAtLeastOneCorrectSelection: true
            });
          } else {
            item._isCorrect = false;
            item._answerIndex = -1;
          }

          return;
        }

        if (!item._answers) return;
        var userAnswer = item.userAnswer || '';

        if (this.checkAnswerIsCorrect(item._answers, userAnswer)) {
          item._isCorrect = true;
          item._answerIndex = _.indexOf(item._answers, this.cleanupUserAnswer(userAnswer));
          this.set({
            _numberOfCorrectAnswers: ++numberOfCorrectAnswers,
            _isAtLeastOneCorrectSelection: true
          });
        } else {
          item._isCorrect = false;
          item._answerIndex = -1;
        }
      }, this);
    },
    checkAnswerIsCorrect: function (possibleAnswers, userAnswer) {
      var uAnswer = this.cleanupUserAnswer(userAnswer);
      var matched = possibleAnswers.filter(function (cAnswer) {
        return this.cleanupUserAnswer(cAnswer) == uAnswer;
      }, this);
      var answerIsCorrect = matched && matched.length > 0;
      if (answerIsCorrect) this.set('_hasAtLeastOneCorrectSelection', true);
      return answerIsCorrect;
    },
    cleanupUserAnswer: function (userAnswer) {
      if (this.get('_allowsAnyCase')) {
        userAnswer = userAnswer.toLowerCase();
      }

      if (this.get('_allowsPunctuation')) {
        userAnswer = userAnswer.replace(/[\.,-\/#!$£%\^&\*;:{}=\-_`~()]/g, '');
        userAnswer = userAnswer.replace(/(  +)+/g, ' ');
      }

      return $.trim(userAnswer);
    },
    setScore: function () {
      var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
      var questionWeight = this.get('_questionWeight');
      var itemLength = this.get('_items').length;
      var score = questionWeight * numberOfCorrectAnswers / itemLength;
      this.set('_score', score);
    },
    resetUserAnswer: function () {
      this.get('_items').forEach(function (item) {
        item._isCorrect = false;
        item.userAnswer = '';
      });
    },
    getResponse: function () {
      return _.pluck(this.get('_items'), 'userAnswer').join('[,]');
    },
    getResponseType: function () {
      return 'fill-in';
    }
  }, {
    genericAnswerIndexOffset: 65536
  });
  var TextInputPlusModel$1 = __AMD("components/adapt-textInputPlus/js/textInputPlusModel", TextInputPlusModel);

  __AMD("components/adapt-textInputPlus/js/adapt-textInputPlus", Adapt.register('textinputplus', {
    view: TextInputPlusView$1,
    model: TextInputPlusModel$1
  }));

  var TryHtmlView = function (_ComponentView) {
    _inherits(TryHtmlView, _ComponentView);

    var _super = _createSuper(TryHtmlView);

    function TryHtmlView() {
      _classCallCheck(this, TryHtmlView);

      return _super.apply(this, arguments);
    }

    _createClass(TryHtmlView, [{
      key: "events",
      value: function events() {
        return {
          "click .js-tryhtml-ui-update": "onUpdateClick",
          "click .js-tryhtml-ui-toggleanswer": "onToggleAnswerClick",
          "mouseup .js-tryhtml-content-user": "onCodeMirrorUp"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpModelData();
        ComponentView$1.prototype.initialize.call(this);
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        this.model.set("_tryHtml", Adapt.course.get("_tryHtml"));
        this.model.set("_isShowingAnswer", false);
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model, "change:_isShowingAnswer", this.onShowingAnswerChange);
        this.$(".js-tryhtml-iframe-user").on("load", this.onIframeUserLoad.bind(this));
        this.$(".js-tryhtml-iframe-correct").on("load", this.onIframeCorrectLoad.bind(this));
      }
    }, {
      key: "preRender",
      value: function preRender() {}
    }, {
      key: "postRender",
      value: function postRender() {
        var lang = this.model.get("_lang");
        var mode = "htmlmixed";

        switch (lang) {
          case "html":
            mode = "htmlmixed";
            break;

          case "css":
          case "xml":
          case "php":
            mode = lang;
            break;

          case "js":
            mode = "javascript";
            break;

          default:
            Adapt.log.error("tryHtmlView.js: \"_lang\" cannot be \"" + lang + "\" (this language is not implemented).");
        }

        this.codeMirror = CodeMirror__default['default'].fromTextArea(this.$(".js-tryhtml-content-textarea")[0], {
          theme: "prettify",
          tabSize: 2,
          tabUnit: 2,
          lineWrapping: true,
          resetSelectionOnContextMenu: false,
          mode: mode
        });
        this.codeMirror.on("contextmenu", function (codeMirror, event) {
          var scrollY = Adapt.scrolling.$app.scrollTop() || Adapt.scrolling.$html.scrollTop();
          window.scrollY = scrollY;
        });
        this.setUpEventListeners();
      }
    }, {
      key: "setUpIframeHTML",
      value: function setUpIframeHTML(_html) {
        var html = _html;
        var onSubmit = this.model.get("_onSubmit");
        html = ((onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit.prepend) || "") + html + ((onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit.append) || "");

        if (Adapt.isEpubMode()) {
          html = "<!--!IGNORE-XHTML!-->" + html;
        }

        return html;
      }
    }, {
      key: "onUpdateClick",
      value: function onUpdateClick(event) {
        var _this = this;

        if (this.model.get("_isShowingAnswer")) return;
        Adapt.navigateToElement(this.$(".js-tryhtml-iframe-container"), {
          duration: 400,
          align: "inview"
        });
        var $iframe = this.$(".js-tryhtml-iframe-user");
        $iframe.fadeOut(function () {
          var html = _this.setUpIframeHTML(_this.codeMirror.getValue());

          $iframe.contents().find("body").html(html);
        });
        $iframe.fadeIn();
      }
    }, {
      key: "onShowingAnswerChange",
      value: function onShowingAnswerChange(model, isShowingAnswer) {
        Adapt.navigateToElement(this.$(".js-tryhtml-content-correct"), {
          duration: 400,
          align: "inview"
        });
        this.$(".js-tryhtml-widget").toggleClass("show-correct-answer");
        var tryHtml = this.model.get("_tryHtml");
        this.$(".js-tryhtml-ui-title").text(!isShowingAnswer ? tryHtml._user.title : tryHtml._correct.title);
        this.$(".js-tryhtml-ui-toggleanswer").text(isShowingAnswer ? tryHtml._user.buttonText : tryHtml._correct.buttonText);
        this.$(".js-tryhtml-ui-update").text(isShowingAnswer ? tryHtml._update.disabledText : tryHtml._update.buttonText).toggleClass("is-disabled", isShowingAnswer);
      }
    }, {
      key: "onToggleAnswerClick",
      value: function onToggleAnswerClick() {
        this.model.set("_isShowingAnswer", !this.model.get("_isShowingAnswer"));
      }
    }, {
      key: "onIframeUserLoad",
      value: function onIframeUserLoad() {
        this.setReadyStatus();
        var $iframe = this.$(".js-tryhtml-iframe-user");
        $iframe.contents().find("body").html(this.setUpIframeHTML(this.model.get("_user").output));
      }
    }, {
      key: "onIframeCorrectLoad",
      value: function onIframeCorrectLoad() {
        var $iframe = this.$(".js-tryhtml-iframe-correct");
        var height = $iframe.contents().find("body").html(this.setUpIframeHTML(this.model.get("_correct").output)).parent().height();
        this.$(".js-tryhtml-iframe-container").height(height + 40);
      }
    }, {
      key: "onCodeMirrorUp",
      value: function onCodeMirrorUp(event) {
        var _this2 = this;

        _.delay(function () {
          _this2.codeMirror.focus();
        }, 1);
      }
    }]);

    return TryHtmlView;
  }(ComponentView$1);

  TryHtmlView.template = "tryHtml";
  var TryHtmlView$1 = __AMD("components/adapt-tryHtml/js/tryHtmlView", TryHtmlView);

  var TryHtmlModel = function (_ComponentModel) {
    _inherits(TryHtmlModel, _ComponentModel);

    var _super = _createSuper(TryHtmlModel);

    function TryHtmlModel() {
      _classCallCheck(this, TryHtmlModel);

      return _super.apply(this, arguments);
    }

    _createClass(TryHtmlModel, [{
      key: "defaults",
      value: function defaults() {
        return ComponentModel$1.resultExtend('defaults', {});
      }
    }, {
      key: "initialize",
      value: function initialize() {
        if (this.get("_lang") === undefined) {
          this.set("_lang", "html");
        }

        if (Adapt.config.get("_isEpub")) {
          Adapt.log.error("tryHtml: CodeMirror plugin uses capitals in its classnames. Check that they still work with the EPUB reader.");
        }

        this.setUpModelData();
        ComponentModel$1.prototype.initialize.call(this);
        this.setUpEventListeners();
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        this.set("_componentLogo", {
          src: "assets/trythis-logo.svg"
        });
        var s = Adapt.codeBox.toString(this.get("_user").code);
        this.get("_user").code = s;
        s = s.replace(/&lt;/g, "<");
        s = s.replace(/&gt;/g, ">");
        this.get("_user").output = s;
        s = Adapt.codeBox.toString(this.get("_correct").code);
        s = s.replace(/&lt;/g, "<");
        s = s.replace(/&gt;/g, ">");
        this.get("_correct").output = s;
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {}
    }]);

    return TryHtmlModel;
  }(ComponentModel$1);

  var TryHtmlModel$1 = __AMD("components/adapt-tryHtml/js/tryHtmlModel", TryHtmlModel);

  __AMD("components/adapt-tryHtml/js/adapt-tryHtml", Adapt.register('tryhtml', {
    model: TryHtmlModel$1,
    view: TryHtmlView$1
  }));

  var TryThisView = Accordion.view.extend({
    postRender: function () {
      Accordion.view.prototype.postRender.call(this);
    }
  }, {
    template: 'tryThis'
  });
  var TryThisModel = Accordion.model.extend({
    initialize: function () {
      this.set("_componentLogo", {
        src: "assets/trythis-logo.svg"
      });
      var reflect = this.get("_reflect");

      if (reflect) {
        this.set("_items", [{
          title: "Reflect",
          body: (reflect === null || reflect === void 0 ? void 0 : reflect.body) || ""
        }]);
      } else {
        this.set("_items", []);
      }

      Accordion.model.prototype.initialize.call(this);
    }
  });
  __AMD("components/adapt-tryThis/js/adapt-tryThis", Adapt.register('trythis', {
    model: TryThisModel,
    view: TryThisView
  }));

  var AnnotationView = function (_Backbone$View) {
    _inherits(AnnotationView, _Backbone$View);

    var _super = _createSuper(AnnotationView);

    function AnnotationView() {
      _classCallCheck(this, AnnotationView);

      return _super.apply(this, arguments);
    }

    _createClass(AnnotationView, [{
      key: "className",
      value: function className() {
        var classNames = ["annotation", "js-annotation-click", this.model.get("_hasIcon") ? "has-icon" : "", this.model.get("_tooltip") ? "has-tooltip" : ""];
        return classNames.join(" ");
      }
    }, {
      key: "tagName",
      value: function tagName() {
        return "span";
      }
    }, {
      key: "events",
      value: function events() {
        return {
          "click": "onClick"
        };
      }
    }, {
      key: "attributes",
      value: function attributes() {
        var attributes = {
          "data-annotation-num": this.model.get("_number")
        };
        return attributes;
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setupEventListeners();

        _.debounce(this.initTargets.bind(this))();

        this.render();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(this.model, "change:_isActive", this.onActiveChange);
        this.listenTo(this.model, "change:_isVisited", this.onVisitedChange);
        Adapt.on("annotation:toggle", this.onAdaptAnnotationToggle.bind(this));
      }
    }, {
      key: "initTargets",
      value: function initTargets() {
        var $targets = this.$getForTargets();
        $targets.addClass("is-annotation-target").attr("data-annotation-num", this.model.get("_number"));

        if (Adapt.isPDFMode()) {
          $targets.addClass("is-active");
        }
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates['annotation'];
        this.$el.html(new Handlebars.SafeString(template(this.model.toJSON())).string);
        if (Adapt.isPDFMode()) this.renderTooltipFallback();
      }
    }, {
      key: "renderTooltipFallback",
      value: function () {
        var _renderTooltipFallback = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          var _this = this;

          var tooltip;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  tooltip = this.model.get("_tooltip");

                  if (tooltip) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return");

                case 3:
                  _.debounce(function () {
                    var componentView = Adapt.findViewByModelId(_this.model.get("_parent").get("_id"));
                    var $tooltipFallback = componentView.$(".tooltip-fallback");

                    if (!$tooltipFallback.length) {
                      throw "AnnotationView: Could not find a {{{tooltipFallback}}} element in component \"" + _this.model.get("_parent").get("_id") + "\" (required for PDF mode).";
                    }

                    $tooltipFallback.append("<div class='tooltip-fallback__item' data-annotation-num='" + _this.model.get("_number") + "'>" + tooltip + "</div>");
                  }, 0)();

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function renderTooltipFallback() {
          return _renderTooltipFallback.apply(this, arguments);
        }

        return renderTooltipFallback;
      }()
    }, {
      key: "onClick",
      value: function onClick() {
        var _this2 = this;

        this.toggle();
        if (!this.model.get("_isActive")) return;
        var tooltip = this.model.get("_tooltip");

        if (tooltip) {
          var tooltipPopupView = Adapt.createTooltip(this.$el, {
            content: tooltip,
            _type: "annotation"
          });
          this.tooltipPopupView = tooltipPopupView;
          this.listenToOnce(tooltipPopupView.model, "change:_isActive", function () {
            _this2.model.set("_isActive", false);
          });
        }
      }
    }, {
      key: "toggle",
      value: function toggle() {
        this.model.set("_isActive", !this.model.get("_isActive"));
        Adapt.trigger("annotation:toggle", this.model);
      }
    }, {
      key: "onAdaptAnnotationToggle",
      value: function onAdaptAnnotationToggle(model) {
        if (model == this.model) return;
        this.model.set("_isActive", false);
      }
    }, {
      key: "onVisitedChange",
      value: function onVisitedChange(model, isVisited) {
        if (!isVisited) return;
        this.$el.addClass("is-visited");
      }
    }, {
      key: "$getForTargets",
      value: function $getForTargets() {
        var _this3 = this;

        var _for = this.model.get("_for");

        var $for = $();

        if (_for) {
          var $container = this.$el.closest(".block, .notify");

          if (!$container.length) {
            Adapt.log.error("adapt-annotation: could not find closest .block / .notify element.", "Content: " + this.model.get("content"));
            return $for;
          }

          _.each(_for, function (forName) {
            var $f = $for.add($container.find("[name='" + forName + "']"));

            if (!$f.length) {
              Adapt.log.error("adapt-annotation: Could not find element with name=\"" + forName + "\" inside its componentView (" + _this3.model.get("_parent").get("_id") + ").");
            }

            $for = $for.add($f);
          });
        }

        return $for;
      }
    }, {
      key: "onActiveChange",
      value: function onActiveChange(model, isActive) {
        var _this4 = this;

        this.$el.toggleClass("is-active", isActive);

        if (isActive) {
          this.model.set("_isVisited", true);
        }

        var $forTargets = this.$getForTargets();
        if (!$forTargets.length) return;
        Adapt.annotation.toggleEl($forTargets, isActive);

        if (!isActive) {
          if (this.tooltipPopupView) this.tooltipPopupView.remove();
          $(document).off("click touch", this.onClickAnywhereEvent);
          return;
        }

        _.debounce(function () {
          _this4.onClickAnywhereEvent = _this4.onClickAnywhere.bind(_this4);
          $(document).one("click touch", _this4.onClickAnywhereEvent);
        })();
      }
    }, {
      key: "onClickAnywhere",
      value: function onClickAnywhere(event) {
        var $target = $(event.target);
        if ($target.closest(".is-annotation-target.is-active").length) return;
        this.model.set("_isActive", false);
      }
    }]);

    return AnnotationView;
  }(Backbone.View);
  var AnnotationView$1 = __AMD("extensions/adapt-annotation/js/annotationView", AnnotationView);

  var Annotation = function (_Backbone$Controller) {
    _inherits(Annotation, _Backbone$Controller);

    var _super = _createSuper(Annotation);

    function Annotation() {
      _classCallCheck(this, Annotation);

      return _super.apply(this, arguments);
    }

    _createClass(Annotation, [{
      key: "initialize",
      value: function initialize() {
        Adapt.on('router:page', this.onRouterPage);
        this.initHelpers();
      }
    }, {
      key: "onRouterPage",
      value: function onRouterPage() {
        var annotationNum = 1;
        Handlebars__default['default'].registerHelperEl("annotation", function () {
          var context = arguments[arguments.length - 1];
          var hash = context.hash;

          if (!hash.for) {
            if (!hash.tooltip) {
              throw "Annotation must have the \"for\" and/or \"tooltip\" parameter defined.";
            }

            if (hash.hasIcon === undefined) {
              hash.hasIcon = false;
            }
          } else {
            if (hash.hasIcon === undefined) {
              hash.hasIcon = true;
            }
          }

          var modelJSON = {
            content: context !== null && context !== void 0 && context.fn ? context.fn(this) : "",
            _for: hash.for ? hash.for.split(",") : undefined,
            _tooltip: hash.tooltip,
            _hasIcon: hash.hasIcon !== false,
            _number: annotationNum,
            _parent: Handlebars__default['default'].getComponentModelFromContext(context)
          };
          annotationNum++;
          return new AnnotationView$1({
            model: new Backbone.Model(modelJSON)
          }).$el;
        });
      }
    }, {
      key: "initHelpers",
      value: function initHelpers() {
        var helpers = {
          mark: function () {
            var _context$fn;

            var context = arguments[arguments.length - 1];
            var data = context.hash || {};

            if (data.absolute) {
              var vals = data.absolute.split(",");

              if (vals.length < 2) {
                throw "{{#mark}} helper: the \"absolute\" property must have a string value formatted as follows: \"LEFT,TOP,WIDTH,HEIGHT\".\n\nFor example: absolute=\"10,10,20,20\".\n\nYou entered: absolute=\"" + absolute + "\"";
              }

              data.absolute = {
                left: vals[0].trim() + "%",
                top: vals[1].trim() + "%"
              };
              if (vals.length >= 3) data.absolute.width = vals[2].trim() + "%";
              if (vals.length >= 4) data.absolute.height = vals[3].trim() + "%";
            }

            data._tag = "mark";
            data = _.extend({}, {
              content: (_context$fn = context.fn) === null || _context$fn === void 0 ? void 0 : _context$fn.apply(this)
            }, data);
            var template = Handlebars__default['default'].templates['mark'];
            return new Handlebars__default['default'].SafeString(template(data)).string;
          },
          markBlock: function () {
            var context = arguments[arguments.length - 1];

            var data = _.extend({
              content: context.fn(this)
            }, context.hash || {}, {
              _tag: "div"
            });

            var template = Handlebars__default['default'].templates['mark'];
            return new Handlebars__default['default'].SafeString(template(data)).string;
          },
          fade: function () {
            var context = arguments[arguments.length - 1];

            var data = _.extend({
              content: context.fn(this)
            }, context.hash || {}, {
              _tag: "span"
            });

            var template = Handlebars__default['default'].templates['fade'];
            return new Handlebars__default['default'].SafeString(template(data)).string;
          },
          fadeBlock: function () {
            var context = arguments[arguments.length - 1];

            var data = _.extend({
              content: context.fn(this)
            }, context.hash || {}, {
              _tag: "div"
            });

            var template = Handlebars__default['default'].templates['fade'];
            return new Handlebars__default['default'].SafeString(template(data)).string;
          },
          tooltipFallback: function () {
            var template = Handlebars__default['default'].templates['tooltipFallback'];
            return new Handlebars__default['default'].SafeString(template({})).string;
          }
        };

        for (var name in helpers) {
          if (helpers.hasOwnProperty(name)) {
            Handlebars__default['default'].registerHelper(name, helpers[name]);
          }
        }
      }
    }, {
      key: "toggleEl",
      value: function toggleEl($el, isActive) {
        $el.addClass("is-annotation-target").each(function (i, e) {
          if (!isActive) {
            $(e).toggleClass("is-active", false).trigger("annotation:inactive");
          } else {
              _.debounce(function () {
                $(e).toggleClass("is-active", true).trigger("annotation:active");
              })();
            }
        });
        if (!isActive) return;
        Adapt.navigateToElement($el, {
          align: "inview",
          scrollNested: true
        });
      }
    }]);

    return Annotation;
  }(Backbone.Controller);

  Adapt.annotation = new Annotation();

  var VIEWPORT_MARGIN = "15%";

  var BlockBackgroundView = function (_Backbone$View) {
    _inherits(BlockBackgroundView, _Backbone$View);

    var _super = _createSuper(BlockBackgroundView);

    function BlockBackgroundView() {
      _classCallCheck(this, BlockBackgroundView);

      return _super.apply(this, arguments);
    }

    _createClass(BlockBackgroundView, [{
      key: "className",
      value: function className() {
        return "blockbg";
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.onDeviceResize = _.debounce(this.onDeviceResize.bind(this), 100);
        this.blockView = Adapt.findViewByModelId(this.model.get("_parent").get("_id"));
        this.blockView.$el.addClass("has-blockbg").toggleClass("has-prevblockbg", Boolean(this.model.get("_prevBlockBackground")));
        this.setUpItemGraphics();
        this.render();
        this.onDeviceChange();
        this.updateClipMask();
        this.setUpEventListeners();
      }
    }, {
      key: "setUpItemGraphics",
      value: function setUpItemGraphics() {
        _.each(this.model.get("_items"), function (item, i) {
          if (!item._graphic) return;
          item._graphic.src = item._graphic["_" + (Adapt.device.screenSize == "large" ? "large" : "small")];
        });
      }
    }, {
      key: "onDeviceChange",
      value: function onDeviceChange() {
        this.updateItemGraphics();
      }
    }, {
      key: "onDeviceResize",
      value: function onDeviceResize() {
        this.updateClipMask();
      }
    }, {
      key: "updateClipMask",
      value: function updateClipMask() {
        if (!this.model.get("_isInview")) return;
        var coords = ["0", "100vw", this.$el.height() + "px", "0"];
        this.$el.css("clip", "rect(".concat(coords.join(","), ")"));
      }
    }, {
      key: "updateItemGraphics",
      value: function updateItemGraphics() {
        var _this = this;

        _.each(this.model.get("_items"), function (item, i) {
          var $item = _this.$(".js-blockbg-item").filter("[data-adapt-index=" + i + "]");

          var $group = _this.blockView.$(".js-blockbg-group-img").filter("[data-adapt-index=" + i + "]");

          var url = "url(" + item._graphic["_" + (Adapt.device.screenSize == "large" ? "large" : "small")] + ")";
          $item.css("background-image", url);
          $group.css("background-image", url);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var modelJSON = this.model.toJSON();
        var template = Handlebars.templates['blockBackground'];
        this.$el.html(new Handlebars.SafeString(template(modelJSON)).string);
        this.blockView.$el.prepend(this.$el);
        template = Handlebars.templates['blockBackgroundGroups'];
        this.blockView.$(".component__container").prepend(new Handlebars.SafeString(template(modelJSON)).string);
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model, "change:_activeItemIdx", this.onActiveItemIdxChange.bind(this));
        this.listenTo(this.model, "change:_isInview", this.onIsInviewChange.bind(this));
        var prevBlockBackground = this.model.get("_prevBlockBackground");

        if (prevBlockBackground) {
          this.listenTo(prevBlockBackground, "change:_isInview", this.onPrevBlockBackgroundIsInviewChange.bind(this));
        }

        this.listenTo(Adapt, "device:changed", this.onDeviceChange);
        this.listenTo(Adapt, "device:resize", this.onDeviceResize);
        this.setUpObservers();
      }
    }, {
      key: "onIsInviewChange",
      value: function onIsInviewChange(model, isInview) {
        if (isInview) this.updateClipMask();
        var $items = this.$(".js-blockbg-item");
        var prevBlockBackground = this.model.get("_prevBlockBackground");

        if (prevBlockBackground) {
          if (isInview) {
            if (prevBlockBackground.get("_isInview")) {
              $items.removeClass("is-active").addClass("is-hidden");
            } else {
              $items.removeClass("is-hidden");
            }

            $items.toggle(isInview);
          } else {
              if (!prevBlockBackground.get("_isInview")) {
                $items.toggle(false);
              }
            }

          return;
        }

        $items.toggle(isInview);
      }
    }, {
      key: "onPrevBlockBackgroundIsInviewChange",
      value: function onPrevBlockBackgroundIsInviewChange(pbb, isInview) {
        if (!isInview && !this.model.get("_isInview")) {
          var $items = this.$(".js-blockbg-item");
          $items.toggle(false);
        }
      }
    }, {
      key: "setUpObservers",
      value: function setUpObservers() {
        var _this2 = this;

        var mainObserver = new IntersectionObserver(function (entries) {
          entries.forEach(function (entry) {
            _this2.model.set("_isInview", entry.isIntersecting);
          });
        }, {
          root: null,
          threshold: [0]
        });
        mainObserver.observe(this.$el[0]);
        var observer = new IntersectionObserver(function (entries) {
          entries.forEach(_this2.onGroupInview.bind(_this2));
        }, {
          root: null,
          rootMargin: "-" + VIEWPORT_MARGIN + " 0%",
          threshold: [0]
        });
        var $groups = this.blockView.$(".js-blockbg-group");
        $groups.each(function (i, e) {
          observer.observe(e);
        });
      }
    }, {
      key: "onGroupInview",
      value: function onGroupInview(entry) {
        var prevBlockBackground = this.model.get("_prevBlockBackground");
        var $group = $(entry.target);
        var index = $group.data("adapt-index");

        if (!entry.isIntersecting) {
          if (prevBlockBackground && prevBlockBackground.get("_isInview")) {
            this.$(".js-blockbg-item").filter("[data-adapt-index=" + index + "]").addClass("is-hidden");
          }

          return;
        }

        this.model.set("_activeItemIdx", index);

        if (prevBlockBackground) {
          this.$(".js-blockbg-item").filter("[data-adapt-index=" + index + "]").removeClass("is-hidden");
        }
      }
    }, {
      key: "onActiveItemIdxChange",
      value: function onActiveItemIdxChange(model, idx) {
        this.$(".js-blockbg-item").removeClass("is-active").filter("[data-adapt-index=" + idx + "]").addClass("is-active");
      }
    }]);

    return BlockBackgroundView;
  }(Backbone.View);

  var BlockBackgroundView$1 = __AMD("extensions/adapt-blockBackground/js/blockBackgroundView", BlockBackgroundView);

  var BlockBackgroundModel = function (_Backbone$Model) {
    _inherits(BlockBackgroundModel, _Backbone$Model);

    var _super = _createSuper(BlockBackgroundModel);

    function BlockBackgroundModel() {
      _classCallCheck(this, BlockBackgroundModel);

      return _super.apply(this, arguments);
    }

    _createClass(BlockBackgroundModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _activeItemIdx: null
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        if (!this.get("_items")) {
          throw "BlockBackground: Must have an '_items' array property defined.";
        }

        this.setUpId();
      }
    }, {
      key: "onParentPostRender",
      value: function onParentPostRender() {
        this.setUpGroups();
      }
    }, {
      key: "setUpId",
      value: function setUpId() {
        this.set("_id", this.get("_parent").get("_id") + "-bbg");
      }
    }, {
      key: "setUpGroups",
      value: function setUpGroups() {
        var _this = this;

        var componentRows = this.get("_parent").get("_componentRow").get("_children");
        var items = this.get("_items");
        var childIds = items.map(function (e) {
          return e._child;
        });
        var groups = [];
        var curGroup = [];
        componentRows.each(function (componentRow) {
          var title = componentRow.get("title");

          if (title || componentRow.getChildren().find(function (e) {
            return childIds.includes(e.get("_id"));
          })) {
            if (curGroup.length) {
              groups.push(new Backbone.Collection(curGroup));
            }

            curGroup = [];
          }

          curGroup.push(componentRow);
        });
        groups.push(new Backbone.Collection(curGroup));

        _.each(items, function (item, i) {
          item._componentRows = i < groups.length ? groups[i] : null;
        });

        if (items.length < groups.length) {
          Adapt.log.warn("BlockBackground: More component groups found than _items in " + this.get("_parent").get("_id") + " (groups: " + groups.length + ", _items: " + items.length + ") \n\n(There aren't enough _blockBackground._items elements).");

          for (var i = items.length; i < groups.length; i++) {
            var cloneItem = _.extend({}, items[items.length - 1]);

            cloneItem._componentRows = groups[i];
            items.push(cloneItem);
          }
        } else if (items.length > groups.length) {
            items = _.filter(items, function (item, i) {
              return Boolean(item._componentRows);
            });
            Adapt.log.error("BlockBackground: Could not find componentRows for all _items in " + this.get("_parent").get("_id") + " (groups: " + groups.length + ", _items: " + items.length + ") \n\n(There are too many _blockBackground._items for the amount of components in the block).");
          }

        _.each(items, function (item, i) {
          item._id = _this.get("_id") + "-" + i;

          item._componentRows.each(function (cr) {
            cr.set("_blockBackgroundItemId", item._id);
          });
        });

        this.set("_items", items);
      }
    }]);

    return BlockBackgroundModel;
  }(Backbone.Model);

  var BlockBackgroundModel$1 = __AMD("extensions/adapt-blockBackground/js/blockBackgroundModel", BlockBackgroundModel);

  var BlockBackground = function (_Backbone$Controller) {
    _inherits(BlockBackground, _Backbone$Controller);

    var _super = _createSuper(BlockBackground);

    function BlockBackground() {
      _classCallCheck(this, BlockBackground);

      return _super.apply(this, arguments);
    }

    _createClass(BlockBackground, [{
      key: "initialize",
      value: function initialize() {
        this._blockBackgrounds = new Backbone.Collection({
          model: BlockBackgroundModel$1
        });
        Adapt.on("app:dataReady", this.onDataReady.bind(this));
        Adapt.on("blockView:postRender", this.onBlockViewPostRender.bind(this));
        Adapt.on("componentRowView:postRender", this.onComponentRowViewPostRender.bind(this));
      }
    }, {
      key: "_legacyBlockBGFix",
      value: function _legacyBlockBGFix(blockModel) {
        var _blockModel$get;

        var legacyBG = (_blockModel$get = blockModel.get("_didasko")) === null || _blockModel$get === void 0 ? void 0 : _blockModel$get._backgroundImage;
        if (!legacyBG) return;
        blockModel.get("_didasko")._backgroundImage = undefined;

        if (blockModel.get("_blockBackground")) {
          throw "adapt-blockBackground: block " + blockModel.get("_id") + " has both \"_didasko\".\"_backgroundImage\" and \"_blockBackground\" properties.\n\nPlease use only \"_blockBackground\".";
        }

        blockModel.set("_blockBackground", {
          _isEnabled: true,
          _items: [{
            _graphic: {
              _large: legacyBG._large,
              _small: legacyBG._small
            }
          }]
        });
      }
    }, {
      key: "onDataReady",
      value: function onDataReady() {
        var _this = this;

        var prevBlockBB = undefined;
        Adapt.blocks.each(function (block) {
          _this._legacyBlockBGFix(block);

          var data = block.get("_blockBackground");

          if (!data || !data._isEnabled) {
            prevBlockBB = undefined;
            return;
          }

          if (!data._items || !data._items.length) {
            block.set("_blockBackground", new Backbone.Model(data));
            prevBlockBB = undefined;
            return;
          }
          data._parent = block;
          if (prevBlockBB) data._prevBlockBackground = prevBlockBB;
          var model = new BlockBackgroundModel$1(data);
          block.set("_blockBackground", model);

          _this._blockBackgrounds.push(model);

          prevBlockBB = model;
        });
      }
    }, {
      key: "onBlockViewPostRender",
      value: function onBlockViewPostRender(blockView) {
        var blockBackground = blockView.model.get("_blockBackground");
        if (!blockBackground || !blockBackground.get("_isEnabled")) return;
        var items = blockBackground.get("_items");

        if (!items || !items.length) {
          var color = blockBackground.get("_color");

          if (color) {
            blockView.$el.css("background-color", color);
          }

          return;
        }

        blockBackground.onParentPostRender();
        new BlockBackgroundView$1({
          model: blockBackground
        });
      }
    }, {
      key: "onComponentRowViewPostRender",
      value: function onComponentRowViewPostRender(componentRowView) {
        var bbgItemId = componentRowView.model.get("_blockBackgroundItemId");
        if (bbgItemId === undefined) return;
        componentRowView.$el.appendTo($(".js-blockbg-group[data-adapt-id=" + bbgItemId + "]"));
      }
    }]);

    return BlockBackground;
  }(Backbone.Controller);

  new BlockBackground();

  var CodeBoxFadeBlockView = function (_Backbone$View) {
    _inherits(CodeBoxFadeBlockView, _Backbone$View);

    var _super = _createSuper(CodeBoxFadeBlockView);

    function CodeBoxFadeBlockView() {
      _classCallCheck(this, CodeBoxFadeBlockView);

      return _super.apply(this, arguments);
    }

    _createClass(CodeBoxFadeBlockView, [{
      key: "events",
      value: function events() {
        return {
          "click .fadeblock__header": "onClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.$(".fadeblock__content").toggle(this.model.get("_isActive"));
        this.update();
        this.setupEventListeners();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(this.model, "change:_isActive", this.onActiveChange);
      }
    }, {
      key: "onClick",
      value: function onClick() {
        this.model.set("_isActive", !Boolean(this.model.get("_isActive")));
      }
    }, {
      key: "onActiveChange",
      value: function onActiveChange(model, isActive) {
        this.update();

        if (isActive) {
          this.$(".fadeblock__content").slideDown();
        } else {
          this.$(".fadeblock__content").slideUp();
        }
      }
    }, {
      key: "update",
      value: function update() {
        var isActive = this.model.get("_isActive");
        this.$el.toggleClass("is-active", isActive);
        this.$(".fadeblock__header").toggleClass("is-active", isActive);
      }
    }]);

    return CodeBoxFadeBlockView;
  }(Backbone.View);
  var CodeBoxFadeBlockView$1 = __AMD("extensions/adapt-codeBox/js/codeBoxFadeBlockView", CodeBoxFadeBlockView);

  require.config({
    shim: {
      "libraries/google-code-prettify/prettify": {
        exports: "PR"
      }
    }
  });
  var DESKTOP_BOOKSHELF_TAB_STRING = "&nbsp;&nbsp;";
  var LANG_SCRIPTS = ["css", "lua", "basic", "apollo"];

  var CodeBoxView = function (_Backbone$View) {
    _inherits(CodeBoxView, _Backbone$View);

    var _super = _createSuper(CodeBoxView);

    function CodeBoxView() {
      _classCallCheck(this, CodeBoxView);

      return _super.apply(this, arguments);
    }

    _createClass(CodeBoxView, [{
      key: "className",
      value: function className() {
        var sizingClasses = this.model.get("_sizing");
        var classes = ["codebox", this.model.get("_classes") || "", sizingClasses || "", sizingClasses ? "has-sizing" : "", "is-" + this.model.get("_type"), "lang-" + this.model.get("_lang"), this.model.get("_wrappingEnabled") ? "wrapping-enabled" : ""];
        return classes.join(" ");
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          "data-codebox-lang": this.model.get("_lang") || "auto",
          "style": this.model.get("_style") || ""
        };
      }
    }, {
      key: "tagName",
      value: function tagName() {
        return "div";
      }
    }, {
      key: "events",
      value: function events() {}
    }, {
      key: "initialize",
      value: function initialize() {
        this.escapeHTMLContent();
        this.setupEventListeners();
        this.render();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {}
    }, {
      key: "renderContent",
      value: function renderContent() {
        var template = Handlebars.templates['codeBox'];
        this.$el.html(new Handlebars.SafeString(template(this.model.toJSON())).string);
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        this.renderContent();

        _.debounce(function () {
          _this.$el.closest(".figure").addClass("is-figure-codebox");
        }, 0)();

        if (Adapt.config.get('_isDesktopBookshelf')) {
          this.$(".tab").html(DESKTOP_BOOKSHELF_TAB_STRING);
        }

        this.renderPrettify();
      }
    }, {
      key: "escapeHTMLContent",
      value: function escapeHTMLContent() {
        var lang = this.model.get("_lang");
        if (lang != "html" && lang != "xml" && lang != "xhtml") return;

        var _type = this.model.get("_type");

        var content = this.model.get("content");

        if (_type == "console") {
          this.model.set("content", content.replace(Adapt.codeBox.BR_REGEX, ""));
          return;
        }
      }
    }, {
      key: "renderPrettify",
      value: function renderPrettify() {
        var _this2 = this;

        if (this.model.get("_type") !== "code") return;
        var lang = this.model.get("_lang");
        if (lang == "none") return;
        if (lang == "pseudo" || lang == "pseudocode") return;
        var langRequired = [];
        if (LANG_SCRIPTS.includes(lang)) langRequired.push("libraries/google-code-prettify/lang-" + lang);

        require(["libraries/google-code-prettify/prettify"], function (Prettify) {
          require(langRequired, function () {
            var $content = _this2.$(".js-codebox-content");

            $content.html(PR.prettyPrintOne($content.html(), lang || undefined));

            _this2.renderLineContainers();
          });
        });
      }
    }, {
      key: "_getLinesHTMLArray",
      value: function _getLinesHTMLArray(blockHTML) {
        var html = blockHTML;
        var htmlLines;
        htmlLines = html.split(Adapt.codeBox.BR_REGEX);
        var arr = [];
        if (htmlLines.length && !htmlLines[0].trim()) htmlLines.shift();
        if (htmlLines.length >= 1 && !htmlLines[htmlLines.length - 1].trim()) htmlLines.pop();

        _.each(htmlLines, function (htmlLine, idx) {
          var h = htmlLine;
          var isEmpty = false;

          if ($(h).text().trim().length == 0) {
            if (h.trim().length == 0) {
              h = "\n";
              isEmpty = true;
            } else {
                h.replace(/(<\/)(?!.*<\/)/g, "\n</");
                isEmpty = true;
              }
          }

          arr.push('<div class="codebox__line' + (isEmpty ? ' is-empty' : '') + '">' + h + '</div>');
        });

        return arr;
      }
    }, {
      key: "renderLineContainers",
      value: function renderLineContainers() {
        var _this3 = this;

        var $codeBoxInner = this.$(".js-codebox-content");
        var htmlLines = [];
        var $divs = $codeBoxInner.children("div");

        if (!$divs.length) {
          htmlLines = this._getLinesHTMLArray($codeBoxInner.html());
        } else {
            var $first = $($divs.first().prevUntil("div").get().reverse());

            if ($first.length) {
              htmlLines = htmlLines.concat(this._getLinesHTMLArray($first.wrapAll("<div>").parent().html()));
            }

            $divs.each(function (i, e) {
              var openingTagHtml = e.outerHTML.match(/^<div(>|.*?[^?]>)/);

              if (!openingTagHtml) {
                Adapt.log.error("codeBoxView.js: could not determine opening <div> tag HTML for the following element:", $(e));
              }

              openingTagHtml = openingTagHtml[0];
              htmlLines.push(openingTagHtml);
              htmlLines = htmlLines.concat(_this3._getLinesHTMLArray($(e).html()));
              htmlLines.push("</div>");
              var $next = $(e).nextUntil("div");

              if ($next.length) {
                htmlLines = htmlLines.concat(_this3._getLinesHTMLArray($next.wrapAll("<div>").parent().html()));
              }
            });
          }

        var $codeBoxLines = $('<div class="codebox__lines">');
        $codeBoxLines.html(htmlLines.join(""));
        $codeBoxLines.find(".codebox__line").each(function (i, e) {
          $(e).attr("data-line-num", i + 1);
        });
        this.$(".js-codebox-content").empty().append($codeBoxLines);
        this.renderFadeBlocks();
      }
    }, {
      key: "renderFadeBlocks",
      value: function renderFadeBlocks() {
        var $fadeBlocks = this.$(".fade.is-accordion");
        if (!$fadeBlocks.length) return;
        $fadeBlocks.each(function (i, e) {
          $(e).addClass("fadeblock");
          var $headerLine = $(e).find(".codebox__line:first-child");
          var $contentLines = $(e).find(".codebox__line:not(:first-child)");
          $headerLine.wrapAll("<div class='fadeblock__header' title='View omitted code'>");
          $contentLines.wrapAll("<div class='fadeblock__content'>");
          new CodeBoxFadeBlockView$1({
            el: $(e),
            model: new Backbone.Model({
              _isActive: false
            })
          });
        });
      }
    }]);

    return CodeBoxView;
  }(Backbone.View);
  var CodeBoxView$1 = __AMD("extensions/adapt-codeBox/js/codeBoxView", CodeBoxView);

  var CodeBoxIframeView = function (_CodeBoxView) {
    _inherits(CodeBoxIframeView, _CodeBoxView);

    var _super = _createSuper(CodeBoxIframeView);

    function CodeBoxIframeView() {
      _classCallCheck(this, CodeBoxIframeView);

      return _super.apply(this, arguments);
    }

    _createClass(CodeBoxIframeView, [{
      key: "events",
      value: function events() {
        return _.extend({}, _get(_getPrototypeOf(CodeBoxIframeView.prototype), "events", this), {});
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        _get(_getPrototypeOf(CodeBoxIframeView.prototype), "setupEventListeners", this).apply(this, arguments);

        Adapt.on("device:resize", this.updateIframeSize.bind(this));
      }
    }, {
      key: "renderContent",
      value: function renderContent() {
        var template = Handlebars.templates['codeBoxIframe'];
        this.$el.html(new Handlebars.SafeString(template(this.model.toJSON())).string);
        this.$(".js-codebox-iframe").on("load", this.onIframeLoad.bind(this));
      }
    }, {
      key: "waitUpdateIframeContent",
      value: function waitUpdateIframeContent($iframe) {
        var _this = this;

        return new Promise(function (resolve) {
          var doc = $iframe[0].contentWindow.document;

          var content = _this.model.get("content");

          var scripts = [];
          content = content.replace(/<script.*?src=(['"]).*?\1.*?(<\/script>|\/>)/g, function (match) {
            var src = match.match(/src=(['"])(.*?)\1/)[2];
            scripts.push(src);
            return "";
          });
          var inlineScripts = [];
          content = content.replace(/<script.*?>*.?>((.|\n)*)<\/\s*?script>/gm, function (match, $1) {
            inlineScripts.push($1);
            return "";
          });

          if (Adapt.isEpubMode()) {
            content = "<!--!IGNORE-XHTML!-->" + content;
          }

          doc.body.innerHTML = content;
          doc.documentElement.className = $("html")[0].className;

          _.each(scripts, function (src) {
            var s = doc.createElement("script");
            s.src = src;
            doc.body.appendChild(s);
          });

          _.each(inlineScripts, function (code) {
            var s = doc.createElement("script");
            s.type = 'text/javascript';

            try {
              s.appendChild(doc.createTextNode(code));
              doc.body.appendChild(s);
            } catch (e) {
              s.text = code;
              doc.body.appendChild(s);
            }
          });

          $iframe.contents().ready(function () {
            $iframe.contents().off("ready");

            if (doc.readyState === "complete" || doc.readyState === "loaded") {
              resolve();
              return;
            }

            doc.addEventListener("DOMContentLoaded", function () {
              resolve();
            }, {
              once: true
            });
          });
        });
      }
    }, {
      key: "onIframeLoad",
      value: function () {
        var _onIframeLoad = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          var $iframe, codeBox;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  $iframe = this.$(".js-codebox-iframe");
                  _context.next = 3;
                  return this.waitUpdateIframeContent($iframe);

                case 3:
                  codeBox = Adapt.course.get("_codeBox");

                  if (codeBox._formSubmitMessageEnabled === true) {
                    $iframe.contents().find("form").off("submit").on("submit", function (event) {
                      event.preventDefault();
                      alert("Form submitted!");
                    });
                  }

                  this.updateIframeSize();

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function onIframeLoad() {
          return _onIframeLoad.apply(this, arguments);
        }

        return onIframeLoad;
      }()
    }, {
      key: "waitIframeImgLoad",
      value: function waitIframeImgLoad($iframe) {
        return new Promise(function (resolve) {
          var $imgs = $iframe.contents().find("img");
          var remainingImages = $imgs.length;

          if (remainingImages == 0) {
            resolve();
            return;
          }

          var decrementCounter = function () {
            remainingImages--;
            if (remainingImages == 0) resolve();
          };

          $imgs.each(function (i, e) {
            if (e.complete) decrementCounter();else $(e).one("load", function () {
              decrementCounter();
            });
          });
        });
      }
    }, {
      key: "updateIframeSize",
      value: function () {
        var _updateIframeSize = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
          var _this2 = this;

          var $iframe, $clone, height;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  $iframe = this.$(".js-codebox-iframe");
                  $iframe.css("height", "");

                  if (!$iframe.is(":hidden")) {
                    _context3.next = 10;
                    break;
                  }

                  $clone = $iframe.clone();
                  $clone.off("load");
                  $clone.css({
                    "height": "0px",
                    "max-height": "0px"
                  });
                  $clone.on("load", _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
                    var width, height;
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            width = $iframe.actual("outerWidth");
                            $clone.width(width);
                            _context2.next = 4;
                            return _this2.waitUpdateIframeContent($clone);

                          case 4:
                            _context2.next = 6;
                            return _this2.waitIframeImgLoad($clone);

                          case 6:
                            height = $clone[0].contentWindow.document.body.scrollHeight;
                            $iframe.height(height);
                            $clone.remove();

                          case 9:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  })));
                  $("body").append($clone);
                  _context3.next = 14;
                  break;

                case 10:
                  _context3.next = 12;
                  return this.waitIframeImgLoad($iframe);

                case 12:
                  $iframe.css({
                    "height": "0px"
                  });

                  try {
                    height = $iframe[0].contentWindow.document.body.scrollHeight;
                    $iframe.height(height);
                  } catch (err) {
                    Adapt.log.error(err, $iframe);
                  }

                case 14:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function updateIframeSize() {
          return _updateIframeSize.apply(this, arguments);
        }

        return updateIframeSize;
      }()
    }]);

    return CodeBoxIframeView;
  }(CodeBoxView$1);
  var CodeBoxIframeView$1 = __AMD("extensions/adapt-codeBox/js/codeBoxIframeView", CodeBoxIframeView);

  Adapt.on('router:page', function () {
    Handlebars__default['default'].registerHelperEl("code", function () {
      var context = arguments[arguments.length - 1];
      var hash = Handlebars__default['default'].getContextHash.apply(this, arguments);

      var _default = Adapt.course.get("_codeBox");

      var _lang = hash.lang ? hash.lang : _default ? _default._lang : "";

      var modelJSON = {
        content: context.fn(this),
        _classes: hash.class,
        _style: hash.style,
        _filename: hash.filename,
        _type: "code",
        _lang: _lang,
        _wrappingEnabled: Boolean(hash.wrapping)
      };
      return new CodeBoxView$1({
        model: new Backbone.Model(modelJSON)
      }).$el;
    });
    Handlebars__default['default'].registerHelperEl("console", function () {
      var context = arguments[arguments.length - 1];
      var hash = context.hash;

      var _default = Adapt.course.get("_codeBox");

      var _lang = hash.lang ? hash.lang : _default ? _default._lang : "";

      var modelJSON = {
        content: context.fn(this),
        _classes: hash.class,
        _style: hash.style,
        _type: "console",
        _lang: _lang,
        _wrappingEnabled: Boolean(hash.wrapping)
      };
      var view = _lang == "html" ? CodeBoxIframeView$1 : CodeBoxView$1;
      return new view({
        model: new Backbone.Model(modelJSON)
      }).$el;
    });
  });
  var helpers$6 = {
    pseudocode: function () {
      var context = arguments[arguments.length - 1];
      return "<span class='codebox__pseudocode'>" + context.fn(this) + "</span>";
    }
  };

  for (var name$6 in helpers$6) {
    if (!helpers$6.hasOwnProperty(name$6)) continue;
    Handlebars__default['default'].registerHelper(name$6, helpers$6[name$6]);
  }

  Adapt.codeBox = {
    BR_REGEX: new RegExp(/<br\s+[^>]*?class="br"\s*.*?\/?>/, "g"),
    TAB_REGEX: new RegExp(/<span[^>]*?class="tab"\s*.*?>.*?<\/span>/, "g"),
    toString: function (codeString) {
      if (typeof codeString !== "string") throw "adapt-codeBox: codeString must be a valid string.";
      var s = codeString;
      s = s.replace(this.BR_REGEX, "\n");
      s = s.replace(this.TAB_REGEX, "\t");
      return s;
    },
    getLines: function (codeString) {
      if (typeof codeString !== "string") throw "adapt-codeBox: codeString must be a valid string.";
      var lines = codeString.split(this.BR_REGEX);
      return lines;
    }
  };

  var ComponentRowModel = function (_Backbone$Model) {
    _inherits(ComponentRowModel, _Backbone$Model);

    var _super = _createSuper(ComponentRowModel);

    function ComponentRowModel() {
      _classCallCheck(this, ComponentRowModel);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentRowModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _index: 0,
          _children: undefined,
          _parent: undefined,
          _prevSibling: undefined,
          _isEnabled: true,
          _isVisible: true,
          _isComplete: false,
          _isQuestionType: false,
          _isReverse: false,
          _isSingle: false,
          title: "",
          _hasDivider: false
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _this = this;

        this.setUpTitle();
        this.setUpReverse();
        this.setUpDivider();
        this.setUpQuestionType();
        this.setUpIsComplete();
        this.set("_isSingle", this.get("_children").length <= 1);
        this.setUpSizing();
        this.listenTo(this.get("_parent").get("_componentRow"), "change:_isEnabled", this.onParentEnabledChange);
        this.get("_children").each(function (model) {
          model.set("_componentRow", _this);
        });
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        return this.get("_children");
      }
    }, {
      key: "isAvailable",
      value: function isAvailable() {
        var available = this.getChildren().find(function (model) {
          return model.get("_isAvailable") !== false;
        });
        return Boolean(available);
      }
    }, {
      key: "setUpSizing",
      value: function setUpSizing() {
        var _this2 = this;

        if (!Adapt.sizing) return;
        this.get("_children").each(function (childModel) {
          var sizing = childModel.get("_sizing");

          if (sizing) {
            _this2.set("_parSizingClasses", Adapt.sizing.getParentClasses(sizing));
          }
        });
      }
    }, {
      key: "onParentEnabledChange",
      value: function onParentEnabledChange(ComponentRow, _isEnabled) {
        this.set("_isEnabled", _isEnabled);
      }
    }, {
      key: "setUpIsComplete",
      value: function setUpIsComplete() {
        var children = this.get("_children");
        this.updateIsComplete();
        this.listenTo(children, "change:_isComplete", this.updateIsComplete.bind(this));
      }
    }, {
      key: "updateIsComplete",
      value: function updateIsComplete() {
        var isComplete = true;
        var children = this.get("_children");
        children.find(function (child) {
          if (!child.get("_isComplete")) {
            isComplete = false;
            return true;
          }
        });
        this.set("_isComplete", isComplete);
        return isComplete;
      }
    }, {
      key: "setUpTitle",
      value: function setUpTitle() {
        var componentWithTitle = _.find(this.get("_children").models, function (c) {
          return c.get("title") || c.get("displayTitle");
        });

        if (!componentWithTitle) return;
        var title = componentWithTitle.get("title") || componentWithTitle.get("displayTitle");
        this.set("title", title);
        this.get("_parent").set("_blockTitle", title);
      }
    }, {
      key: "setUpReverse",
      value: function setUpReverse() {
        var children = this.get("_children");
        if (children.length != 2) return;

        if (children.models[0].get("_layout") == "right") {
          this.set("_isReverse", true);
        }
      }
    }, {
      key: "setUpDivider",
      value: function setUpDivider() {
        var prevCR = this.get("_prevSibling");
        if (!prevCR) return;

        if (this.get("_children").find(function (m) {
          return m.get("_hasDivider");
        })) {
          this.set("_hasDivider", true);
          return;
        }

        if (this.get("_children").find(function (m) {
          return m.get("_hasDivider") === false;
        })) {
          this.set("_hasDivider", false);
          return;
        }

        if (prevCR.get("_children").length == 2 || prevCR.get("_children").length != this.get("_children").length || this.get("title")) {
          if (!this.get("title") && this.get("_children").length < 2) return;
          this.set("_hasDivider", true);
        }
      }
    }, {
      key: "setUpQuestionType",
      value: function setUpQuestionType() {
        this.set("_isQuestionType", Boolean(this.get("_children").find(function (child) {
          return child.get("_isQuestionType");
        })));
      }
    }]);

    return ComponentRowModel;
  }(Backbone.Model);

  var ComponentRowModel$1 = __AMD("extensions/adapt-componentRow/js/componentRowModel", ComponentRowModel);

  var ComponentRowCollection = function (_Backbone$Collection) {
    _inherits(ComponentRowCollection, _Backbone$Collection);

    var _super = _createSuper(ComponentRowCollection);

    function ComponentRowCollection() {
      _classCallCheck(this, ComponentRowCollection);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentRowCollection, [{
      key: "initialize",
      value: function initialize(models, options) {
        this.listenTo(Adapt, 'remove', this.reset);
        if (!options || !options.blockModel) return;
        this._blockModel = options.blockModel;
        this.repopulate();
      }
    }, {
      key: "repopulate",
      value: function repopulate() {
        var _this = this;

        this.reset();
        if (!this._blockModel) return;
        var blockModel = this._blockModel;
        var componentModels = blockModel.getChildren().models;
        var curPair = [];

        _.each(componentModels, function (componentModel) {
          var _layout = componentModel.get("_layout");

          if (_this.isComponentSingleton(componentModel)) {
            if (curPair.length) {
              _this.pairComponents([curPair[0]], blockModel);
            }

            _this.pairComponents([componentModel], blockModel);

            curPair = [];
            return true;
          }

          if (curPair.length == 0) {
            curPair.push(componentModel);
            return true;
          }

          if (_layout != curPair[0].get("_layout")) {
            curPair.push(componentModel);

            _this.pairComponents(curPair, blockModel);

            curPair = [];
            return true;
          }

          _this.pairComponents([curPair[0]], blockModel);

          curPair = [];
          curPair.push(componentModel);
        });

        if (curPair.length) {
          this.pairComponents(curPair, blockModel);
        }
      }
    }, {
      key: "isComponentSingleton",
      value: function isComponentSingleton(componentModel) {
        if (componentModel.get("_layout") == "full") return true;
        var cr = componentModel.get("_componentRow");
        if (!cr) return false;
        return Boolean(cr._isSingle);
      }
    }, {
      key: "pairComponents",
      value: function pairComponents(componentArray, blockModel) {
        var crModel = new ComponentRowModel$1({
          _index: this.length,
          _children: new Backbone.Collection(componentArray),
          _parent: blockModel,
          _prevSibling: this.last() || undefined,
          _isEnabled: blockModel.get("_componentRow").get("_isEnabled") !== false
        });
        this.add(crModel);
        return crModel;
      }
    }]);

    return ComponentRowCollection;
  }(Backbone.Collection);

  var ComponentRowCollection$1 = __AMD("extensions/adapt-componentRow/js/componentRowCollection", ComponentRowCollection);

  var ComponentRowView = function (_Backbone$View) {
    _inherits(ComponentRowView, _Backbone$View);

    var _super = _createSuper(ComponentRowView);

    function ComponentRowView() {
      _classCallCheck(this, ComponentRowView);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentRowView, [{
      key: "className",
      value: function className() {
        var classNames = ["componentrow", this.model.get("title") ? "componentrow-has-title" : "", this.model.get("_hasDivider") ? "componentrow-has-divider" : "", this.model.get("_isReverse") ? "componentrow-is-reverse" : "componentrow-is-not-reverse", this.model.get("_isSingle") ? "componentrow-is-single" : "componentrow-is-double"];
        this.model.get("_children").each(function (childModel) {
          classNames.push("componentrow-contains-" + childModel.get("_component"));
        });
        return classNames.join(' ');
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          "data-componentrow-index": this.model.get("_index")
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.validateChildren();
        this.setUpEventListeners();
        this.render();
      }
    }, {
      key: "validateChildren",
      value: function validateChildren() {
        if (this.model.get("_isSingle") && this.model.get("_children").first().get("_layout") !== "full") {
          Adapt.log.error("componentRow:\nComponent with block parent \"" + this.model.get("_parent").get("_id") + "\" must have its \"layout\" property be \"full\" (it is the only component in its row).");
        }
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model, "change:_isEnabled", this.onEnabledChange.bind(this));
        this.listenTo(this.model, "change:_isVisible", this.onVisibleChange.bind(this));
        this.listenTo(this.model, "change:_hasDivider", this.onDividerChange.bind(this));
      }
    }, {
      key: "onDividerChange",
      value: function onDividerChange(model, hasDivider) {
        this.$el.toggleClass("componentrow-has-divider", hasDivider);
      }
    }, {
      key: "onVisibleChange",
      value: function onVisibleChange(model, isVisible) {
        if (isVisible) {
          this.$el.slideDown();
        } else {
          this.$el.slideUp();
        }
      }
    }, {
      key: "onEnabledChange",
      value: function onEnabledChange(model, isEnabled) {
        if (isEnabled) return;
        var $container = this.$el.closest(".component__container");
        this.model.get("_children").each(function (child) {
          Adapt.findViewByModelId(child.get("_id")).$el.appendTo($container);
        });
        this.remove();
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        this.$el.html(Handlebars.templates["componentRow"](this.model.toJSON()));
        if (!this.model.get("_isVisible")) this.$el.hide();

        _.delay(function () {
          Adapt.trigger("componentRowView:postRender", _this);
        });
      }
    }]);

    return ComponentRowView;
  }(Backbone.View);

  var ComponentRowView$1 = __AMD("extensions/adapt-componentRow/js/componentRowView", ComponentRowView);

  var ComponentRow = function (_Backbone$Controller) {
    _inherits(ComponentRow, _Backbone$Controller);

    var _super = _createSuper(ComponentRow);

    function ComponentRow() {
      _classCallCheck(this, ComponentRow);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentRow, [{
      key: "initialize",
      value: function initialize() {
        Adapt.on("blockView:preRender", this.setupComponentRowData.bind(this));
        Adapt.on("blockView:postRender", this.renderComponentRowViews.bind(this));
        Adapt.on("componentView:postRender", this.onComponentPostRender.bind(this));
      }
    }, {
      key: "setupComponentRowData",
      value: function setupComponentRowData(blockView) {
        var _arguments = arguments,
            _this = this;

        var blockModel = blockView.model;
        var _getChildren = blockModel.getChildren;

        if (!_getChildren.prototype._componentRowOverride) {
          blockModel.getChildren = function () {
            _getChildren.apply(blockModel, _arguments);

            if (blockModel._childrenCollection.length === 2) {
              blockModel._childrenCollection.comparator = function (model) {
                return parseInt(model.cid.substring(1));
              };

              blockModel._childrenCollection.sort();

              blockModel.setChildren(blockModel._childrenCollection);
            }

            return blockModel._childrenCollection;
          };

          blockModel.getChildren.prototype._componentRowOverride = true;
        }

        blockModel.set("_componentRow", new Backbone.Model(_.extend({
          _isEnabled: true
        }, blockModel.get("_componentRow") || {})));
        var componentRowCollection = new ComponentRowCollection$1(null, {
          blockModel: blockModel
        });
        blockModel.get("_componentRow").set("_children", componentRowCollection);
        this.listenTo(blockModel.get("_componentRow"), "change:_isEnabled", function (componentRow, isEnabled) {
          if (!isEnabled) return;

          if (isEnabled) {
            _this.appendComponentRowViews(blockView);

            componentRow.get("_children").each(function (componentRowModel) {
              componentRowModel.get("_children").each(function (model) {
                _this.appendComponentView(Adapt.findViewByModelId(model.get("_id")));
              });
            });
          }
        });
      }
    }, {
      key: "renderComponentRowViews",
      value: function renderComponentRowViews(blockView) {
        var blockModel = blockView.model;
        var blockComponentRow = blockModel.get("_componentRow");
        if (blockComponentRow && blockComponentRow.get("_isEnabled") === false) return;
        this.appendComponentRowViews(blockView);
      }
    }, {
      key: "onComponentPostRender",
      value: function onComponentPostRender(componentView) {
        this.appendComponentView(componentView);
      }
    }, {
      key: "appendComponentRowViews",
      value: function appendComponentRowViews(blockView) {
        var $container = blockView.$(".component__container");

        _.each(blockView.model.get("_componentRow").get("_children").models, function (model) {
          if (!model.isAvailable()) return;
          $container.append(new ComponentRowView$1({
            model: model
          }).$el);
        });
      }
    }, {
      key: "appendComponentView",
      value: function appendComponentView(componentView) {
        if (componentView.isClone) return;

        var _componentRow = componentView.model.get("_componentRow");

        if (!_componentRow) return;
        var isFirst = _componentRow.get("_children").first().get("_id") == componentView.model.get("_id");
        var $container = componentView.$el.closest(".component__container");
        $container = $container.find("[data-componentrow-index='" + _componentRow.get("_index") + "'] .js-componentrow-items");
        if (isFirst) $container.prepend(componentView.$el);else $container.append(componentView.$el);
      }
    }]);

    return ComponentRow;
  }(Backbone.Controller);

  new ComponentRow();

  var AssessmentView = {
    postRender: function () {
      ArticleView$1.prototype.postRender.call(this);

      if (this.model.isAssessmentEnabled()) {
        this._setupEventListeners();

        var config = this.model.getConfig();

        if (config && config._questions && config._questions._canShowMarking === false) {
          this.$el.addClass('has-no-marking');
        }
      }

      this.$el.addClass('is-assessment');
    },
    _setupEventListeners: function () {
      this.listenTo(Adapt, {
        'assessments:complete': this._onAssessmentComplete,
        'assessments:reset': this._onAssessmentReset,
        remove: this._onRemove
      });
    },
    _removeEventListeners: function () {
      this.stopListening(Adapt, {
        'assessments:complete': this._onAssessmentComplete,
        'assessments:reset': this._onAssessmentReset
      });
    },
    _onAssessmentComplete: function (state, model) {
      if (state.id != this.model.get('_assessment')._id) return;
      console.log('assessment complete', state, model);
    },
    _onAssessmentReset: function (state, model) {
      if (state.id != this.model.get('_assessment')._id) return;
      console.log('assessment reset', state, model);
    },
    _onRemove: function () {
      this._removeEventListeners();
    }
  };
  var AdaptAssessmentArticleView = __AMD("extensions/adapt-contrib-assessment/js/adapt-assessmentArticleView", AssessmentView);

  var QuestionBank = function (quizBankid, articleId, numQuestionBlocks, uniqueQuestions) {
    this._id = quizBankid;
    this._articleId = articleId;
    this._numQuestionBlocks = numQuestionBlocks;
    this._uniqueQuestions = uniqueQuestions;
    this.questionBlocks = [];
    this.unUsedQuestionBlocks = undefined;
    this.usedQuestionBlocks = [];
  };

  QuestionBank.prototype = {
    getID: function () {
      return this._id;
    },
    addBlock: function (block) {
      this.questionBlocks.push(block);
    },
    getRandomQuestionBlocks: function () {
      this.checkResetUnunsedBlocks();
      var questionBlocks = [];
      var usedQuestionBlocks = this.usedQuestionBlocks.slice(0);

      for (var i = 0; i < this._numQuestionBlocks; i++) {
        var question = this.getRandomQuestion();

        if (question !== undefined) {
          questionBlocks.push(question);
        } else {
          if (usedQuestionBlocks.length === 0) break;
          var index = Math.floor(Math.random() * (usedQuestionBlocks.length - 1));
          question = usedQuestionBlocks.splice(index, 1)[0];
          questionBlocks.push(question);
        }
      }

      return questionBlocks;
    },
    checkResetUnunsedBlocks: function () {
      if (this.unUsedQuestionBlocks !== undefined && this._uniqueQuestions) return;
      this.unUsedQuestionBlocks = this.questionBlocks.slice(0);
    },
    getRandomQuestion: function () {
      if (this.unUsedQuestionBlocks !== undefined && this.unUsedQuestionBlocks.length < 1) {
        console.warn('assessment:' + this._articleId + ' No more unique questions for _assessment._quizBankID ' + this._id);
        return undefined;
      }

      var index = Math.round(Math.random() * (this.unUsedQuestionBlocks.length - 1));
      var questionBlock = this.unUsedQuestionBlocks[index];
      this.usedQuestionBlocks.push(questionBlock);
      this.unUsedQuestionBlocks.splice(index, 1);
      return questionBlock;
    }
  };
  var QuestionBank$1 = __AMD("extensions/adapt-contrib-assessment/js/adapt-assessmentQuestionBank", QuestionBank);

  var givenIdCount = 0;
  var assessmentConfigDefaults = {
    _isEnabled: true,
    _questions: {
      _resetType: 'soft',
      _canShowFeedback: false,
      _canShowMarking: false,
      _canShowModelAnswer: false
    },
    _suppressMarking: false,
    _isPercentageBased: true,
    _scoreToPass: 100,
    _includeInTotalScore: true,
    _assessmentWeight: 1,
    _isResetOnRevisit: true,
    _reloadPageOnReset: true,
    _attempts: 'infinite',
    _allowResetIfPassed: false
  };
  var AssessmentModel = {
    _postInitialize: function () {
      if (!this.isAssessmentEnabled()) return;
      var assessmentConfig = this.getConfig();

      _.extend(this, {
        _currentQuestionComponents: null,
        _originalChildModels: null,
        _questionBanks: null,
        _forceResetOnRevisit: false
      });

      var attemptsLeft;

      switch (assessmentConfig._attempts) {
        case 'infinite':
        case 0:
        case undefined:
        case -1:
        case null:
          attemptsLeft = 'infinite';
          break;

        default:
          attemptsLeft = assessmentConfig._attempts;
          break;
      }

      this.set({
        _currentQuestionComponentIds: [],
        _assessmentCompleteInSession: false,
        _attemptInProgress: false,
        _isAssessmentComplete: false,
        _numberOfQuestionsAnswered: 0,
        _lastAttemptScoreAsPercent: 0,
        _attempts: attemptsLeft,
        _attemptsLeft: attemptsLeft,
        _attemptsSpent: 0
      });
      this.listenToOnce(Adapt, 'app:dataReady', this._onDataReady);
      this.listenTo(Adapt, 'remove', this._onRemove);
    },
    init: function () {
      this._originalChildModels = this.getChildren().models;
      this._currentQuestionComponents = this.findDescendantModels('components', {
        where: {
          _isQuestionType: true
        }
      });
      this.set('_currentQuestionComponentIds', this._currentQuestionComponents.map(function (comp) {
        return comp.get('_id');
      }));

      this._setAssessmentOwnershipOnChildrenModels();
    },
    _setAssessmentOwnershipOnChildrenModels: function () {
      var assessmentConfig = this.get('_assessment');
      var childConfig = {
        _isPartOfAssessment: true,
        _assessmentId: assessmentConfig._id
      };

      for (var i = 0, l = this._originalChildModels.length; i < l; i++) {
        var blockModel = this._originalChildModels[i];
        blockModel.set(childConfig);
        blockModel.setOnChildren(childConfig);
      }
    },
    _onDataReady: function () {
      Adapt.assessment.register(this);
    },
    _setupAssessmentData: function (force, callback) {
      var assessmentConfig = this.getConfig();
      var state = this.getState();
      var shouldResetAssessment = !this.get('_attemptInProgress') && !state.isPass || force === true;
      var shouldResetQuestions = assessmentConfig._isResetOnRevisit && (state.allowResetIfPassed || !state.isPass) || force === true;

      if (shouldResetAssessment || shouldResetQuestions) {
        Adapt.trigger('assessments:preReset', this.getState(), this);
      }

      var quizModels;

      if (shouldResetAssessment) {
        this.set({
          _numberOfQuestionsAnswered: 0,
          _isAssessmentComplete: false,
          _assessmentCompleteInSession: false,
          _score: 0
        });
        this.getChildren().models = this._originalChildModels;

        if (assessmentConfig._banks && assessmentConfig._banks._isEnabled && assessmentConfig._banks._split.length > 1) {
          quizModels = this._setupBankedAssessment();
        } else if (assessmentConfig._randomisation && assessmentConfig._randomisation._isEnabled) {
          quizModels = this._setupRandomisedAssessment();
        }
      }

      if (!quizModels) {
        quizModels = this.getChildren().models;
      } else if (quizModels.length === 0) {
        quizModels = this.getChildren().models;
        console.warn('assessment: Not enough unique questions to create a fresh assessment, using last selection');
      }

      this.getChildren().models = quizModels;
      this._currentQuestionComponents = this.findDescendantModels('components', {
        where: {
          _isQuestionType: true
        }
      });
      this.set('_currentQuestionComponentIds', this._currentQuestionComponents.map(function (comp) {
        return comp.get('_id');
      }));

      if (shouldResetAssessment || shouldResetQuestions) {
        this._resetQuestions(function () {
          this.set('_attemptInProgress', true);
          Adapt.trigger('assessments:reset', this.getState(), this);
          finalise.apply(this);
        }.bind(this));
      } else {
        finalise.apply(this);
      }

      function finalise() {
        if (!state.isComplete) {
          this.set('_attemptInProgress', true);
        }

        this._overrideQuestionComponentSettings();

        this._setupQuestionListeners();

        this._checkNumberOfQuestionsAnswered();

        this._updateQuestionsState();

        Adapt.assessment.saveState();
        if (typeof callback == 'function') callback.apply(this);

        if (shouldResetAssessment || shouldResetQuestions) {
          Adapt.trigger('assessments:postReset', this.getState(), this);
        }
      }
    },
    _setupBankedAssessment: function () {
      var assessmentConfig = this.getConfig();

      this._setupBanks();

      var questionModels = [];

      for (var bankId in this._questionBanks) {
        if (this._questionBanks.hasOwnProperty(bankId)) {
          var questionBank = this._questionBanks[bankId];
          var questions = questionBank.getRandomQuestionBlocks();
          questionModels = questionModels.concat(questions);
        }
      }

      if (assessmentConfig._banks._randomisation) {
        questionModels = _.shuffle(questionModels);
      }

      return questionModels;
    },
    _setupBanks: function () {
      var assessmentConfig = this.getConfig();

      var banks = assessmentConfig._banks._split.split(',');

      var bankId;
      this._questionBanks = [];

      for (var i = 0, l = banks.length; i < l; i++) {
        var bank = banks[i];
        bankId = i + 1;
        var questionBank = new QuestionBank$1(bankId, this.get('_id'), bank, true);
        this._questionBanks[bankId] = questionBank;
      }

      var children = this.getChildren().models;

      for (var j = 0, count = children.length; j < count; j++) {
        var blockModel = children[j];
        var blockAssessmentConfig = blockModel.get('_assessment');
        if (!blockAssessmentConfig) continue;
        bankId = blockAssessmentConfig._quizBankID;

        this._questionBanks[bankId].addBlock(blockModel);
      }
    },
    _setupRandomisedAssessment: function () {
      var assessmentConfig = this.getConfig();
      var randomisationModel = assessmentConfig._randomisation;
      var blockModels = this.getChildren().models;

      var questionModels = _.shuffle(blockModels);

      if (randomisationModel._blockCount > 0) {
        questionModels = questionModels.slice(0, randomisationModel._blockCount);
      }

      return questionModels;
    },
    _overrideQuestionComponentSettings: function () {
      var newSettings = this._getMarkingSettings();

      var questionConfig = this.getConfig()._questions;

      if (questionConfig.hasOwnProperty('_canShowFeedback')) {
        newSettings._canShowFeedback = questionConfig._canShowFeedback;
      }

      if (!_.isEmpty(newSettings)) {
        for (var i = 0, l = this._currentQuestionComponents.length; i < l; i++) {
          this._currentQuestionComponents[i].set(newSettings, {
            pluginName: '_assessment'
          });
        }
      }
    },
    _setupQuestionListeners: function () {
      var questionComponents = this._currentQuestionComponents;

      for (var i = 0, l = questionComponents.length; i < l; i++) {
        var question = questionComponents[i];
        if (question.get('_isInteractionComplete')) continue;
        this.listenTo(question, 'change:_isInteractionComplete', this._onQuestionCompleted);
      }
    },
    _checkNumberOfQuestionsAnswered: function () {
      var questionComponents = this._currentQuestionComponents;
      var numberOfQuestionsAnswered = 0;

      for (var i = 0, l = questionComponents.length; i < l; i++) {
        var question = questionComponents[i];

        if (question.get('_isInteractionComplete')) {
          numberOfQuestionsAnswered++;
        }
      }

      this.set('_numberOfQuestionsAnswered', numberOfQuestionsAnswered);
    },
    _removeQuestionListeners: function () {
      var questionComponents = this._currentQuestionComponents;
      if (!questionComponents) return;

      for (var i = 0, l = questionComponents.length; i < l; i++) {
        var question = questionComponents[i];
        this.stopListening(question, 'change:_isInteractionComplete', this._onQuestionCompleted);
      }
    },
    _onQuestionCompleted: function (questionModel, value) {
      if (value === false) return;
      if (!questionModel.get('_isInteractionComplete')) return;
      var numberOfQuestionsAnswered = this.get('_numberOfQuestionsAnswered');
      numberOfQuestionsAnswered++;
      this.set('_numberOfQuestionsAnswered', numberOfQuestionsAnswered);

      this._updateQuestionsState();

      Adapt.assessment.saveState();

      this._checkAssessmentComplete();
    },
    _checkAssessmentComplete: function () {
      var numberOfQuestionsAnswered = this.get('_numberOfQuestionsAnswered');
      var allQuestionsAnswered = numberOfQuestionsAnswered >= this._currentQuestionComponents.length;
      if (!allQuestionsAnswered) return;

      this._onAssessmentComplete();
    },
    _onAssessmentComplete: function () {
      this.getConfig();
      this.set('_attemptInProgress', false);

      this._spendAttempt();

      var scoreAsPercent = this._getScoreAsPercent();

      var score = this._getScore();

      var maxScore = this._getMaxScore();

      this.set({
        _scoreAsPercent: scoreAsPercent,
        _score: score,
        _maxScore: maxScore,
        _lastAttemptScoreAsPercent: scoreAsPercent,
        _assessmentCompleteInSession: true,
        _isAssessmentComplete: true
      });

      this._updateQuestionsState();

      this._checkIsPass();

      this._removeQuestionListeners();

      if (this._isMarkingSuppressionEnabled() && !this._isAttemptsLeft()) {
        _.defer(function () {
          this._overrideMarkingSettings();

          this._refreshQuestions();
        }.bind(this));
      }

      Adapt.trigger('assessments:complete', this.getState(), this);
    },
    _updateQuestionsState: function () {
      var questions = [];
      var questionComponents = this._currentQuestionComponents;

      for (var i = 0, l = questionComponents.length; i < l; i++) {
        var questionComponent = questionComponents[i];
        var questionModel = {
          _id: questionComponent.get('_id'),
          _isCorrect: questionComponent.get('_isCorrect') === undefined ? null : questionComponent.get('_isCorrect')
        };
        questions.push(questionModel);
      }

      this.set('_questions', questions);
    },
    _checkIsPass: function () {
      var assessmentConfig = this.getConfig();
      var isPercentageBased = assessmentConfig._isPercentageBased;
      var scoreToPass = assessmentConfig._scoreToPass;
      var scoreAsPercent = this.get('_scoreAsPercent');
      var score = this.get('_score');
      var isPass = isPercentageBased ? scoreAsPercent >= scoreToPass : score >= scoreToPass;
      this.set('_isPass', isPass);
    },
    _getMarkingSettings: function () {
      var markingSettings = {};

      if (this._shouldSuppressMarking()) {
        markingSettings = {
          _canShowMarking: false,
          _canShowModelAnswer: false
        };
      } else {
        var questionConfig = this.getConfig()._questions;

        if (questionConfig.hasOwnProperty('_canShowModelAnswer')) {
          markingSettings._canShowModelAnswer = questionConfig._canShowModelAnswer;
        }

        if (questionConfig.hasOwnProperty('_canShowMarking')) {
          markingSettings._canShowMarking = questionConfig._canShowMarking;
        }
      }

      return markingSettings;
    },
    _overrideMarkingSettings: function () {
      var newMarkingSettings = this._getMarkingSettings();

      for (var i = 0, l = this._currentQuestionComponents.length; i < l; i++) {
        this._currentQuestionComponents[i].set(newMarkingSettings, {
          pluginName: '_assessment'
        });
      }
    },
    _refreshQuestions: function () {
      for (var a = 0, b = this._currentQuestionComponents.length; a < b; a++) {
        var question = this._currentQuestionComponents[a];
        question.refresh();
      }
    },
    _shouldSuppressMarking: function () {
      return this._isMarkingSuppressionEnabled() && this._isAttemptsLeft();
    },
    _isMarkingSuppressionEnabled: function () {
      var assessmentConfig = this.getConfig();
      return assessmentConfig._suppressMarking;
    },
    _isAttemptsLeft: function () {
      if (this.get('_isAssessmentComplete') && this.get('_isPass')) return false;
      if (this.get('_attemptsLeft') === 0) return false;
      return true;
    },
    _spendAttempt: function () {
      if (!this._isAttemptsLeft()) return false;
      var attemptsSpent = this.get('_attemptsSpent');
      this.set('_attemptsSpent', ++attemptsSpent);
      if (this.get('_attempts') == 'infinite') return true;
      var attemptsLeft = this.get('_attemptsLeft');
      this.set('_attemptsLeft', --attemptsLeft);
      return true;
    },
    _getScore: function () {
      var score = 0;
      var questionComponents = this._currentQuestionComponents;

      for (var i = 0, l = questionComponents.length; i < l; i++) {
        var question = questionComponents[i];

        if (question.get('_isCorrect') && question.get('_questionWeight')) {
          score += question.get('_questionWeight');
        }
      }

      return score;
    },
    _getMaxScore: function () {
      var maxScore = 0;
      var questionComponents = this._currentQuestionComponents;

      for (var i = 0, l = questionComponents.length; i < l; i++) {
        var question = questionComponents[i];

        if (question.get('_questionWeight')) {
          maxScore += question.get('_questionWeight');
        }
      }

      return maxScore;
    },
    _getScoreAsPercent: function () {
      if (this._getMaxScore() === 0) return 0;
      return Math.round(this._getScore() / this._getMaxScore() * 100);
    },
    _getLastAttemptScoreAsPercent: function () {
      return this.get('_lastAttemptScoreAsPercent');
    },
    _checkReloadPage: function () {
      if (!this.canResetInPage()) return false;
      var parentId = this.getParent().get('_id');
      var currentLocation = Adapt.location._currentId;
      if (currentLocation != parentId) return false;
      if (!this.get('_isReady')) return false;
      return true;
    },
    _reloadPage: function (callback) {
      this._forceResetOnRevisit = true;
      this.listenToOnce(Adapt, 'pageView:ready', callback);

      _.delay(function () {
        Backbone.history.navigate('#/id/' + Adapt.location._currentId, {
          replace: true,
          trigger: true
        });
      }, 250);
    },
    _resetQuestions: function (callback) {
      var assessmentConfig = this.getConfig();
      var syncIterations = 1;
      var i = 0,
          qs = this._currentQuestionComponents,
          len = qs.length;

      function step() {
        for (var j = 0, count = Math.min(syncIterations, len - i); j < count; i++, j++) {
          var question = qs[i];
          question.reset(assessmentConfig._questions._resetType, true);
        }

        i == len ? callback() : setTimeout(step);
      }

      step();
    },
    _onRemove: function () {
      this._removeQuestionListeners();
    },
    _setCompletionStatus: function () {
      this.set({
        _isComplete: true,
        _isInteractionComplete: true
      });
    },
    _checkIfQuestionsWereRestored: function () {
      if (this.get('_assessmentCompleteInSession')) return;
      if (!this.get('_isAssessmentComplete')) return;
      var wereQuestionsRestored = true;
      var questions = this.get('_questions');

      for (var i = 0, l = questions.length; i < l; i++) {
        var question = questions[i];
        var questionModel = Adapt.findById(question._id);

        if (!questionModel.get('_isSubmitted')) {
          wereQuestionsRestored = false;
          break;
        }
      }

      if (!wereQuestionsRestored) {
        this.set('_assessmentCompleteInSession', true);
        return true;
      }

      return false;
    },
    isAssessmentEnabled: function () {
      if (this.get('_assessment') && this.get('_assessment')._isEnabled) return true;
      return false;
    },
    canResetInPage: function () {
      var assessmentConfig = this.getConfig();
      if (assessmentConfig._reloadPageOnReset === false) return false;
      return true;
    },
    reset: function (force, callback) {
      if (this._isResetInProgress) {
        this.once('reset', function () {
          this._isResetInProgress = false;

          if (typeof callback == 'function') {
            callback(true);
          }
        });
        return;
      }

      var assessmentConfig = this.getConfig();
      force = this._forceResetOnRevisit || force === true;
      this._forceResetOnRevisit = false;

      var isPageReload = this._checkReloadPage();

      if (this.get('_assessmentCompleteInSession') && !assessmentConfig._isResetOnRevisit && !isPageReload && !force) {
        if (typeof callback == 'function') {
          callback(false);
        }

        return false;
      }

      var wereQuestionsRestored = this._checkIfQuestionsWereRestored();

      force = force || wereQuestionsRestored;

      if (force && !this._isAttemptsLeft()) {
        this.set({
          _attemptsLeft: this.get('_attempts'),
          _attemptsSpent: 0
        });
      }

      var allowResetIfPassed = this.get('_assessment')._allowResetIfPassed;

      if (!this._isAttemptsLeft() && !force && !allowResetIfPassed) {
        if (typeof callback == 'function') callback(false);
        return false;
      }

      if (!isPageReload) {
        this.once('reset', function () {
          this._isResetInProgress = false;

          if (typeof callback == 'function') {
            callback(true);
          }
        });
        this._isResetInProgress = true;

        this._setupAssessmentData(force, function () {
          this.trigger('reset');
        });
      } else {
        this._reloadPage(function () {
          if (typeof callback == 'function') {
            callback(true);
          }
        });
      }

      return true;
    },
    getSaveState: function () {
      var state = this.getState();
      var blocks;
      var cfg = this.getConfig();
      var banksActive = cfg._banks && cfg._banks._isEnabled && cfg._banks._split.length > 1;
      var randomisationActive = cfg._randomisation && cfg._randomisation._isEnabled;

      if (!banksActive && !randomisationActive) {
        blocks = this.findDescendantModels('block');
      } else {
        blocks = state.questions.map(function (question) {
          return Adapt.findById(question._id).getParent();
        });
      }

      blocks = blocks.filter(function (block) {
        var trackingId = block.get('_trackingId');
        return Number.isInteger(trackingId) && trackingId >= 0;
      });
      var blockTrackingIds = blocks.map(function (block) {
        return block.get('_trackingId');
      });
      var blockCompletion = blocks.map(function (block) {
        var questions = block.findDescendantModels('question');
        return questions.map(function (question) {
          return question.get('_isCorrect') || false;
        });
      });
      var blockData = [blockTrackingIds, blockCompletion];
      var saveState = [state.isComplete ? 1 : 0, state.attemptsSpent, state.maxScore || 0, state.score, state.attemptInProgress ? 1 : 0];
      var dataPackage = [saveState, blockData];
      return dataPackage;
    },
    setRestoreState: function (dataPackage) {
      var restoreState = dataPackage[0];
      var blockData = dataPackage[1];
      var isComplete = restoreState[0] == 1 ? true : false;
      var attempts = this.get('_attempts');
      var attemptsSpent = restoreState[1];
      var maxScore = restoreState[2];
      var score = restoreState[3];
      var attemptInProgress = restoreState[4] == 1 ? true : false;
      var scoreAsPercent;
      var blocks = blockData[0].map(function (trackingId) {
        return Adapt.data.findWhere({
          _trackingId: trackingId
        });
      });

      if (blocks.length) {
        this.getChildren().models = blocks;
      }

      this.set({
        _isAssessmentComplete: isComplete,
        _assessmentCompleteInSession: false,
        _attemptsSpent: attemptsSpent,
        _attemptInProgress: attemptInProgress,
        _attemptsLeft: attempts === 'infinite' ? attempts : attempts - attemptsSpent,
        _maxScore: maxScore || this._getMaxScore(),
        _score: score || 0
      });

      if (score) {
        scoreAsPercent = Math.round(score / maxScore * 100);
      } else {
        scoreAsPercent = 0;
      }

      this.set({
        _scoreAsPercent: scoreAsPercent,
        _lastAttemptScoreAsPercent: scoreAsPercent
      });
      var questions = [];
      blocks.forEach(function (block, blockIndex) {
        var blockQuestions = block.findDescendantModels('question');
        blockQuestions.forEach(function (question, questionIndex) {
          questions.push({
            _id: question.get('_id'),
            _isCorrect: blockData[1][blockIndex][questionIndex]
          });
        });
      });
      this.set('_questions', questions);
      if (isComplete) this._checkIsPass();
      Adapt.trigger('assessments:restored', this.getState(), this);
    },
    getState: function () {
      var assessmentConfig = this.getConfig();
      var state = {
        id: assessmentConfig._id,
        type: 'article-assessment',
        pageId: this.getParent().get('_id'),
        articleId: this.get('_id'),
        isEnabled: assessmentConfig._isEnabled,
        isComplete: this.get('_isAssessmentComplete'),
        isPercentageBased: assessmentConfig._isPercentageBased,
        scoreToPass: assessmentConfig._scoreToPass,
        score: this.get('_score'),
        scoreAsPercent: this.get('_scoreAsPercent'),
        maxScore: this.get('_maxScore'),
        isPass: this.get('_isPass'),
        includeInTotalScore: assessmentConfig._includeInTotalScore,
        assessmentWeight: assessmentConfig._assessmentWeight,
        attempts: this.get('_attempts'),
        attemptsSpent: this.get('_attemptsSpent'),
        attemptsLeft: this.get('_attemptsLeft'),
        attemptInProgress: this.get('_attemptInProgress'),
        lastAttemptScoreAsPercent: this.get('_lastAttemptScoreAsPercent'),
        questions: this.get('_questions'),
        resetType: assessmentConfig._questions._resetType,
        allowResetIfPassed: assessmentConfig._allowResetIfPassed,
        questionModels: new Backbone.Collection(this._currentQuestionComponents)
      };
      return state;
    },
    getConfig: function () {
      var assessmentConfig = this.get('_assessment');

      if (!assessmentConfig) {
        assessmentConfig = $.extend(true, {}, assessmentConfigDefaults);
      } else {
        assessmentConfig = $.extend(true, {}, assessmentConfigDefaults, assessmentConfig);
      }

      if (assessmentConfig._id === undefined) {
        assessmentConfig._id = 'givenId' + givenIdCount++;
      }

      this.set('_assessment', assessmentConfig);
      return assessmentConfig;
    }
  };
  var AdaptAssessmentArticleModel = __AMD("extensions/adapt-contrib-assessment/js/adapt-assessmentArticleModel", AssessmentModel);

  var assessmentsConfigDefaults = {
    _isPercentageBased: true,
    _scoreToPass: 100,
    _isDefaultsLoaded: true
  };
  Adapt.assessment = _.extend({
    _assessments: _.extend([], {
      _byPageId: {},
      _byAssessmentId: {}
    }),
    initialize: function () {
      this.listenTo(Adapt, {
        'assessments:complete': this._onAssessmentsComplete,
        'router:location': this._checkResetAssessmentsOnRevisit,
        'router:plugin': this._handleRoute,
        'app:dataReady': this._onDataReady
      });
    },
    _onAssessmentsComplete: function (state) {
      var assessmentId = state.id;
      state.isComplete = true;
      if (assessmentId === undefined) return;

      if (!this._getStateByAssessmentId(assessmentId)) {
        Adapt.log.warn('assessments: state was not registered when assessment was created');
      }

      this.saveState();

      this._setPageProgress();

      this._checkAssessmentsComplete();
    },
    _restoreModelState: function (assessmentModel) {
      if (!this._saveStateModel) {
        this._saveStateModel = Adapt.offlineStorage.get('a');
      }

      if (this._saveStateModel) {
        var state = assessmentModel.getState();

        if (this._saveStateModel[state.id]) {
          assessmentModel.setRestoreState(Adapt.offlineStorage.deserialize(this._saveStateModel[state.id]));
        }
      }
    },
    _handleRoute: function (plugin, id) {
      if (plugin !== 'assessment' && plugin !== 'article-assessment' || id === undefined) {
        return;
      }

      if (!Adapt.findById(id)) {
        var assessment = Adapt.assessment._assessments._byAssessmentId[id];

        if (assessment) {
          id = assessment.get('_id');
        } else {
          Adapt.log.warn('Assessment not found with _id: ' + id);
          return;
        }
      }

      _.defer(function () {
        Backbone.history.navigate('#/id/' + id, {
          trigger: true,
          replace: true
        });
      });
    },
    _checkResetAssessmentsOnRevisit: function (toObject) {
      if (toObject._contentType !== 'page') return;

      var pageAssessmentModels = this._getAssessmentByPageId(toObject._currentId);

      if (pageAssessmentModels === undefined) return;
      Adapt.wait.for(function resetAllAssessments(allAssessmentHaveReset) {
        var numberOfAssessments = pageAssessmentModels.length;
        var numberOfResetAssessments = 0;
        var forceAssessmentReset = false;
        pageAssessmentModels.forEach(function (model) {
          model.reset(forceAssessmentReset, function () {
            numberOfResetAssessments++;
            var haveAllModelsReset = numberOfResetAssessments === numberOfAssessments;

            if (!haveAllModelsReset) {
              return;
            }

            allAssessmentHaveReset();
          });
        });
      });

      this._setPageProgress();
    },
    _onDataReady: function () {
      this._assessments = _.extend([], {
        _byPageId: {},
        _byAssessmentId: {}
      });
      this._restoredCount = 0;
    },
    _checkAssessmentsComplete: function () {
      var allAssessmentsComplete = true;
      var assessmentToPostBack = 0;

      var states = this._getStatesByAssessmentId();

      var assessmentStates = [];

      for (var id in states) {
        var state = states[id];
        if (!state.includeInTotalScore) continue;

        if (!state.isComplete) {
          allAssessmentsComplete = false;
          break;
        }

        assessmentToPostBack++;
        assessmentStates.push(state);
      }

      if (!allAssessmentsComplete || assessmentToPostBack === 0) return false;

      if (assessmentToPostBack === 1) {
        this._setupSingleAssessmentConfiguration(assessmentStates[0]);
      }

      _.defer(function () {
        Adapt.trigger('assessment:complete', this.getState());
      }.bind(this));

      return true;
    },
    _setupSingleAssessmentConfiguration: function (assessmentState) {
      var assessmentsConfig = Adapt.course.get('_assessment');
      $.extend(true, assessmentsConfig, {
        _isPercentageBased: assessmentState.isPercentageBased,
        _scoreToPass: assessmentState.scoreToPass
      });
      Adapt.course.set('_assessment', assessmentsConfig);
    },
    _getAssessmentByPageId: function (pageId) {
      return this._assessments._byPageId[pageId];
    },
    _getStateByAssessmentId: function (assessmentId) {
      if (assessmentId === undefined) {
        return null;
      }

      return this._assessments._byAssessmentId[assessmentId].getState();
    },
    _getStatesByAssessmentId: function () {
      var states = {};

      for (var i = 0, l = this._assessments.length; i < l; i++) {
        var assessmentModel = this._assessments[i];
        if (!assessmentModel.get('_isAvailable')) continue;
        var state = assessmentModel.getState();
        states[state.id] = state;
      }

      return states;
    },
    _setPageProgress: function () {
      for (var k in this._assessments._byPageId) {
        var assessments = this._assessments._byPageId[k];
        var assessmentsTotal = assessments.length;
        var assessmentsPassed = 0;

        for (var i = 0, l = assessments.length; i < l; i++) {
          var assessmentState = assessments[i].getState();
          if (assessmentState.includeInTotalScore && !assessmentState.isPass) continue;

          if (assessmentState.isComplete) {
            assessmentsPassed++;
          }
        }

        try {
          var pageModel = Adapt.findById(k);
          pageModel.set({
            _subProgressTotal: assessmentsTotal,
            _subProgressComplete: assessmentsPassed
          });
        } catch (e) {}
      }
    },
    _addToAssessmentIdMap: function (id, model) {
      if (id === undefined) {
        Adapt.log.warn('An assessment has been registered with an undefined value for "_id"');
        return;
      }

      if (id === '') {
        Adapt.log.warn('An assessment has been registered with an empty value for "_id"');
      }

      if (!this._assessments._byAssessmentId[id]) {
        this._assessments._byAssessmentId[id] = model;
      } else {
        Adapt.log.warn('An assessment with an _id of "' + id + '" already exists!');
      }
    },
    _setupQuestionNumbering: function () {
      var getRelatedQuestions = function (data) {
        var currentAssessmentId = data._assessmentId;
        var currentAssessment = Adapt.assessment.get(currentAssessmentId);
        return currentAssessment.getState().questions;
      };

      Handlebars.registerHelper('questionNumber', function getQuestionNumber() {
        var data = this.view ? this.view.model.toJSON() : this;
        if (!data._isPartOfAssessment) return;

        var related = _.pluck(getRelatedQuestions(data), '_id');

        return related.indexOf(data._id) + 1;
      });
      Handlebars.registerHelper('questionCount', function getTotalQuestions() {
        var data = this.view ? this.view.model.toJSON() : this;
        if (!data._isPartOfAssessment) return;
        return getRelatedQuestions(data).length;
      });
    },
    register: function (assessmentModel) {
      var state = assessmentModel.getState();
      var assessmentId = state.id;
      var pageId = state.pageId;

      if (this._assessments._byPageId[pageId] === undefined) {
        this._assessments._byPageId[pageId] = [];
      }

      this._assessments._byPageId[pageId].push(assessmentModel);

      this._addToAssessmentIdMap(assessmentId, assessmentModel);

      this._assessments.push(assessmentModel);

      this._restoreModelState(assessmentModel);

      this._restoredCount++;
      Adapt.trigger('assessments:register', state, assessmentModel);

      this._setPageProgress();

      this._setupQuestionNumbering();

      if (this._restoredCount === this._assessments.length) {
        Adapt.trigger('assessment:restored', this.getState());
      }
    },
    get: function (id) {
      if (id === undefined) {
        return this._assessments.slice(0);
      } else {
        return this._assessments._byAssessmentId[id];
      }
    },
    saveState: function () {
      this._saveStateModel = {};

      for (var i = 0, assessmentModel; assessmentModel = this._assessments[i++];) {
        var state = assessmentModel.getState();
        this._saveStateModel[state.id] = Adapt.offlineStorage.serialize(assessmentModel.getSaveState());
      }

      Adapt.offlineStorage.set('a', this._saveStateModel);
    },
    getConfig: function () {
      var assessmentsConfig = Adapt.course.get('_assessment');

      if (assessmentsConfig && assessmentsConfig._isDefaultsLoaded) {
        return assessmentsConfig;
      }

      if (assessmentsConfig === undefined) {
        assessmentsConfig = $.extend(true, {}, assessmentsConfigDefaults);
      } else {
        assessmentsConfig = $.extend(true, {}, assessmentsConfigDefaults, assessmentsConfig);
      }

      Adapt.course.set('_assessment', assessmentsConfig);
      return assessmentsConfig;
    },
    getState: function () {
      var assessmentsConfig = this.getConfig();
      var score = 0;
      var maxScore = 0;
      var isPass = false;
      var totalAssessments = 0;

      var states = this._getStatesByAssessmentId();

      var assessmentsComplete = 0;

      for (var id in states) {
        var state = states[id];
        if (!state.includeInTotalScore) continue;
        if (state.isComplete) assessmentsComplete++;
        totalAssessments++;
        maxScore += state.maxScore / state.assessmentWeight;
        score += state.score / state.assessmentWeight;
      }

      var isComplete = assessmentsComplete == totalAssessments;
      var scoreAsPercent = Math.round(score / maxScore * 100);

      if ((assessmentsConfig._scoreToPass || 100) && isComplete) {
        if (assessmentsConfig._isPercentageBased !== false) {
          if (scoreAsPercent >= assessmentsConfig._scoreToPass) isPass = true;
        } else {
          if (score >= assessmentsConfig._scoreToPass) isPass = true;
        }
      }

      return {
        isComplete: isComplete,
        isPercentageBased: assessmentsConfig._isPercentageBased,
        isPass: isPass,
        scoreAsPercent: scoreAsPercent,
        maxScore: maxScore,
        score: score,
        scoreToPass: assessmentsConfig._scoreToPass,
        assessmentsComplete: assessmentsComplete,
        assessments: totalAssessments
      };
    }
  }, Backbone.Events);
  Adapt.assessment.initialize();

  var ArticleViewInitialize = ArticleView$1.prototype.initialize;

  ArticleView$1.prototype.initialize = function (options) {
    if (this.model.get('_assessment') && this.model.get('_assessment')._isEnabled === true) {
      _.extend(this, AdaptAssessmentArticleView);
    }

    return ArticleViewInitialize.apply(this, arguments);
  };

  var ArticleModelInitialize = ArticleModel$1.prototype.initialize;

  ArticleModel$1.prototype.initialize = function (options) {
    if (this.get('_assessment') && this.get('_assessment')._isEnabled === true) {
      _.extend(this, AdaptAssessmentArticleModel);

      var returnValue = ArticleModelInitialize.apply(this, arguments);

      this._postInitialize();

      return returnValue;
    }

    return ArticleModelInitialize.apply(this, arguments);
  };

  var Bookmarking = Backbone.Controller.extend({
    bookmarkLevel: null,
    watchViewIds: null,
    watchViews: [],
    restoredLocationID: null,
    currentLocationID: null,
    initialize: function () {
      this.listenToOnce(Adapt, 'router:location', this.onAdaptInitialize);
    },
    onAdaptInitialize: function () {
      if (!this.checkIsEnabled()) return;
      this.setupEventListeners();
      this.checkRestoreLocation();
    },
    checkIsEnabled: function () {
      var courseBookmarkModel = Adapt.course.get('_bookmarking');
      if (!courseBookmarkModel || !courseBookmarkModel._isEnabled) return false;
      if (!Adapt.offlineStorage) return false;
      return true;
    },
    setupEventListeners: function () {
      this._onScroll = _.debounce(this.checkLocation.bind(this), 1000);
      this.listenTo(Adapt, {
        'menuView:ready': this.setupMenu,
        'pageView:preRender': this.setupPage
      });
    },
    checkRestoreLocation: function () {
      this.restoredLocationID = Adapt.offlineStorage.get('location');
      if (!this.restoredLocationID || this.restoredLocationID === 'undefined') return;
      this.listenToOnce(Adapt, 'pageView:ready menuView:ready', this.restoreLocation);
    },
    restoreLocation: function () {
      _.defer(function () {
        this.stopListening(Adapt, 'pageView:ready menuView:ready', this.restoreLocation);

        if (this.restoredLocationID === Adapt.location._currentId || !Adapt.findById(this.restoredLocationID)) {
          return;
        }

        var locationOnscreen = $('.' + this.restoredLocationID).onscreen();
        var isLocationOnscreen = locationOnscreen && locationOnscreen.percentInview > 0;
        var isLocationFullyInview = locationOnscreen && locationOnscreen.percentInview === 100;

        if (isLocationOnscreen && isLocationFullyInview) {
          return;
        }

        if (Adapt.course.get('_bookmarking')._showPrompt === false) {
          this.navigateToPrevious();
          return;
        }

        this.showPrompt();
      }.bind(this));
    },
    showPrompt: function () {
      var courseBookmarkModel = Adapt.course.get('_bookmarking');
      var buttons = courseBookmarkModel._buttons || {
        yes: 'Yes',
        no: 'No'
      };
      this.listenToOnce(Adapt, {
        'bookmarking:continue': this.navigateToPrevious,
        'bookmarking:cancel': this.navigateCancel
      });
      var promptObject = {
        title: courseBookmarkModel.title,
        body: courseBookmarkModel.body,
        _prompts: [{
          promptText: buttons.yes || 'Yes',
          _callbackEvent: 'bookmarking:continue'
        }, {
          promptText: buttons.no || 'No',
          _callbackEvent: 'bookmarking:cancel'
        }],
        _showIcon: true
      };
      var accessibility = Adapt.config.get('_accessibility');

      if (!accessibility || !accessibility._isActive) {
        Adapt.notify.prompt(promptObject);
        return;
      }

      $('.js-loading').show();
      $('#a11y-focuser').focus();
      $('body').attr('aria-hidden', true);

      _.delay(function () {
        $('.js-loading').hide();
        $('body').removeAttr('aria-hidden');
        Adapt.notify.prompt(promptObject);
      }, 3000);
    },
    navigateToPrevious: function () {
      _.defer(function () {
        var isSinglePage = Adapt.contentObjects.models.length == 1;
        Backbone.history.navigate('#/id/' + this.restoredLocationID, {
          trigger: true,
          replace: isSinglePage
        });
      }.bind(this));

      this.stopListening(Adapt, 'bookmarking:cancel');
    },
    navigateCancel: function () {
      this.stopListening(Adapt, 'bookmarking:continue');
    },
    resetLocationID: function () {
      this.setLocationID('');
    },
    setupMenu: function (menuView) {
      var menuModel = menuView.model;

      if (!menuModel.get('_parentId')) {
        this.resetLocationID();
        return;
      }

      this.setLocationID(menuModel.get('_id'));
    },
    getBookmarkLevel: function (pageModel) {
      var defaultLevel = Adapt.course.get('_bookmarking')._level || 'component';
      var bookmarkModel = pageModel.get('_bookmarking');
      var isInherit = !bookmarkModel || !bookmarkModel._level || bookmarkModel._level === 'inherit';
      return isInherit ? defaultLevel : bookmarkModel._level;
    },
    setupPage: function (pageView) {
      var pageBookmarkModel = pageView.model.get('_bookmarking');

      if (pageBookmarkModel && pageBookmarkModel._isEnabled === false) {
        this.resetLocationID();
        return;
      }

      this.setLocationID(pageView.model.get('_id'));
      this.bookmarkLevel = this.getBookmarkLevel(pageView.model);

      if (this.bookmarkLevel === 'page') {
        return;
      }

      this.watchViewIds = pageView.model.findDescendantModels(this.bookmarkLevel).map(function (desc) {
        return desc.get('_id');
      });
      this.listenTo(Adapt, this.bookmarkLevel + 'View:postRender', this.captureViews);
      this.listenToOnce(Adapt, 'remove', this.releaseViews);
      $(window).on('scroll', this._onScroll);
    },
    captureViews: function (view) {
      this.watchViews.push(view);
    },
    setLocationID: function (id) {
      if (!Adapt.offlineStorage) return;
      if (this.currentLocationID == id) return;
      Adapt.offlineStorage.set('location', id);
      this.currentLocationID = id;
    },
    releaseViews: function () {
      this.watchViews.length = 0;
      this.watchViewIds.length = 0;
      this.stopListening(Adapt, 'remove', this.releaseViews);
      this.stopListening(Adapt, this.bookmarkLevel + 'View:postRender', this.captureViews);
      $(window).off('scroll', this._onScroll);
    },
    checkLocation: function () {
      var highestOnscreen = 0;
      var highestOnscreenLocation = '';

      for (var i = 0, l = this.watchViews.length; i < l; i++) {
        var view = this.watchViews[i];
        var isViewAPageChild = this.watchViewIds.indexOf(view.model.get('_id')) > -1;
        if (!isViewAPageChild) continue;
        var element = $('.' + view.model.get('_id'));
        var measurements = element.onscreen();
        if (!measurements.onscreen) continue;

        if (measurements.percentInview > highestOnscreen) {
          highestOnscreen = measurements.percentInview;
          highestOnscreenLocation = view.model.get('_id');
        }
      }

      if (highestOnscreenLocation) this.setLocationID(highestOnscreenLocation);
    }
  });
  __AMD("extensions/adapt-contrib-bookmarking/js/adapt-contrib-bookmarking", new Bookmarking());

  var NavigationView = Backbone.View.extend({
    className: 'nav',
    attributes: {
      role: 'navigation'
    },
    initialize: function () {
      this.template = 'languagePickerNavigation';
      this.setupHelpers();
      this.preRender();
    },
    preRender: function () {
      Adapt.trigger('navigationView:preRender', this);
      this.render();
    },
    render: function () {
      var template = Handlebars.templates[this.template];
      this.$el.html(template({
        _config: this.model.get('_accessibility'),
        _accessibility: Adapt.config.get('_accessibility')
      })).insertBefore('#app');

      _.defer(function () {
        Adapt.trigger('navigationView:postRender', this);
      }.bind(this));

      return this;
    },
    setupHelpers: function () {
      Handlebars.registerHelper('a11y_aria_label', function (text) {
        return '<div class="aria-label">' + text + '</div>';
      });
    }
  });
  var NavigationView$1 = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerNavigationView", NavigationView);

  var LanguagePickerView = Backbone.View.extend({
    events: {
      'click .js-languagepicker-btn-click': 'onLanguageClick'
    },
    className: 'languagepicker',
    initialize: function () {
      this.initializeNavigation();
      $('html').addClass('in-languagepicker');
      this.listenTo(Adapt, 'remove', this.remove);
      this.render();
    },
    render: function () {
      var data = this.model.toJSON();
      var template = Handlebars.templates[this.constructor.template];
      this.$el.html(template(data));
      this.$el.addClass(data._classes);
      document.title = this.model.get('title') || "";

      _.defer(this.postRender.bind(this));
    },
    postRender: function () {
      $('.js-loading').hide();
    },
    onLanguageClick: function (event) {
      this.destroyNavigation();
      this.model.setLanguage($(event.target).val());
    },
    initializeNavigation: function () {
      this.navigationView = new NavigationView$1({
        model: this.model
      });
    },
    destroyNavigation: function () {
      this.navigationView.remove();
    },
    remove: function () {
      $('html').removeClass('in-languagepicker');
      Backbone.View.prototype.remove.apply(this, arguments);
    }
  }, {
    template: 'languagePickerView'
  });
  var LanguagePickerView$1 = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerView", LanguagePickerView);

  var LanguagePickerDrawerView = Backbone.View.extend({
    events: {
      'click .js-languagepicker-item-btn': 'onButtonClick'
    },
    initialize: function () {
      this.listenTo(Adapt, {
        remove: this.remove,
        'languagepicker:changelanguage:yes': this.onDoChangeLanguage,
        'languagepicker:changelanguage:no': this.onDontChangeLanguage
      });
      this.render();
    },
    render: function () {
      var data = this.model.toJSON();
      var template = Handlebars.templates[this.constructor.template];
      this.$el.html(template(data));
    },
    onButtonClick: function (event) {
      var newLanguage = $(event.currentTarget).attr('data-language');
      this.model.set('newLanguage', newLanguage);
      var data = this.model.getLanguageDetails(newLanguage);
      var promptObject = {
        _attributes: {
          lang: newLanguage
        },
        _classes: "is-lang-".concat(newLanguage, " ").concat(data._direction === 'rtl' ? 'is-rtl' : 'is-ltr'),
        title: data.warningTitle,
        body: data.warningMessage,
        _prompts: [{
          promptText: data._buttons.yes,
          _callbackEvent: 'languagepicker:changelanguage:yes'
        }, {
          promptText: data._buttons.no,
          _callbackEvent: 'languagepicker:changelanguage:no'
        }],
        _showIcon: true
      };

      if ($.a11y) {
        this.$finishFocus = $.a11y.state.focusStack.pop();
        $.a11y.state.focusStack.push($('#focuser'));
      } else {
        this.$finishFocus = Adapt.a11y._popup._focusStack.pop();

        Adapt.a11y._popup._focusStack.push($('#a11y-focuser'));
      }

      Adapt.once('drawer:closed', function () {
        _.delay(function () {
          Adapt.once('popup:opened', function () {
            if ($.a11y) {
              $.a11y.state.focusStack.pop();
              $.a11y.state.focusStack.push($('#focuser'));
              return;
            }

            Adapt.a11y._popup._focusStack.pop();

            Adapt.a11y._popup._focusStack.push($('#a11y-focuser'));
          });
          Adapt.notify.prompt(promptObject);
        }, 250);
      });
      Adapt.trigger('drawer:closeDrawer');
    },
    onDoChangeLanguage: function () {
      var newLanguage = this.model.get('newLanguage');
      this.model.setTrackedData();
      this.model.setLanguage(newLanguage);
      this.remove();
    },
    onDontChangeLanguage: function () {
      this.remove();

      _.delay(function () {
        this.$finishFocus.a11y_focus();
      }.bind(this), 500);
    }
  }, {
    template: 'languagePickerDrawerView'
  });
  var LanguagePickerDrawerView$1 = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerDrawerView", LanguagePickerDrawerView);

  var LanguagePickerNavView = Backbone.View.extend({
    tagName: 'button',
    className: function () {
      var classNames = 'btn-icon nav__btn nav__languagepicker-btn js-languagepicker-nav-btn icon';
      var customClass = this.model.get('_languagePickerIconClass') || 'icon-language-2';
      return classNames + ' ' + customClass;
    },
    events: {
      'click': 'onClick'
    },
    initialize: function () {
      this.listenTo(Adapt, 'remove', this.remove);
    },
    onClick: function (event) {
      Adapt.drawer.triggerCustomView(new LanguagePickerDrawerView$1({
        model: this.model
      }).$el, false);
    }
  });
  var LanguagePickerNavView$1 = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerNavView", LanguagePickerNavView);

  var LanguagePickerModel = Backbone.Model.extend({
    defaults: {
      _isEnabled: false,
      displayTitle: '',
      body: '',
      _languages: []
    },
    trackedData: {
      components: [],
      blocks: []
    },
    locationId: null,
    initialize: function () {
      this.listenTo(Adapt.config, 'change:_activeLanguage', this.markLanguageAsSelected);
      this.listenTo(Adapt, 'app:dataLoaded', this.onDataLoaded);
    },
    getLanguageDetails: function (language) {
      var _languages = this.get('_languages');

      return _.find(_languages, function (item) {
        return item._language === language;
      });
    },
    setLanguage: function (language) {
      Adapt.config.set({
        '_activeLanguage': language,
        '_defaultDirection': this.getLanguageDetails(language)._direction
      });
    },
    markLanguageAsSelected: function (model, language) {
      this.get('_languages').forEach(function (item) {
        item._isSelected = item._language === language;
      });
    },
    onDataLoaded: function () {
      if (!this.get('_restoreStateOnLanguageChange')) {
        return;
      }

      _.defer(function () {
        this.locationId = Adapt.offlineStorage.get('location') || null;
        this.restoreState();
      }.bind(this));
    },
    restoreLocation: function () {
      if (!Adapt.mapById(this.locationId)) return;

      _.defer(function () {
        Adapt.navigateToElement('.' + this.locationId);
      }.bind(this));
    },
    restoreState: function () {
      if (this.isTrackedDataEmpty()) return;

      if (this.trackedData.components) {
        this.trackedData.components.forEach(this.setTrackableState);
      }

      if (this.trackedData.blocks) {
        this.trackedData.blocks.forEach(this.setTrackableState);
      }
    },
    isTrackedDataEmpty: function () {
      return _.isEqual(this.trackedData, {
        components: [],
        blocks: []
      });
    },
    getTrackableState: function () {
      var components = this.getState(Adapt.components.models);
      var blocks = this.getState(Adapt.blocks.models);
      return {
        components: _.compact(components),
        blocks: _.compact(blocks)
      };
    },
    getState: function (models) {
      return models.map(function (model) {
        if (model.get('_isComplete')) {
          return model.getTrackableState();
        }
      });
    },
    setTrackedData: function () {
      if (this.get('_restoreStateOnLanguageChange')) {
        this.listenToOnce(Adapt, 'menuView:ready', this.restoreLocation);
        this.trackedData = this.getTrackableState();
      }
    },
    setTrackableState: function (stateObject) {
      var restoreModel = Adapt.findById(stateObject._id);

      if (restoreModel) {
        restoreModel.setTrackableState(stateObject);
      } else {
        Adapt.log.warn('LanguagePicker unable to restore state for: ' + stateObject._id);
      }
    }
  });
  var LanguagePickerModel$1 = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerModel", LanguagePickerModel);

  var languagePickerModel;
  Adapt.once('configModel:dataLoaded', onConfigLoaded);

  function onConfigLoaded() {
    if (!Adapt.config.has('_languagePicker')) return;
    if (!Adapt.config.get('_languagePicker')._isEnabled) return;
    Adapt.config.set('_canLoadData', false);
    languagePickerModel = new LanguagePickerModel$1(Adapt.config.get('_languagePicker'));
    Adapt.on('router:menu router:page', setupNavigationView);

    if (Adapt.offlineStorage.ready) {
      onOfflineStorageReady();
    } else {
      Adapt.once('offlineStorage:ready', onOfflineStorageReady);
    }
  }

  function onOfflineStorageReady() {
    var storedLanguage = Adapt.offlineStorage.get('lang');

    if (storedLanguage) {
      languagePickerModel.setLanguage(storedLanguage);
    } else if (languagePickerModel.get('_showOnCourseLoad') === false) {
      languagePickerModel.setLanguage(Adapt.config.get('_defaultLanguage'));
    } else {
      showLanguagePickerView();
    }
  }

  function showLanguagePickerView() {
    var languagePickerView = new LanguagePickerView$1({
      model: languagePickerModel
    });
    languagePickerView.$el.appendTo('#wrapper');
  }

  function setupNavigationView() {
    var courseGlobals = Adapt.course.get('_globals')._extensions;

    var navigationBarLabel = '';

    if (courseGlobals._languagePicker) {
      navigationBarLabel = courseGlobals._languagePicker.navigationBarLabel;
    }

    var languagePickerNavView = new LanguagePickerNavView$1({
      model: languagePickerModel,
      attributes: {
        'aria-label': navigationBarLabel
      }
    });
    languagePickerNavView.$el.appendTo('.nav__inner');
  }

  var Completion = Backbone.Controller.extend({
    subProgressCompleted: 0,
    subProgressTotal: 0,
    nonAssessmentCompleted: 0,
    nonAssessmentTotal: 0,
    assessmentCompleted: 0,
    assessmentTotal: 0
  });

  function calculateCompletion(contentObjectModel) {
    var completion = new Completion();
    var viewType = contentObjectModel.get('_type');
    var isComplete = contentObjectModel.get('_isComplete') ? 1 : 0;
    var children;

    switch (viewType) {
      case 'page':
        children = contentObjectModel.getAllDescendantModels().filter(function (model) {
          return model.get('_isAvailable') && !model.get('_isOptional');
        });
        var availableChildren = filterAvailableChildren(children);
        var components = getPageLevelProgressEnabledModels(availableChildren);
        var nonAssessmentComponents = getNonAssessmentComponents(components);
        completion.nonAssessmentTotal = nonAssessmentComponents.length;
        completion.nonAssessmentCompleted = getComponentsCompleted(nonAssessmentComponents).length;
        var assessmentComponents = getAssessmentComponents(components);
        completion.assessmentTotal = assessmentComponents.length;
        completion.assessmentCompleted = getComponentsInteractionCompleted(assessmentComponents).length;

        if (contentObjectModel.get('_pageLevelProgress')._excludeAssessments !== true) {
          completion.subProgressCompleted = contentObjectModel.get('_subProgressComplete') || 0;
          completion.subProgressTotal = contentObjectModel.get('_subProgressTotal') || 0;
        }

        var showPageCompletionCourse = Adapt.course.get('_pageLevelProgress') && Adapt.course.get('_pageLevelProgress')._showPageCompletion !== false;
        var showPageCompletionPage = contentObjectModel.get('_pageLevelProgress') && contentObjectModel.get('_pageLevelProgress')._showPageCompletion !== false;

        if (showPageCompletionCourse && showPageCompletionPage) {
          completion.nonAssessmentCompleted += isComplete;
          completion.nonAssessmentTotal += 1;
        }

        break;

      case 'menu':
      case 'course':
        children = contentObjectModel.get('_children').models;
        children.forEach(function (contentObject) {
          var completionObject = calculateCompletion(contentObject);
          completion.subProgressCompleted += completionObject.subProgressCompleted || 0;
          completion.subProgressTotal += completionObject.subProgressTotal || 0;
          completion.nonAssessmentTotal += completionObject.nonAssessmentTotal;
          completion.nonAssessmentCompleted += completionObject.nonAssessmentCompleted;
          completion.assessmentTotal += completionObject.assessmentTotal;
          completion.assessmentCompleted += completionObject.assessmentCompleted;
        });
        break;
    }

    return completion;
  }

  function getNonAssessmentComponents(models) {
    return models.filter(function (model) {
      return !model.get('_isPartOfAssessment');
    });
  }

  function getAssessmentComponents(models) {
    return models.filter(function (model) {
      return model.get('_isPartOfAssessment');
    });
  }

  function getComponentsCompleted(models) {
    return models.filter(function (item) {
      return item.get('_isComplete');
    });
  }

  function getComponentsInteractionCompleted(models) {
    return models.filter(function (item) {
      return item.get('_isComplete');
    });
  }

  function getPageLevelProgressEnabledModels(models) {
    return models.filter(function (model) {
      var config = model.get('_pageLevelProgress');
      return config && config._isEnabled;
    });
  }

  function unavailableInHierarchy(parents) {
    if (!parents) return;
    return parents.some(function (parent) {
      return !parent.get('_isAvailable');
    });
  }

  function filterAvailableChildren(children) {
    var availableChildren = [];

    for (var i = 0, count = children.length; i < count; i++) {
      var parents = children[i].getAncestorModels();
      if (unavailableInHierarchy(parents)) continue;
      availableChildren.push(children[i]);
    }

    return availableChildren;
  }

  function calculatePercentageComplete(model) {
    var completionObject = calculateCompletion(model);
    var completed = completionObject.nonAssessmentCompleted + completionObject.assessmentCompleted + completionObject.subProgressCompleted;
    var total = completionObject.nonAssessmentTotal + completionObject.assessmentTotal + completionObject.subProgressTotal;
    var percentageComplete = Math.floor(completed / total * 100);
    return percentageComplete;
  }

  var completionCalculations = __AMD("extensions/adapt-contrib-pageLevelProgress/js/completionCalculations", {
    calculateCompletion: calculateCompletion,
    calculatePercentageComplete: calculatePercentageComplete,
    getPageLevelProgressEnabledModels: getPageLevelProgressEnabledModels,
    filterAvailableChildren: filterAvailableChildren
  });

  var PageLevelProgressIndicatorView = Backbone.View.extend({
    initialize: function (options) {
      options = options || {};
      this.parent = options.parent;
      this.calculatePercentage = options.calculatePercentage || this.calculatePercentage;
      this.ariaLabel = options.ariaLabel || '';
      this.type = options.type || this.model.get('_type');
      this.addClasses();
      this.setUpEventListeners();
      this.setPercentageComplete();
      this.render();
      this.refresh();
    },
    addClasses: function () {
      this.$el.addClass(['pagelevelprogress__indicator', 'is-' + this.type].join(' '));
    },
    checkAria: function () {
      if (!this.ariaLabel) {
        this.$el.attr('aria-hidden', true);
        return;
      }

      var data = this.getRenderData();
      this.$('.js-indicator-aria-label').html(Handlebars.compile(this.ariaLabel)(data));
    },
    setUpEventListeners: function () {
      if (this.parent) {
        this.listenToOnce(this.parent, 'postRemove', this.remove);
      } else {
        this.listenTo(Adapt, 'remove', this.remove);
      }

      this.listenTo(this.model, 'change:_isComplete', this.refresh);
      if (!this.collection) return;
      this.listenTo(this.collection, 'change:_isComplete', this.refresh);
    },
    setPercentageComplete: function () {
      var percentage = this.calculatePercentage();
      this.model.set('percentageComplete', percentage);
      return percentage;
    },
    calculatePercentage: function () {
      return this.model.get('_isComplete') ? 100 : 0;
    },
    render: function () {
      var data = this.getRenderData();
      var template = Handlebars.templates[this.constructor.template];
      this.$el.html(template(data));
    },
    getRenderData: function () {
      var data = this.model.toJSON();
      data.ariaLabel = this.ariaLabel;
      data.type = this.type;
      return data;
    },
    refresh: function () {
      this.checkCompletion();
      this.checkAria();
      this.$('.js-indicator-bar').css({
        width: this.calculatePercentage() + '%'
      });
    },
    checkCompletion: function () {
      var percentage = this.setPercentageComplete();
      this.$el.toggleClass('is-complete', percentage === 100).toggleClass('is-incomplete', percentage !== 100);
    }
  }, {
    template: 'pageLevelProgressIndicator'
  });
  var PageLevelProgressIndicatorView$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressIndicatorView", PageLevelProgressIndicatorView);

  var PageLevelProgressItemView = Backbone.View.extend({
    className: function () {
      return ['pagelevelprogress__item drawer__item', this.model.get('_type') + '__indicator'].join(' ');
    },
    attributes: {
      'role': 'listitem'
    },
    initialize: function () {
      this.listenTo(Adapt, 'remove', this.remove);
      this.render();
      this.addIndicator();
    },
    render: function () {
      var data = this.model.toJSON();
      var template = Handlebars.templates[this.constructor.template];
      this.$el.html(template(data));
    },
    addIndicator: function () {
      if (this.model.get('_isOptional')) return;
      var item = new PageLevelProgressIndicatorView$1({
        model: this.model
      });
      this.$('.js-indicator').append(item.$el);
    }
  }, {
    template: 'pageLevelProgressItem'
  });
  var PageLevelProgressItemView$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressItemView", PageLevelProgressItemView);

  var PageLevelProgressView = Backbone.View.extend({
    className: 'pagelevelprogress',
    events: {
      'click .js-pagelevelprogress-item-click': 'scrollToPageElement'
    },
    initialize: function () {
      this.listenTo(Adapt, 'remove', this.remove);
      this.render();
      this.addChildren();
    },
    scrollToPageElement: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(event) {
        var $target, id, model, currentComponentSelector;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (event && event.preventDefault) event.preventDefault();
                $target = $(event.currentTarget);

                if (!$target.is('.is-disabled')) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return");

              case 4:
                id = $target.attr('data-pagelevelprogress-id');
                model = Adapt.findById(id);

                if (model.get('_isRendered')) {
                  _context.next = 15;
                  break;
                }

                _context.prev = 7;
                _context.next = 10;
                return Adapt.parentView.renderTo(id);

              case 10:
                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](7);
                return _context.abrupt("return");

              case 15:
                currentComponentSelector = '.' + id;
                Adapt.once('drawer:closed', function () {
                  Adapt.scrollTo(currentComponentSelector, {
                    duration: 400
                  });
                }).trigger('drawer:closeDrawer', $(currentComponentSelector));

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[7, 12]]);
      }));

      return function scrollToPageElement(_x) {
        return _ref.apply(this, arguments);
      };
    }(),
    render: function () {
      var template = Handlebars.templates['pageLevelProgress'];
      this.$el.html(template({}));
    },
    addChildren: function () {
      var $children = this.$('.js-children');
      this.collection.each(function (model) {
        $children.append(new PageLevelProgressItemView$1({
          model: model
        }).$el);
      }.bind(this));
    }
  });
  var PageLevelProgressView$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView", PageLevelProgressView);

  var PageLevelProgressNavigationView = Backbone.View.extend({
    tagName: 'button',
    className: 'btn-icon nav__btn nav__pagelevelprogress-btn pagelevelprogress__nav-btn',
    events: {
      'click': 'onProgressClicked'
    },
    initialize: function () {
      _.bindAll(this, 'updateProgressBar');

      this.setUpEventListeners();
      this.render();
      this.addIndicator();
      this.deferredUpdate();
    },
    setUpEventListeners: function () {
      this.listenTo(Adapt, {
        'remove': this.remove,
        'router:location': this.updateProgressBar,
        'view:childAdded pageLevelProgress:update': this.refreshProgressBar
      });
    },
    render: function () {
      var template = Handlebars.templates['pageLevelProgressNavigation'];
      this.$el.html(template({}));
    },
    addIndicator: function () {
      this.indicatorView = new PageLevelProgressIndicatorView$1({
        model: this.model,
        collection: this.collection,
        calculatePercentage: this._getPageCompletionPercentage,
        ariaLabel: Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressIndicatorBar
      });
      this.$el.prepend(this.indicatorView.$el);
    },
    _getPageCompletionPercentage: function () {
      return completionCalculations.calculatePercentageComplete(this.model);
    },
    deferredUpdate: function () {
      _.defer(this.updateProgressBar);
    },
    updateProgressBar: function () {
      this.indicatorView.refresh();
    },
    refreshProgressBar: function () {
      this.collection.repopulate();
      this.updateProgressBar();
    },
    onProgressClicked: function (event) {
      if (event && event.preventDefault) event.preventDefault();
      Adapt.drawer.triggerCustomView(new PageLevelProgressView$1({
        collection: this.collection
      }).$el, false);
    },
    remove: function () {
      Backbone.View.prototype.remove.call(this);
      this.collection.reset();
    }
  });
  var PageLevelProgressNavigationView$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView", PageLevelProgressNavigationView);

  var PageLevelProgressCollection = Backbone.Collection.extend({
    initialize: function (models, options) {
      this.listenTo(Adapt, 'remove', this.reset);
      if (!options || !options.pageModel) return;
      this._pageModel = options.pageModel;
      this.repopulate();
    },
    repopulate: function () {
      this.reset();
      if (!this._pageModel) return;

      var allDescendants = this._pageModel.getAllDescendantModels(true);

      var currentPageItems = allDescendants.filter(function (item) {
        return item.get('_isAvailable') === true;
      });
      var availableItems = completionCalculations.filterAvailableChildren(currentPageItems);
      var enabledProgressItems = completionCalculations.getPageLevelProgressEnabledModels(availableItems);
      this.add(enabledProgressItems);
    }
  });
  var PageLevelProgressCollection$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressCollection", PageLevelProgressCollection);

  var PageLevelProgress = Backbone.Controller.extend({
    initialize: function () {
      Adapt.on({
        'app:dataReady': this.onDataReady.bind(this),
        'app:languageChanged': function () {
          this.stopListening();
        }.bind(this)
      });
    },
    getCourseConfig: function () {
      return Adapt.course.get('_pageLevelProgress');
    },
    onDataReady: function () {
      var coursePLPConfig = this.getCourseConfig();

      if (!coursePLPConfig || !coursePLPConfig._isEnabled) {
        return;
      }

      this.setUpEventListeners();
    },
    setUpEventListeners: function () {
      var headerIndicatorTypes = ['menu', 'menuItem', 'page', 'article', 'block', 'component'];
      var headerIndicatorEventNames = headerIndicatorTypes.concat(['']).join('View:render ');
      this.listenTo(Adapt, headerIndicatorEventNames, this.renderHeaderIndicatorView);
      this.listenTo(Adapt, {
        'menuItemView:postRender': this.renderMenuItemIndicatorView,
        'router:page': this.renderNavigationView
      });
      this.listenTo(Adapt.course, 'bubble:change:_isComplete', this.onCompletionChange);
    },
    onCompletionChange: function (event) {
      if (!Adapt.location._currentId) return;
      var currentModel = Adapt.findById(Adapt.location._currentId);
      var completionState = {
        currentLocation: completionCalculations.calculatePercentageComplete(currentModel),
        course: completionCalculations.calculatePercentageComplete(Adapt.course)
      };
      var hasChanged = !_.isMatch(this._previousCompletionState, completionState);
      if (!hasChanged) return;
      this._previousCompletionState = completionState;
      Adapt.trigger('pageLevelProgress:percentageCompleteChange', completionState);
    },
    renderHeaderIndicatorView: function (view) {
      var model = view.model;
      var config = model.get('_pageLevelProgress');

      if (!config || !config._isEnabled || !config._isCompletionIndicatorEnabled) {
        return;
      }

      var pageModel = model.findAncestor('contentObjects');
      var pageConfig = pageModel && pageModel.get('_pageLevelProgress');

      if (pageConfig && !pageConfig._isEnabled) {
        return;
      }

      var $headings = view.$('.js-heading');
      $headings.each(function (index, el) {
        var $el = $(el);
        var indicatorView = new PageLevelProgressIndicatorView$1({
          parent: view,
          model: model
        });
        indicatorView.$el.insertAfter($el);
      });
    },
    renderMenuItemIndicatorView: function (view) {
      if (view.model.get('_id') === Adapt.location._currentId) {
        return;
      }

      var viewType = view.model.get('_type');

      if (viewType === 'course') {
        return;
      }

      var pageLevelProgress = view.model.get('_pageLevelProgress');

      if (!pageLevelProgress || !pageLevelProgress._isEnabled) {
        return;
      }

      view.$el.find('.js-menu-item-progress').append(new PageLevelProgressIndicatorView$1({
        parent: view,
        model: view.model,
        type: 'menu-item',
        calculatePercentage: this._getMenuItemCompletionPercentage.bind(view),
        ariaLabel: Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressMenuBar
      }).$el);
    },
    _getMenuItemCompletionPercentage: function () {
      return completionCalculations.calculatePercentageComplete(this.model);
    },
    renderNavigationView: function (pageModel) {
      var coursePLPConfig = this.getCourseConfig();

      if (coursePLPConfig && coursePLPConfig._isShownInNavigationBar === false) {
        return;
      }

      var pagePLPConfig = pageModel.get('_pageLevelProgress');

      if (!pagePLPConfig || !pagePLPConfig._isEnabled) {
        return;
      }

      var collection = new PageLevelProgressCollection$1(null, {
        pageModel: pageModel
      });

      if (collection.length === 0) {
        return;
      }

      $('.nav__drawer-btn').after(new PageLevelProgressNavigationView$1({
        model: pageModel,
        collection: collection
      }).$el);
    }
  });
  Adapt.pageLevelProgress = new PageLevelProgress();

  var ResourcesView = Backbone.View.extend({
    className: 'resources',
    initialize: function () {
      this.listenTo(Adapt, 'remove', this.remove);
      this.render();
    },
    events: {
      'click .js-resources-filter-btn-click': 'onFilterClicked'
    },
    render: function () {
      this.$el.html(Handlebars.templates.resources({
        model: this.model.toJSON(),
        resources: this.collection.toJSON()
      }));

      _.defer(function () {
        this.listenTo(Adapt, 'drawer:triggerCustomView', this.remove);
      }.bind(this));

      return this;
    },
    onFilterClicked: function (e) {
      if (e && e.preventDefault) e.preventDefault();
      this.$('.js-resources-filter-btn-click').removeClass('is-selected');
      var items;
      var filter = $(e.currentTarget).addClass('is-selected').attr('data-filter');

      if (filter === 'all') {
        items = this.$('.js-resources-item').removeClass('u-display-none');
      } else {
        this.$('.js-resources-item').removeClass('u-display-none').not('.is-' + filter).addClass('u-display-none');
        items = this.$('.js-resources-item.is-' + filter);
      }

      if (items.length > 0) $(items[0]).a11y_focus();
    }
  });
  var ResourcesView$1 = __AMD("extensions/adapt-contrib-resources/js/adapt-contrib-resourcesView", ResourcesView);

  var helpers$5 = {
    resources_has_type: function (resources, type, block) {
      var hasType = _.some(resources, _.matcher({
        _type: type
      }));

      return hasType ? block.fn(this) : block.inverse(this);
    },
    resources_has_multiple_types: function (resources, block) {
      if (resources.length === 1) return block.inverse(this);

      var allSameType = _.every(resources, _.matcher({
        _type: resources[0]._type
      }));

      return allSameType ? block.inverse(this) : block.fn(this);
    },
    resources_get_column_count: function (resources) {
      return _.uniq(_.pluck(resources, '_type')).length + 1;
    },
    resources_force_download: function (resource, block) {
      if (Adapt.device.browser === 'internet explorer' || Adapt.device.OS === 'ios') {
        return block.inverse(this);
      }

      return resource._forceDownload || resource.filename ? block.fn(this) : block.inverse(this);
    }
  };

  for (var name$5 in helpers$5) {
    if (helpers$5.hasOwnProperty(name$5)) {
      Handlebars__default['default'].registerHelper(name$5, helpers$5[name$5]);
    }
  }

  function setupResources(resourcesData) {
    var resourcesModel = new Backbone.Model(resourcesData);
    var resourcesCollection = new Backbone.Collection(resourcesModel.get('_resourcesItems'));
    Adapt.on('resources:showResources', function () {
      Adapt.drawer.triggerCustomView(new ResourcesView$1({
        model: resourcesModel,
        collection: resourcesCollection
      }).$el);
    });
  }

  function initResources() {
    var courseResources = Adapt.course.get('_resources');
    if (!courseResources || courseResources._isEnabled === false) return;
    var drawerObject = {
      title: courseResources.title,
      description: courseResources.description,
      className: 'is-resources',
      drawerOrder: courseResources._drawerOrder || 0
    };
    Adapt.drawer.addItem(drawerObject, 'resources:showResources');
    setupResources(courseResources);
  }

  Adapt.on('adapt:start', initResources);

  var Logger = function () {
    function Logger() {
      _classCallCheck(this, Logger);

      this.logArr = [];
      this.registeredViews = [];
    }

    _createClass(Logger, [{
      key: "getEntries",
      value: function getEntries() {
        return this.logArr;
      }
    }, {
      key: "getLastEntry",
      value: function getLastEntry() {
        return this.logArr[this.logArr.length - 1];
      }
    }, {
      key: "info",
      value: function info(str) {
        this.logArr[this.logArr.length] = {
          str: str,
          type: Logger.LOG_TYPE_INFO,
          time: Date.now()
        };
        this.updateViews();
      }
    }, {
      key: "warn",
      value: function warn(str) {
        this.logArr[this.logArr.length] = {
          str: str,
          type: Logger.LOG_TYPE_WARN,
          time: Date.now()
        };
        this.updateViews();
      }
    }, {
      key: "error",
      value: function error(str) {
        this.logArr[this.logArr.length] = {
          str: str,
          type: Logger.LOG_TYPE_ERROR,
          time: Date.now()
        };
        this.updateViews();
      }
    }, {
      key: "debug",
      value: function debug(str) {
        this.logArr[this.logArr.length] = {
          str: str,
          type: Logger.LOG_TYPE_DEBUG,
          time: Date.now()
        };
        this.updateViews();
      }
    }, {
      key: "registerView",
      value: function registerView(_view) {
        this.registeredViews[this.registeredViews.length] = _view;
      }
    }, {
      key: "unregisterView",
      value: function unregisterView(_view) {
        for (var i = 0, l = this.registeredViews.length; i < l; i++) {
          if (this.registeredViews[i] !== _view) continue;
          this.registeredViews.splice(i, 1);
          i--;
        }
      }
    }, {
      key: "updateViews",
      value: function updateViews() {
        for (var i = 0, l = this.registeredViews.length; i < l; i++) {
          if (!this.registeredViews[i]) continue;
          this.registeredViews[i].update(this);
        }
      }
    }], [{
      key: "getInstance",
      value: function getInstance() {
        if (Logger.instance === null) {
          Logger.instance = new Logger();
        }

        return Logger.instance;
      }
    }]);

    return Logger;
  }();

  Logger.instance = null;
  Logger.LOG_TYPE_INFO = 0;
  Logger.LOG_TYPE_WARN = 1;
  Logger.LOG_TYPE_ERROR = 2;
  Logger.LOG_TYPE_DEBUG = 3;
  var Logger$1 = __AMD("extensions/adapt-contrib-spoor/js/scorm/logger", Logger);

  var ScormWrapper = function () {
    function ScormWrapper() {
      _classCallCheck(this, ScormWrapper);

      this.setCompletedWhenFailed = true;
      this.commitOnStatusChange = true;
      this.commitOnAnyChange = false;
      this.timedCommitFrequency = 10;
      this.maxCommitRetries = 5;
      this.commitRetryDelay = 1000;
      this.commitRetryPending = false;
      this.commitRetries = 0;
      this.lastCommitSuccessTime = null;
      this.exitStateIfIncomplete = 'auto';
      this.exitStateIfComplete = 'auto';
      this.timedCommitIntervalID = null;
      this.retryCommitTimeoutID = null;
      this.logOutputWin = null;
      this.startTime = null;
      this.endTime = null;
      this.lmsConnected = false;
      this.finishCalled = false;
      this.logger = Logger$1.getInstance();
      this.scorm = pipwerks__default['default'].SCORM;
      this.scorm.handleExitMode = false;
      this.suppressErrors = false;
      this.debouncedCommit = _.debounce(this.commit.bind(this), 100);

      if (window.__debug) {
        this.showDebugWindow();
      }

      if (window.API && window.API.__offlineAPIWrapper || window.API_1484_11 && window.API_1484_11.__offlineAPIWrapper) {
        this.logger.error('Offline SCORM API is being used. No data will be reported to the LMS!');
      }
    }

    _createClass(ScormWrapper, [{
      key: "getVersion",
      value: function getVersion() {
        return this.scorm.version;
      }
    }, {
      key: "setVersion",
      value: function setVersion(value) {
        this.logger.debug("ScormWrapper::setVersion: ".concat(value));
        this.scorm.version = value;
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.logger.debug('ScormWrapper::initialize');
        this.lmsConnected = this.scorm.init();

        if (this.lmsConnected) {
          this.startTime = new Date();
          this.initTimedCommit();
        } else {
          this.handleError('Course could not connect to the LMS');
        }

        return this.lmsConnected;
      }
    }, {
      key: "isFirstSession",
      value: function isFirstSession() {
        return this.getValue(this.isSCORM2004() ? 'cmi.entry' : 'cmi.core.entry') === 'ab-initio';
      }
    }, {
      key: "setIncomplete",
      value: function setIncomplete() {
        this.setValue(this.isSCORM2004() ? 'cmi.completion_status' : 'cmi.core.lesson_status', 'incomplete');
        if (this.commitOnStatusChange && !this.commitOnAnyChange) this.commit();
      }
    }, {
      key: "setCompleted",
      value: function setCompleted() {
        this.setValue(this.isSCORM2004() ? 'cmi.completion_status' : 'cmi.core.lesson_status', 'completed');
        if (this.commitOnStatusChange && !this.commitOnAnyChange) this.commit();
      }
    }, {
      key: "setPassed",
      value: function setPassed() {
        if (this.isSCORM2004()) {
          this.setValue('cmi.completion_status', 'completed');
          this.setValue('cmi.success_status', 'passed');
        } else {
          this.setValue('cmi.core.lesson_status', 'passed');
        }

        if (this.commitOnStatusChange && !this.commitOnAnyChange) this.commit();
      }
    }, {
      key: "setFailed",
      value: function setFailed() {
        if (this.isSCORM2004()) {
          this.setValue('cmi.success_status', 'failed');

          if (this.setCompletedWhenFailed) {
            this.setValue('cmi.completion_status', 'completed');
          }
        } else {
          this.setValue('cmi.core.lesson_status', 'failed');
        }

        if (this.commitOnStatusChange && !this.commitOnAnyChange) this.commit();
      }
    }, {
      key: "getStatus",
      value: function getStatus() {
        var status = this.getValue(this.isSCORM2004() ? 'cmi.completion_status' : 'cmi.core.lesson_status');

        switch (status.toLowerCase()) {
          case 'passed':
          case 'completed':
          case 'incomplete':
          case 'failed':
          case 'browsed':
          case 'not attempted':
          case 'not_attempted':
          case 'unknown':
            return status;

          default:
            this.handleError("ScormWrapper::getStatus: invalid lesson status '".concat(status, "' received from LMS"));
            return null;
        }
      }
    }, {
      key: "setStatus",
      value: function setStatus(status) {
        switch (status.toLowerCase()) {
          case 'incomplete':
            this.setIncomplete();
            break;

          case 'completed':
            this.setCompleted();
            break;

          case 'passed':
            this.setPassed();
            break;

          case 'failed':
            this.setFailed();
            break;

          default:
            this.handleError("ScormWrapper::setStatus: the status '".concat(status, "' is not supported."));
        }
      }
    }, {
      key: "getScore",
      value: function getScore() {
        return this.getValue(this.isSCORM2004() ? 'cmi.score.raw' : 'cmi.core.score.raw');
      }
    }, {
      key: "setScore",
      value: function setScore(_score, _minScore, _maxScore) {
        if (this.isSCORM2004()) {
          this.setValue('cmi.score.raw', _score);
          this.setValue('cmi.score.min', _minScore);
          this.setValue('cmi.score.max', _maxScore);
          var range = _maxScore - _minScore;
          var scaledScore = ((_score - _minScore) / range).toFixed(7);
          this.setValue('cmi.score.scaled', scaledScore);
          return;
        }

        this.setValue('cmi.core.score.raw', _score);
        if (this.isSupported('cmi.core.score.min')) this.setValue('cmi.core.score.min', _minScore);
        if (this.isSupported('cmi.core.score.max')) this.setValue('cmi.core.score.max', _maxScore);
      }
    }, {
      key: "getLessonLocation",
      value: function getLessonLocation() {
        return this.getValue(this.isSCORM2004() ? 'cmi.location' : 'cmi.core.lesson_location');
      }
    }, {
      key: "setLessonLocation",
      value: function setLessonLocation(_location) {
        this.setValue(this.isSCORM2004() ? 'cmi.location' : 'cmi.core.lesson_location', _location);
      }
    }, {
      key: "getSuspendData",
      value: function getSuspendData() {
        return this.getValue('cmi.suspend_data');
      }
    }, {
      key: "setSuspendData",
      value: function setSuspendData(_data) {
        this.setValue('cmi.suspend_data', _data);
      }
    }, {
      key: "getStudentName",
      value: function getStudentName() {
        return this.getValue(this.isSCORM2004() ? 'cmi.learner_name' : 'cmi.core.student_name');
      }
    }, {
      key: "getStudentId",
      value: function getStudentId() {
        return this.getValue(this.isSCORM2004() ? 'cmi.learner_id' : 'cmi.core.student_id');
      }
    }, {
      key: "setLanguage",
      value: function setLanguage(_lang) {
        if (this.isSCORM2004()) {
          this.setValue('cmi.learner_preference.language', _lang);
          return;
        }

        if (this.isSupported('cmi.student_preference.language')) {
          this.setValue('cmi.student_preference.language', _lang);
        }
      }
    }, {
      key: "commit",
      value: function commit() {
        this.logger.debug('ScormWrapper::commit');

        if (!this.lmsConnected) {
          this.handleError('Course is not connected to the LMS');
          return;
        }

        if (this.commitRetryPending) {
          this.logger.debug('ScormWrapper::commit: skipping this commit call as one is already pending.');
        } else {
          if (this.scorm.save()) {
            this.commitRetries = 0;
            this.lastCommitSuccessTime = new Date();
          } else {
            if (this.commitRetries < this.maxCommitRetries && !this.finishCalled) {
              this.commitRetries++;
              this.initRetryCommit();
            } else {
              var _errorCode = this.scorm.debug.getCode();

              var _errorMsg = 'Course could not commit data to the LMS';
              _errorMsg += "\nError ".concat(_errorCode, ": ").concat(this.scorm.debug.getInfo(_errorCode));
              _errorMsg += "\nLMS Error Info: ".concat(this.scorm.debug.getDiagnosticInfo(_errorCode));
              this.handleError(_errorMsg);
            }
          }
        }
      }
    }, {
      key: "finish",
      value: function finish() {
        this.logger.debug('ScormWrapper::finish');

        if (!this.lmsConnected || this.finishCalled) {
          this.handleError('Course is not connected to the LMS');
          return;
        }

        this.finishCalled = true;

        if (this.timedCommitIntervalID !== null) {
          window.clearInterval(this.timedCommitIntervalID);
        }

        if (this.commitRetryPending) {
          window.clearTimeout(this.retryCommitTimeoutID);
          this.commitRetryPending = false;
        }

        if (this.logOutputWin && !this.logOutputWin.closed) {
          this.logOutputWin.close();
        }

        this.endTime = new Date();

        if (this.isSCORM2004()) {
          this.scorm.set('cmi.session_time', this.convertToSCORM2004Time(this.endTime.getTime() - this.startTime.getTime()));
          this.scorm.set('cmi.exit', this.getExitState());
        } else {
          this.scorm.set('cmi.core.session_time', this.convertToSCORM12Time(this.endTime.getTime() - this.startTime.getTime()));
          this.scorm.set('cmi.core.exit', this.getExitState());
        }

        this.lmsConnected = false;

        if (!this.scorm.quit()) {
          this.handleError('Course could not finish');
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction(id, response, correct, latency, type) {
        if (!this.isSupported('cmi.interactions._count')) {
          this.logger.info('ScormWrapper::recordInteraction: cmi.interactions are not supported by this LMS...');
          return;
        }

        switch (type) {
          case 'choice':
            this.recordInteractionMultipleChoice.apply(this, arguments);
            break;

          case 'matching':
            this.recordInteractionMatching.apply(this, arguments);
            break;

          case 'numeric':
            this.isSCORM2004() ? this.recordInteractionScorm2004.apply(this, arguments) : this.recordInteractionScorm12.apply(this, arguments);
            break;

          case 'fill-in':
            this.recordInteractionFillIn.apply(this, arguments);
            break;

          case 'sequencing':
            this.recordInteractionSequencing.apply(this, arguments);
            break;

          default:
            console.error("ScormWrapper.recordInteraction: unknown interaction type of '".concat(type, "' encountered..."));
        }
      }
    }, {
      key: "getValue",
      value: function getValue(_property) {
        this.logger.debug("ScormWrapper::getValue: _property=".concat(_property));

        if (this.finishCalled) {
          this.logger.debug("ScormWrapper::getValue: ignoring request as 'finish' has been called");
          return;
        }

        if (!this.lmsConnected) {
          this.handleError('Course is not connected to the LMS');
          return;
        }

        var _value = this.scorm.get(_property);

        var _errorCode = this.scorm.debug.getCode();

        var _errorMsg = '';

        if (_errorCode !== 0) {
          if (_errorCode === 403) {
            this.logger.warn('ScormWrapper::getValue: data model element not initialized');
          } else {
            _errorMsg += "Course could not get ".concat(_property);
            _errorMsg += "\nError Info: ".concat(this.scorm.debug.getInfo(_errorCode));
            _errorMsg += "\nLMS Error Info: ".concat(this.scorm.debug.getDiagnosticInfo(_errorCode));
            this.handleError(_errorMsg);
          }
        }

        this.logger.debug("ScormWrapper::getValue: returning ".concat(_value));
        return _value + '';
      }
    }, {
      key: "setValue",
      value: function setValue(_property, _value) {
        this.logger.debug("ScormWrapper::setValue: _property=".concat(_property, " _value=").concat(_value));

        if (this.finishCalled) {
          this.logger.debug("ScormWrapper::setValue: ignoring request as 'finish' has been called");
          return;
        }

        if (!this.lmsConnected) {
          this.handleError('Course is not connected to the LMS');
          return;
        }

        var _success = this.scorm.set(_property, _value);

        var _errorCode = this.scorm.debug.getCode();

        var _errorMsg = '';

        if (!_success) {
          if (_errorCode !== 0) {
            _errorMsg += "Course could not set ".concat(_property, " to ").concat(_value);
            _errorMsg += "\nError Info: ".concat(this.scorm.debug.getInfo(_errorCode));
            _errorMsg += "\nLMS Error Info: ".concat(this.scorm.debug.getDiagnosticInfo(_errorCode));
            this.handleError(_errorMsg);
          } else {
            this.logger.warn("ScormWrapper::setValue: LMS reported that the 'set' call failed but then said there was no error!");
          }
        }

        if (this.commitOnAnyChange) this.debouncedCommit();
        return _success;
      }
    }, {
      key: "isSupported",
      value: function isSupported(_property) {
        this.logger.debug("ScormWrapper::isSupported: _property=".concat(_property));

        if (this.finishCalled) {
          this.logger.debug("ScormWrapper::isSupported: ignoring request as 'finish' has been called");
          return;
        }

        if (!this.lmsConnected) {
          this.handleError('Course is not connected to the LMS');
          return false;
        }

        this.scorm.get(_property);
        return this.scorm.debug.getCode() === 401;
      }
    }, {
      key: "initTimedCommit",
      value: function initTimedCommit() {
        this.logger.debug('ScormWrapper::initTimedCommit');

        if (!this.commitOnAnyChange && this.timedCommitFrequency > 0) {
          var delay = this.timedCommitFrequency * (60 * 1000);
          this.timedCommitIntervalID = window.setInterval(this.commit.bind(this), delay);
        }
      }
    }, {
      key: "initRetryCommit",
      value: function initRetryCommit() {
        this.logger.debug("ScormWrapper::initRetryCommit ".concat(this.commitRetries, " out of ").concat(this.maxCommitRetries));
        this.commitRetryPending = true;
        this.retryCommitTimeoutID = window.setTimeout(this.doRetryCommit.bind(this), this.commitRetryDelay);
      }
    }, {
      key: "doRetryCommit",
      value: function doRetryCommit() {
        this.logger.debug('ScormWrapper::doRetryCommit');
        this.commitRetryPending = false;
        this.commit();
      }
    }, {
      key: "handleError",
      value: function handleError(_msg) {
        this.logger.error(_msg);

        if (!this.suppressErrors && (!this.logOutputWin || this.logOutputWin.closed) && confirm("An error has occured:\n\n".concat(_msg, "\n\nPress 'OK' to view debug information to send to technical support."))) {
          this.showDebugWindow();
        }
      }
    }, {
      key: "getInteractionCount",
      value: function getInteractionCount() {
        var count = this.getValue('cmi.interactions._count');
        return count === '' ? 0 : count;
      }
    }, {
      key: "recordInteractionScorm12",
      value: function recordInteractionScorm12(id, response, correct, latency, type) {
        id = this.trim(id);
        var cmiPrefix = "cmi.interactions.".concat(this.getInteractionCount());
        this.setValue("".concat(cmiPrefix, ".id"), id);
        this.setValue("".concat(cmiPrefix, ".type"), type);
        this.setValue("".concat(cmiPrefix, ".student_response"), response);
        this.setValue("".concat(cmiPrefix, ".result"), correct ? 'correct' : 'wrong');
        if (latency !== null && latency !== undefined) this.setValue("".concat(cmiPrefix, ".latency"), this.convertToSCORM12Time(latency));
        this.setValue("".concat(cmiPrefix, ".time"), this.getCMITime());
      }
    }, {
      key: "recordInteractionScorm2004",
      value: function recordInteractionScorm2004(id, response, correct, latency, type) {
        id = this.trim(id);
        var cmiPrefix = "cmi.interactions.".concat(this.getInteractionCount());
        this.setValue("".concat(cmiPrefix, ".id"), id);
        this.setValue("".concat(cmiPrefix, ".type"), type);
        this.setValue("".concat(cmiPrefix, ".learner_response"), response);
        this.setValue("".concat(cmiPrefix, ".result"), correct ? 'correct' : 'incorrect');
        if (latency !== null && latency !== undefined) this.setValue("".concat(cmiPrefix, ".latency"), this.convertToSCORM2004Time(latency));
        this.setValue("".concat(cmiPrefix, ".timestamp"), this.getISO8601Timestamp());
      }
    }, {
      key: "recordInteractionMultipleChoice",
      value: function recordInteractionMultipleChoice(id, response, correct, latency, type) {
        if (this.isSCORM2004()) {
          response = response.replace(/,|#/g, '[,]');
        } else {
          response = response.replace(/#/g, ',');
        }

        var scormRecordInteraction = this.isSCORM2004() ? this.recordInteractionScorm2004 : this.recordInteractionScorm12;
        scormRecordInteraction.call(this, id, response, correct, latency, type);
      }
    }, {
      key: "recordInteractionSequencing",
      value: function recordInteractionSequencing(id, response, correct, latency, type) {
        if (this.isSCORM2004()) {
          response = response.replace(/,|#/g, '[,]');
        } else {
          response = response.replace(/#/g, ',');
        }

        var scormRecordInteraction = this.isSCORM2004() ? this.recordInteractionScorm2004 : this.recordInteractionScorm12;
        scormRecordInteraction.call(this, id, response, correct, latency, type);
      }
    }, {
      key: "recordInteractionMatching",
      value: function recordInteractionMatching(id, response, correct, latency, type) {
        response = response.replace(/#/g, ',');

        if (this.isSCORM2004()) {
          response = response.replace(/,/g, '[,]');
          response = response.replace(/\./g, '[.]');
        } else {
          response = this.checkResponse(response, 'matching');
        }

        var scormRecordInteraction = this.isSCORM2004() ? this.recordInteractionScorm2004 : this.recordInteractionScorm12;
        scormRecordInteraction.call(this, id, response, correct, latency, type);
      }
    }, {
      key: "recordInteractionFillIn",
      value: function recordInteractionFillIn(id, response, correct, latency, type) {
        var maxLength = this.isSCORM2004() ? 250 : 255;

        if (response.length > maxLength) {
          response = response.substr(0, maxLength);
          this.logger.warn("ScormWrapper::recordInteractionFillIn: response data for ".concat(id, " is longer than the maximum allowed length of ").concat(maxLength, " characters; data will be truncated to avoid an error."));
        }

        var scormRecordInteraction = this.isSCORM2004() ? this.recordInteractionScorm2004 : this.recordInteractionScorm12;
        scormRecordInteraction.call(this, id, response, correct, latency, type);
      }
    }, {
      key: "showDebugWindow",
      value: function showDebugWindow() {
        if (this.logOutputWin && !this.logOutputWin.closed) {
          this.logOutputWin.close();
        }

        this.logOutputWin = window.open('log_output.html', 'Log', 'width=600,height=300,status=no,scrollbars=yes,resizable=yes,menubar=yes,toolbar=yes,location=yes,top=0,left=0');

        if (this.logOutputWin) {
          this.logOutputWin.focus();
        }
      }
    }, {
      key: "convertToSCORM12Time",
      value: function convertToSCORM12Time(msConvert) {
        var msPerSec = 1000;
        var msPerMin = msPerSec * 60;
        var msPerHour = msPerMin * 60;
        var ms = msConvert % msPerSec;
        msConvert = msConvert - ms;
        var secs = msConvert % msPerMin;
        msConvert = msConvert - secs;
        secs = secs / msPerSec;
        var mins = msConvert % msPerHour;
        msConvert = msConvert - mins;
        mins = mins / msPerMin;
        var hrs = msConvert / msPerHour;

        if (hrs > 9999) {
          return '9999:99:99.99';
        }

        var str = [this.padWithZeroes(hrs, 4), this.padWithZeroes(mins, 2), this.padWithZeroes(secs, 2)].join(':');
        return "".concat(str, ".").concat(Math.floor(ms / 10));
      }
    }, {
      key: "convertToSCORM2004Time",
      value: function convertToSCORM2004Time(msConvert) {
        var csConvert = Math.floor(msConvert / 10);
        var csPerSec = 100;
        var csPerMin = csPerSec * 60;
        var csPerHour = csPerMin * 60;
        var csPerDay = csPerHour * 24;
        var days = Math.floor(csConvert / csPerDay);
        csConvert -= days * csPerDay;
        days = days ? days + 'D' : '';
        var hours = Math.floor(csConvert / csPerHour);
        csConvert -= hours * csPerHour;
        hours = hours ? hours + 'H' : '';
        var mins = Math.floor(csConvert / csPerMin);
        csConvert -= mins * csPerMin;
        mins = mins ? mins + 'M' : '';
        var secs = Math.floor(csConvert / csPerSec);
        csConvert -= secs * csPerSec;
        secs = secs || '0';
        var cs = csConvert;
        cs = cs ? '.' + cs : '';
        var seconds = secs + cs + 'S';
        var hms = [hours, mins, seconds].join('');
        return 'P' + days + 'T' + hms;
      }
    }, {
      key: "getCMITime",
      value: function getCMITime() {
        var date = new Date();
        var hours = this.padWithZeroes(date.getHours(), 2);
        var min = this.padWithZeroes(date.getMinutes(), 2);
        var sec = this.padWithZeroes(date.getSeconds(), 2);
        return [hours, min, sec].join(':');
      }
    }, {
      key: "getISO8601Timestamp",
      value: function getISO8601Timestamp() {
        var date = new Date().toISOString();
        return date.replace(/.\d\d\dZ/, '');
      }
    }, {
      key: "padWithZeroes",
      value: function padWithZeroes(numToPad, padBy) {
        var len = padBy;

        while (--len) {
          numToPad = '0' + numToPad;
        }

        return numToPad.slice(-padBy);
      }
    }, {
      key: "trim",
      value: function trim(str) {
        return str.replace(/^\s*|\s*$/g, '');
      }
    }, {
      key: "isSCORM2004",
      value: function isSCORM2004() {
        return this.scorm.version === '2004';
      }
    }, {
      key: "checkResponse",
      value: function checkResponse(response, responseType) {
        if (!response) return response;
        if (responseType !== 'choice' && responseType !== 'matching') return response;
        response = response.split(/,|#/);
        var self = this;

        if (responseType === 'choice') {
          response = response.map(checkIdentifier);
        } else {
          response = response.map(function (r) {
            var identifiers = r.split('.');
            return checkIdentifier(identifiers[0]) + '.' + checkIdentifier(identifiers[1]);
          });
        }

        function checkIdentifier(r) {
          var i;
          if (r.length === 1 && r >= '0' && r <= '9') return r;
          if (r.length === 1 && r >= 'a' && r <= 'z') return r;
          i = parseInt(r);

          if (isNaN(i) || i < 10 || i > 35) {
            self.handleError('Numeric choice/matching response elements must use a value from 0 to 35 in SCORM 1.2');
          }

          return Number(i).toString(36);
        }

        return response.join(',');
      }
    }, {
      key: "getExitState",
      value: function getExitState() {
        var completionStatus = this.scorm.data.completionStatus;
        var isIncomplete = completionStatus === 'incomplete' || completionStatus === 'not attempted';
        var exitState = isIncomplete ? this.exitStateIfIncomplete : this.exitStateIfComplete;
        if (exitState !== 'auto') return exitState;
        if (this.isSCORM2004()) return isIncomplete ? 'suspend' : 'normal';
        return '';
      }
    }], [{
      key: "getInstance",
      value: function getInstance() {
        if (ScormWrapper.instance === null) {
          ScormWrapper.instance = new ScormWrapper();
        }

        return ScormWrapper.instance;
      }
    }]);

    return ScormWrapper;
  }();

  ScormWrapper.instance = null;
  var ScormWrapper$1 = __AMD("extensions/adapt-contrib-spoor/js/scorm/wrapper", ScormWrapper);

  var ZeroString = {};

  function makeZeroString(length) {
    ZeroString[length] = ZeroString[length] || new Array(length + 1).join('0');
    return ZeroString[length];
  }

  for (var i = 1, l = 64; i <= l; i++) {
    makeZeroString(i);
  }

  function zeroPadRightToLength(string, length) {
    var padLength = length - string.length;

    if (padLength > 0) {
      string += makeZeroString(padLength);
    }

    return string;
  }

  function zeroPadLeftToLength(string, length) {
    var padLength = length - string.length;

    if (padLength > 0) {
      string = makeZeroString(padLength) + string;
    }

    return string;
  }

  function zeroPadRightToMultiple(string, multiple) {
    var padLength = multiple - string.length % multiple;

    if (padLength !== multiple) {
      string += makeZeroString(padLength);
    }

    return string;
  }

  function binaryToUnsignedInteger(binary, binaryLength) {
    if (binaryLength === 0) {
      return 0;
    }

    binary = zeroPadLeftToLength(binary, binaryLength);
    var integer = parseInt(binary.slice(0, binaryLength), 2);
    return integer;
  }

  function shiftUnsignedIntegerFromBinary(binary, binaryLength) {
    if (binaryLength === 0) {
      return [0, binary];
    }

    binary = zeroPadLeftToLength(binary, binaryLength);
    var integer = parseInt(binary.slice(0, binaryLength), 2);
    binary = binary.slice(binaryLength);
    return [integer, binary];
  }

  function shiftBinary(binary, binaryLength) {
    if (binaryLength === 0) {
      return ['', binary];
    }

    binary = zeroPadLeftToLength(binary, binaryLength);
    var shifted = binary.slice(0, binaryLength);
    binary = binary.slice(binaryLength);
    return [shifted, binary];
  }

  function unsignedIntegerToBinary(integer, binaryLength) {
    if (binaryLength === 0) {
      return '';
    }

    var binary = Math.abs(integer).toString(2);

    if (typeof binaryLength === 'undefined') {
      return binary;
    }

    var length = binary.length;

    if (length > binaryLength) {
      throw new Error("Integer too big for specified binary length. integer: ".concat(integer, " binarylen: ").concat(binaryLength));
    }

    binary = zeroPadLeftToLength(binary, binaryLength);
    return binary;
  }

  function byteArrayToString(array) {
    var arrayLength = array.length;
    var string = new Array(arrayLength);

    for (var _i = 0, _l = arrayLength; _i < _l; _i++) {
      string[_i] = String.fromCharCode(array[_i]);
    }

    string = string.join('');
    return string;
  }

  function stringToByteArray(string) {
    var stringLength = string.length;
    var array = new Array(stringLength);

    for (var _i2 = 0, _l2 = stringLength; _i2 < _l2; _i2++) {
      array[_i2] = string.charCodeAt(_i2);
    }

    return array;
  }

  var BYTE_BIT_LENGTH = 8;

  function binaryToBase64(binary) {
    binary = ___default['default'].flatten(binary).join('');
    binary = zeroPadRightToMultiple(binary, BYTE_BIT_LENGTH);
    var bytesCount = binary.length / BYTE_BIT_LENGTH;
    var charCodes = new Array(bytesCount);

    for (var _i3 = 0, _l3 = bytesCount; _i3 < _l3; _i3++) {
      var _shiftUnsignedInteger = shiftUnsignedIntegerFromBinary(binary, BYTE_BIT_LENGTH);

      var _shiftUnsignedInteger2 = _slicedToArray(_shiftUnsignedInteger, 2);

      charCodes[_i3] = _shiftUnsignedInteger2[0];
      binary = _shiftUnsignedInteger2[1];
    }

    var base64 = btoa(byteArrayToString(charCodes));
    base64 = base64.replace(/=/g, '');
    base64 = base64.replace(/\+/g, '-');
    return base64;
  }

  function base64ToBinary(base64) {
    base64 = base64.replace(/-/g, '+');
    var charCodes = stringToByteArray(atob(base64));
    var bytesCount = charCodes.length;
    var binary = new Array(bytesCount);

    for (var _i4 = 0, _l4 = bytesCount; _i4 < _l4; _i4++) {
      binary[_i4] = unsignedIntegerToBinary(charCodes[_i4], BYTE_BIT_LENGTH);
    }

    binary = binary.join('');
    return binary;
  }

  var logs = {
    usedTypes: {},
    typeLengths: {},
    binarySamples: {}
  };

  var AbstractValueType = function () {
    function AbstractValueType(options) {
      _classCallCheck(this, AbstractValueType);

      Object.assign(this, options);
      this.binaryTypeLength = this.binaryType.length;
    }

    _createClass(AbstractValueType, [{
      key: "log",
      value: function log(binary) {
        var name = this.name;
        logs.usedTypes[name] = logs.usedTypes[name] || 0;
        logs.usedTypes[name]++;
        logs.binarySamples[name] = logs.binarySamples[name] || [];
        logs.binarySamples[name].push(binary);
      }
    }]);

    return AbstractValueType;
  }();

  var FixedIntegerType = function (_AbstractValueType) {
    _inherits(FixedIntegerType, _AbstractValueType);

    var _super = _createSuper(FixedIntegerType);

    function FixedIntegerType(options) {
      var _this;

      _classCallCheck(this, FixedIntegerType);

      _this = _super.call(this, options);
      _this.esType = 'number';

      if (!_this.valueBinaryLength) {
        return _possibleConstructorReturn(_this);
      }

      _this.minValue = options.minValue || 0;
      _this.maxValue = options.maxValue || Math.pow(2, _this.valueBinaryLength) - 1;
      return _this;
    }

    _createClass(FixedIntegerType, [{
      key: "valueToBinary",
      value: function valueToBinary(integer) {
        var logStats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var binary = unsignedIntegerToBinary(integer, this.valueBinaryLength);

        if (logStats) {
          this.log(binary);
        }

        binary = [binary];
        return binary;
      }
    }, {
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var integer;

        var _shiftUnsignedInteger3 = shiftUnsignedIntegerFromBinary(binary, this.valueBinaryLength);

        var _shiftUnsignedInteger4 = _slicedToArray(_shiftUnsignedInteger3, 2);

        integer = _shiftUnsignedInteger4[0];
        binary = _shiftUnsignedInteger4[1];
        return [integer, binary];
      }
    }]);

    return FixedIntegerType;
  }(AbstractValueType);

  var FixedBooleanType = function (_FixedIntegerType) {
    _inherits(FixedBooleanType, _FixedIntegerType);

    var _super2 = _createSuper(FixedBooleanType);

    function FixedBooleanType(options) {
      var _this2;

      _classCallCheck(this, FixedBooleanType);

      options.valueBinaryLength = 1;
      _this2 = _super2.call(this, options);
      _this2.esType = 'boolean';
      return _this2;
    }

    _createClass(FixedBooleanType, [{
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var bool = binary[0] === '1';
        binary = binary.slice(1);
        return [bool, binary];
      }
    }]);

    return FixedBooleanType;
  }(FixedIntegerType);

  var LengthAndValueBinary = function () {
    function LengthAndValueBinary(parent, name, bitSizes) {
      _classCallCheck(this, LengthAndValueBinary);

      this.parent = parent;
      this.name = name;
      this.bitSizes = bitSizes;
      this.maxValues = ___default['default'].flatten(this.bitSizes).map(function (value) {
        return Math.pow(2, value) - 1;
      });
      this.maxValue = this.maxValues[this.maxValues.length - 1];
      this.sizeBinaryLength = unsignedIntegerToBinary(this.bitSizes.length - 1).length;
    }

    _createClass(LengthAndValueBinary, [{
      key: "valueToBinary",
      value: function valueToBinary(integer) {
        var logStats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var parentName = this.parent.name;
        var sizeIndex = this.maxValues.findIndex(function (maxValue) {
          return integer <= maxValue;
        });

        if (sizeIndex === -1) {
          throw new Error("Value is too large for type: ".concat(parentName, " value: ").concat(integer, " max: ").concat(this.maxValue));
        }

        var sizeBinary = unsignedIntegerToBinary(sizeIndex, this.sizeBinaryLength);
        var valueLength = this.bitSizes[sizeIndex];
        var name = this.name;

        if (logStats) {
          logs.typeLengths[parentName] = logs.typeLengths[parentName] || {};
          logs.typeLengths[parentName][name] = logs.typeLengths[parentName][name] || {};
          logs.typeLengths[parentName][name][valueLength] = logs.typeLengths[parentName][name][valueLength] || 0;
          logs.typeLengths[parentName][name][valueLength]++;
        }

        var integerBinary = unsignedIntegerToBinary(integer, valueLength);
        var binary = [sizeBinary, integerBinary];
        return binary;
      }
    }, {
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var sizeBinary;

        var _shiftBinary = shiftBinary(binary, this.sizeBinaryLength);

        var _shiftBinary2 = _slicedToArray(_shiftBinary, 2);

        sizeBinary = _shiftBinary2[0];
        binary = _shiftBinary2[1];
        var sizeIndex = binaryToUnsignedInteger(sizeBinary);
        var valueLength = this.bitSizes[sizeIndex];
        var integer;

        var _shiftUnsignedInteger5 = shiftUnsignedIntegerFromBinary(binary, valueLength);

        var _shiftUnsignedInteger6 = _slicedToArray(_shiftUnsignedInteger5, 2);

        integer = _shiftUnsignedInteger6[0];
        binary = _shiftUnsignedInteger6[1];
        return [integer, binary];
      }
    }]);

    return LengthAndValueBinary;
  }();

  var VariableIntegerType = function (_FixedIntegerType2) {
    _inherits(VariableIntegerType, _FixedIntegerType2);

    var _super3 = _createSuper(VariableIntegerType);

    function VariableIntegerType(options) {
      var _this3;

      _classCallCheck(this, VariableIntegerType);

      _this3 = _super3.call(this, options);
      _this3.isNegative = _this3.minValue < 0 && _this3.maxValue === 0;
      _this3.integer = new LengthAndValueBinary(_assertThisInitialized(_this3), 'integer', options.integerBitSizes);
      return _this3;
    }

    _createClass(VariableIntegerType, [{
      key: "valueToBinary",
      value: function valueToBinary(integer) {
        var logStats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        integer = integer.toFixed(0);
        var binary = this.integer.valueToBinary(Math.abs(integer), logStats);

        if (logStats) {
          this.log(binary);
        }

        return binary;
      }
    }, {
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var integer;

        var _this$integer$shiftVa = this.integer.shiftValueFromBinary(binary);

        var _this$integer$shiftVa2 = _slicedToArray(_this$integer$shiftVa, 2);

        integer = _this$integer$shiftVa2[0];
        binary = _this$integer$shiftVa2[1];

        if (this.isNegative) {
          integer = -integer;
        }

        return [integer, binary];
      }
    }]);

    return VariableIntegerType;
  }(FixedIntegerType);

  var VariableArrayType = function (_VariableIntegerType) {
    _inherits(VariableArrayType, _VariableIntegerType);

    var _super4 = _createSuper(VariableArrayType);

    function VariableArrayType(options) {
      var _this4;

      _classCallCheck(this, VariableArrayType);

      _this4 = _super4.call(this, options);
      _this4.esType = 'array';
      return _this4;
    }

    _createClass(VariableArrayType, [{
      key: "valueToBinary",
      value: function valueToBinary(array) {
        var logStats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var arrayLength = array.length;

        var binary = _get(_getPrototypeOf(VariableArrayType.prototype), "valueToBinary", this).call(this, arrayLength);

        if (arrayLength) {
          var valueType = findValueTypeFromValues(array);
          binary.push(valueType.binaryType);
          binary.type = valueType.name;
          binary.push(array.map(function (value) {
            return valueType.valueToBinary(value, logStats);
          }));
        }

        if (logStats) {
          this.log(binary);
        }

        return binary;
      }
    }, {
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var arrayLength;

        var _get$call = _get(_getPrototypeOf(VariableArrayType.prototype), "shiftValueFromBinary", this).call(this, binary);

        var _get$call2 = _slicedToArray(_get$call, 2);

        arrayLength = _get$call2[0];
        binary = _get$call2[1];
        var value = new Array(arrayLength);

        if (arrayLength) {
          var valueType;

          var _shiftValueTypeFromBi = shiftValueTypeFromBinary(binary);

          var _shiftValueTypeFromBi2 = _slicedToArray(_shiftValueTypeFromBi, 2);

          valueType = _shiftValueTypeFromBi2[0];
          binary = _shiftValueTypeFromBi2[1];

          for (var _i5 = 0, _l5 = arrayLength; _i5 < _l5; _i5++) {
            var _valueType$shiftValue = valueType.shiftValueFromBinary(binary);

            var _valueType$shiftValue2 = _slicedToArray(_valueType$shiftValue, 2);

            value[_i5] = _valueType$shiftValue2[0];
            binary = _valueType$shiftValue2[1];
          }
        }

        return [value, binary];
      }
    }]);

    return VariableArrayType;
  }(VariableIntegerType);

  var VariableSignedIntegerType = function (_VariableIntegerType2) {
    _inherits(VariableSignedIntegerType, _VariableIntegerType2);

    var _super5 = _createSuper(VariableSignedIntegerType);

    function VariableSignedIntegerType() {
      _classCallCheck(this, VariableSignedIntegerType);

      return _super5.apply(this, arguments);
    }

    _createClass(VariableSignedIntegerType, [{
      key: "valueToBinary",
      value: function valueToBinary(integer) {
        var logStats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        integer = integer.toFixed(0);
        var isNegative = integer < 0;
        var signBinary = isNegative ? '1' : '0';
        var integerBinary = this.integer.valueToBinary(Math.abs(integer), logStats);
        var binary = [signBinary, integerBinary];

        if (logStats) {
          this.log(binary);
        }

        return binary;
      }
    }, {
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var isNegative;

        var _shiftUnsignedInteger7 = shiftUnsignedIntegerFromBinary(binary, 1);

        var _shiftUnsignedInteger8 = _slicedToArray(_shiftUnsignedInteger7, 2);

        isNegative = _shiftUnsignedInteger8[0];
        binary = _shiftUnsignedInteger8[1];
        var integer;

        var _this$integer$shiftVa3 = this.integer.shiftValueFromBinary(binary);

        var _this$integer$shiftVa4 = _slicedToArray(_this$integer$shiftVa3, 2);

        integer = _this$integer$shiftVa4[0];
        binary = _this$integer$shiftVa4[1];

        if (isNegative) {
          integer = -integer;
        }

        return [integer, binary];
      }
    }]);

    return VariableSignedIntegerType;
  }(VariableIntegerType);

  var VariableDecimalType = function (_VariableIntegerType3) {
    _inherits(VariableDecimalType, _VariableIntegerType3);

    var _super6 = _createSuper(VariableDecimalType);

    function VariableDecimalType(options) {
      var _this5;

      _classCallCheck(this, VariableDecimalType);

      _this5 = _super6.call(this, options);
      _this5.isFloat = true;
      _this5.decimal = new LengthAndValueBinary(_assertThisInitialized(_this5), 'decimal', options.decimalBitSizes);
      return _this5;
    }

    _createClass(VariableDecimalType, [{
      key: "valueToBinary",
      value: function valueToBinary(float) {
        var logStats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        float = float.toFixed(2);
        var isNegative = float < 0;
        float = Math.abs(float);
        var parts = String(float).split('.');
        var higherInteger = parseInt(parts[0]);
        var lowerInteger = parseInt(zeroPadRightToLength(parts[1] || 0, 2));
        var signBinary = isNegative ? '1' : '0';
        var integerValueBinary = this.integer.valueToBinary(higherInteger, logStats);
        var decimalValueBinary = this.decimal.valueToBinary(lowerInteger, logStats);
        var binary = [signBinary, integerValueBinary, decimalValueBinary];

        if (logStats) {
          this.log(binary);
        }

        return binary;
      }
    }, {
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var isNegative;

        var _shiftUnsignedInteger9 = shiftUnsignedIntegerFromBinary(binary, 1);

        var _shiftUnsignedInteger10 = _slicedToArray(_shiftUnsignedInteger9, 2);

        isNegative = _shiftUnsignedInteger10[0];
        binary = _shiftUnsignedInteger10[1];
        var higherInteger;

        var _this$integer$shiftVa5 = this.integer.shiftValueFromBinary(binary);

        var _this$integer$shiftVa6 = _slicedToArray(_this$integer$shiftVa5, 2);

        higherInteger = _this$integer$shiftVa6[0];
        binary = _this$integer$shiftVa6[1];
        var lowerInteger;

        var _this$decimal$shiftVa = this.decimal.shiftValueFromBinary(binary);

        var _this$decimal$shiftVa2 = _slicedToArray(_this$decimal$shiftVa, 2);

        lowerInteger = _this$decimal$shiftVa2[0];
        binary = _this$decimal$shiftVa2[1];
        lowerInteger = zeroPadLeftToLength(String(lowerInteger), 2);
        var float = parseFloat(higherInteger + '.' + lowerInteger);

        if (isNegative) {
          float = -float;
        }

        return [float, binary];
      }
    }]);

    return VariableDecimalType;
  }(VariableIntegerType);

  var arrayType = new VariableArrayType({
    name: 'array',
    binaryType: '10',
    integerBitSizes: [4, 16]
  });
  var booleanType = new FixedBooleanType({
    name: 'boolean',
    binaryType: '0'
  });
  var integerTypes = [new FixedIntegerType({
    name: 'uint3',
    binaryType: '1110',
    valueBinaryLength: 3
  }), new VariableIntegerType({
    name: 'vint8+',
    binaryType: '110',
    minValue: 0,
    maxValue: 255,
    integerBitSizes: [2, 8]
  }), new VariableIntegerType({
    name: 'vint8-',
    binaryType: '111100',
    minValue: -255,
    maxValue: 0,
    integerBitSizes: [2, 8]
  }), new VariableSignedIntegerType({
    name: 'sint32',
    binaryType: '111110',
    minValue: -4294967295,
    maxValue: 4294967295,
    integerBitSizes: [2, 4, 16, 32]
  })];
  var decimalTypes = [new VariableDecimalType({
    name: 'sdec15',
    binaryType: '111101',
    minValue: -255.99,
    maxValue: 255.99,
    integerBitSizes: [2, 8],
    decimalBitSizes: [0, 7]
  }), new VariableDecimalType({
    name: 'sdec39',
    binaryType: '111111',
    minValue: -4294967295.99,
    maxValue: 4294967295.99,
    integerBitSizes: [2, 4, 16, 32],
    decimalBitSizes: [0, 7]
  })];
  var ValueTypes = [booleanType, arrayType].concat(integerTypes).concat(decimalTypes);
  ValueTypes.nameIndex = {};
  ValueTypes.forEach(function (valueType) {
    return ValueTypes.nameIndex[valueType.name] = valueType;
  });

  function esTypeOf(value) {
    if (Array.isArray(value)) {
      return 'array';
    }

    if (value === null) {
      return 'null';
    }

    return _typeof(value);
  }

  function findValueTypeFromName(name) {
    return ValueTypes.nameIndex[name.toLowerCase()];
  }

  function findValueTypeFromValue(value) {
    var esType = esTypeOf(value);

    switch (esType) {
      case 'array':
        return arrayType;

      case 'boolean':
        return booleanType;
    }

    value = value.toFixed(2);
    var isFloat = !Number.isInteger(value);

    var isValueInValueTypeRange = function (valueType) {
      return value >= valueType.minValue && value <= valueType.maxValue;
    };

    var valueType = isFloat ? decimalTypes.find(isValueInValueTypeRange) : integerTypes.find(isValueInValueTypeRange);

    if (!valueType) {
      throw new Error("Cannot find type from value: ".concat(value));
    }

    return valueType;
  }

  function findValueTypeFromValues(values) {
    if (!values.length) {
      return;
    }

    var minValue = 0;
    var maxValue = 0;
    var isFloat = false;
    var esTypes = values.map(function (value) {
      var valueType = findValueTypeFromValue(value);

      if (valueType.esType === 'number') {
        minValue = ___default['default'].min([value, minValue]);
        maxValue = ___default['default'].max([value, maxValue]);
        isFloat = isFloat || !Number.isInteger(value);
      }

      return valueType.esType;
    });

    var uniqESTypes = ___default['default'].uniq(esTypes);

    if (uniqESTypes.length > 1) {
      throw new Error("Cannot resolve array to one type: ".concat(uniqESTypes.join()));
    }

    var esType = uniqESTypes[0];

    switch (esType) {
      case 'array':
        return arrayType;

      case 'boolean':
        return booleanType;
    }

    var isRangeInValueTypeRange = function (valueType) {
      return minValue >= valueType.minValue && maxValue <= valueType.maxValue;
    };

    var valueType = isFloat ? decimalTypes.find(isRangeInValueTypeRange) : integerTypes.find(isRangeInValueTypeRange);

    if (!valueType) {
      throw new Error("Cannot find type from value. min: ".concat(minValue, " max: ").concat(maxValue, " isfloat: ").concat(isFloat));
    }

    return valueType;
  }

  function shiftValueTypeFromBinary(binary) {
    var valueType = ValueTypes.find(function (valueType) {
      var binaryType = binary.slice(0, valueType.binaryTypeLength);
      return binaryType === valueType.binaryType;
    });

    if (!valueType) {
      throw new Error("Cannot find type from binary: ".concat(binary.slice(0, 6), "..."));
    }

    binary = binary.slice(valueType.binaryTypeLength);
    return [valueType, binary];
  }

  function convertValuesToNumbers(value) {
    var esType = esTypeOf(value);

    switch (esType) {
      case 'array':
        return value.map(convertValuesToNumbers);

      case 'undefined':
      case 'null':
        return value ? 1 : 0;

      case 'boolean':
      case 'number':
        return value;
    }

    throw new Error("Cannot convert ".concat(esType, " to number"));
  }

  var Converter = function () {
    function Converter() {
      _classCallCheck(this, Converter);
    }

    _createClass(Converter, [{
      key: "getInvalidTypeError",
      value: function getInvalidTypeError(value) {
        try {
          value = convertValuesToNumbers(value);
          esTypeOf(value) === 'array' ? findValueTypeFromValues(value) : findValueTypeFromValue(value);
          return;
        } catch (err) {
          return err;
        }
      }
    }, {
      key: "valueToBinary",
      value: function valueToBinary(value) {
        var typeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var logStats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        this.clearLog();
        var hasInitialType = typeof typeName === 'string';
        value = convertValuesToNumbers(value);
        var valueType = hasInitialType ? findValueTypeFromName(typeName) : findValueTypeFromValue(value);

        if (!valueType) {
          throw new Error("Could not find value type from ".concat(hasInitialType ? "name ".concat(typeName) : "value ".concat(value), " accepts: ").concat(Object.keys(ValueTypes.nameIndex), ". Leave typeName empty for auto-detect."));
        }

        var binary = valueType.valueToBinary(value, logStats);

        if (!hasInitialType) {
          binary.unshift(valueType.binaryType);
        }

        if (logStats) {
          this.printLog();
        }

        return binary;
      }
    }, {
      key: "valueFromBinary",
      value: function valueFromBinary(binary) {
        var typeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        binary = ___default['default'].flatten(binary).join('');
        var hasInitialType = typeof typeName === 'string';
        var valueType;

        if (hasInitialType) {
          valueType = findValueTypeFromName(typeName);
        } else {
          var _shiftValueTypeFromBi3 = shiftValueTypeFromBinary(binary);

          var _shiftValueTypeFromBi4 = _slicedToArray(_shiftValueTypeFromBi3, 2);

          valueType = _shiftValueTypeFromBi4[0];
          binary = _shiftValueTypeFromBi4[1];
        }

        if (!valueType || !(valueType instanceof AbstractValueType)) {
          throw new Error("Could not find value type from ".concat(hasInitialType ? "name \"".concat(typeName, "\"") : "binary \"".concat(binary.slice(0, 8), "\"..."), " accepts: ").concat(Object.keys(ValueTypes.nameIndex), ". Leave typeName empty for auto-detect."));
        }

        var _valueType$shiftValue3 = valueType.shiftValueFromBinary(binary),
            _valueType$shiftValue4 = _slicedToArray(_valueType$shiftValue3, 1),
            value = _valueType$shiftValue4[0];

        return value;
      }
    }, {
      key: "clearLog",
      value: function clearLog() {
        logs.usedTypes = {};
        logs.typeLengths = {};
        logs.binarySamples = {};
      }
    }, {
      key: "printLog",
      value: function printLog() {
        console.log('Types used count:', logs.usedTypes);
        console.log('Type lengths used count:', logs.typeLengths);
        console.log('Type binary samples:', logs.binarySamples);
      }
    }, {
      key: "serialize",
      value: function serialize(value) {
        var typeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var logStats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var binary = this.valueToBinary(value, typeName, logStats);
        var base64 = binaryToBase64(binary);
        return base64;
      }
    }, {
      key: "deserialize",
      value: function deserialize(base64) {
        var typeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var binary = base64ToBinary(base64);
        var value = this.valueFromBinary(binary, typeName);
        return value;
      }
    }]);

    return Converter;
  }();

  var SCORMSuspendData = __AMD("extensions/adapt-contrib-spoor/js/serializers/SCORMSuspendData", window.SCORMSuspendData = new Converter());

  var ComponentSerializer = function (_Backbone$Controller) {
    _inherits(ComponentSerializer, _Backbone$Controller);

    var _super = _createSuper(ComponentSerializer);

    function ComponentSerializer() {
      _classCallCheck(this, ComponentSerializer);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentSerializer, [{
      key: "initialize",
      value: function initialize(trackingIdType) {
        this.trackingIdType = trackingIdType;
      }
    }, {
      key: "serialize",
      value: function serialize() {
        var _this = this;

        var states = [];
        Adapt.data.each(function (model) {
          if (model.get('_type') !== _this.trackingIdType) {
            return;
          }

          var trackingId = model.get('_trackingId');

          if (typeof trackingId === 'undefined') {
            return;
          }

          var isContainer = model.hasManagedChildren;
          var components = isContainer ? model.findDescendantModels('component') : [model];
          components.forEach(function (component, index) {
            var modelState = null;

            if (!component.getAttemptState) {
              modelState = component.get('_isQuestionType') ? [[component.get('_score') || 0, component.get('_attemptsLeft') || 0], [component.get('_isComplete') || false, component.get('_isInteractionComplete') || false, component.get('_isSubmitted') || false, component.get('_isCorrect') || false], [component.get('_userAnswer')]] : [[], [component.get('_isComplete') || false, component.get('_isInteractionComplete') || false], [component.get('_userAnswer')]];
            } else {
              modelState = component.getAttemptState();
            }

            var userAnswer = modelState[2][0];
            var hasUserAnswer = typeof userAnswer !== 'undefined' && userAnswer !== null;
            var isUserAnswerArray = Array.isArray(userAnswer);

            if (!hasUserAnswer) {
              modelState[2][0] = [];
            } else if (!isUserAnswerArray) {
              modelState[2][0] = [modelState[2][0]];
            }

            var attemptStates = modelState[2][0];
            var hasAttemptStates = !Array.isArray(attemptStates);

            if (!hasAttemptStates) {
              modelState[2][1] = [];
            }

            var state = [[trackingId, index], [hasUserAnswer, isUserAnswerArray, hasAttemptStates], modelState];
            states.push(state);
          });
        });
        return SCORMSuspendData.serialize(states);
      }
    }, {
      key: "deserialize",
      value: function deserialize(binary) {
        var trackingIdMap = Adapt.data.toArray().reduce(function (trackingIdMap, model) {
          var trackingId = model.get('_trackingId');
          if (typeof trackingId === 'undefined') return trackingIdMap;
          trackingIdMap[trackingId] = model;
          return trackingIdMap;
        }, {});
        var states = SCORMSuspendData.deserialize(binary);
        states.forEach(function (state) {
          var _state$ = _slicedToArray(state[0], 2),
              trackingId = _state$[0],
              index = _state$[1];

          var _state$2 = _slicedToArray(state[1], 3),
              hasUserAnswer = _state$2[0],
              isUserAnswerArray = _state$2[1],
              hasAttemptStates = _state$2[2];

          var modelState = state[2];

          if (!hasUserAnswer) {
            modelState[2][0] = null;
          } else if (!isUserAnswerArray) {
            modelState[2][0] = modelState[2][0][0];
          }

          if (!hasAttemptStates) {
            modelState[2][1] = null;
          }

          var model = trackingIdMap[trackingId];

          if (!model) {
            return;
          }

          var isContainer = model.hasManagedChildren;
          var components = isContainer ? model.findDescendantModels('component') : [model];
          var component = components[index];

          if (!component) {
            Adapt.log.warn("SPOOR could not restore tracking id: ".concat(trackingId, ", index: ").concat(index));
            return;
          }

          if (component.setAttemptObject) {
            var attemptObject = component.getAttemptObject(modelState);
            component.setAttemptObject(attemptObject, false);
            return;
          }

          component.get('_isQuestionType') ? component.set({
            _score: modelState[0][0],
            _attemptsLeft: modelState[0][1],
            _isComplete: modelState[1][0],
            _isInteractionComplete: modelState[1][1],
            _isSubmitted: modelState[1][2],
            _isCorrect: modelState[1][3],
            _userAnswer: modelState[2][0]
          }) : component.set({
            _isComplete: modelState[1][0],
            _isInteractionComplete: modelState[1][1],
            _userAnswer: modelState[2][0]
          });
        });
      }
    }]);

    return ComponentSerializer;
  }(Backbone.Controller);

  var ComponentSerializer$1 = __AMD("extensions/adapt-contrib-spoor/js/serializers/ComponentSerializer", ComponentSerializer);

  var StatefulSession = function (_Backbone$Controller) {
    _inherits(StatefulSession, _Backbone$Controller);

    var _super = _createSuper(StatefulSession);

    function StatefulSession() {
      _classCallCheck(this, StatefulSession);

      return _super.apply(this, arguments);
    }

    _createClass(StatefulSession, [{
      key: "initialize",
      value: function initialize() {
        _.bindAll(this, 'beginSession', 'onVisibilityChange', 'endSession');

        this.scorm = ScormWrapper$1.getInstance();
        this._trackingIdType = 'block';
        this._componentSerializer = null;
        this._shouldStoreResponses = true;
        this._shouldRecordInteractions = true;
        this.beginSession();
      }
    }, {
      key: "beginSession",
      value: function beginSession() {
        this.listenTo(Adapt, 'app:dataReady', this.restoreSession);
        this._trackingIdType = Adapt.build.get('trackingIdType') || 'block';
        this._componentSerializer = new ComponentSerializer$1(this._trackingIdType);

        if (window.location.search.indexOf('nolmserrors') !== -1) {
          this.scorm.suppressErrors = true;
        }

        var config = Adapt.spoor.config;
        if (!config) return;
        var tracking = config._tracking;
        this._shouldStoreResponses = tracking && tracking._shouldStoreResponses;

        if (tracking && tracking._shouldRecordInteractions === false) {
          this._shouldRecordInteractions = false;
        }

        var settings = config._advancedSettings;

        if (!settings) {
          this.scorm.setVersion('1.2');
          this.scorm.initialize();
          return;
        }

        if (settings._showDebugWindow) {
          this.scorm.showDebugWindow();
        }

        this.scorm.setVersion(settings._scormVersion || '1.2');

        if (settings._suppressErrors) {
          this.scorm.suppressErrors = settings._suppressErrors;
        }

        if (settings._commitOnStatusChange) {
          this.scorm.commitOnStatusChange = settings._commitOnStatusChange;
        }

        if (settings._commitOnAnyChange) {
          this.scorm.commitOnAnyChange = settings._commitOnAnyChange;
        }

        if (_.isFinite(settings._timedCommitFrequency)) {
          this.scorm.timedCommitFrequency = settings._timedCommitFrequency;
        }

        if (_.isFinite(settings._maxCommitRetries)) {
          this.scorm.maxCommitRetries = settings._maxCommitRetries;
        }

        if (_.isFinite(settings._commitRetryDelay)) {
          this.scorm.commitRetryDelay = settings._commitRetryDelay;
        }

        if ('_exitStateIfIncomplete' in settings) {
          this.scorm.exitStateIfIncomplete = settings._exitStateIfIncomplete;
        }

        if ('_exitStateIfComplete' in settings) {
          this.scorm.exitStateIfComplete = settings._exitStateIfComplete;
        }

        this.scorm.initialize();
      }
    }, {
      key: "restoreSession",
      value: function restoreSession() {
        this.setupLearnerInfo();
        this.restoreSessionState();

        _.defer(this.setupEventListeners.bind(this));
      }
    }, {
      key: "setupLearnerInfo",
      value: function setupLearnerInfo() {
        var globals = Adapt.course.get('_globals');

        if (!globals._learnerInfo) {
          globals._learnerInfo = {};
        }

        Object.assign(globals._learnerInfo, Adapt.offlineStorage.get('learnerinfo'));
      }
    }, {
      key: "restoreSessionState",
      value: function restoreSessionState() {
        var sessionPairs = Adapt.offlineStorage.get();
        var hasNoPairs = !Object.keys(sessionPairs).length;
        if (hasNoPairs) return;

        if (sessionPairs.c) {
          var _SCORMSuspendData$des = SCORMSuspendData.deserialize(sessionPairs.c),
              _SCORMSuspendData$des2 = _slicedToArray(_SCORMSuspendData$des, 2),
              _isComplete = _SCORMSuspendData$des2[0],
              _isAssessmentPassed = _SCORMSuspendData$des2[1];

          Adapt.course.set({
            _isComplete: _isComplete,
            _isAssessmentPassed: _isAssessmentPassed
          });
        }

        if (sessionPairs.q && this._shouldStoreResponses) {
          this._componentSerializer.deserialize(sessionPairs.q);
        }
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        var debouncedSaveSession = _.debounce(this.saveSessionState.bind(this), 1);

        this.listenTo(Adapt.data, 'change:_isComplete', debouncedSaveSession);

        if (this._shouldStoreResponses) {
          this.listenTo(Adapt.data, 'change:_isSubmitted change:_userAnswer', debouncedSaveSession);
        }

        this.listenTo(Adapt, {
          'app:languageChanged': this.onLanguageChanged,
          'questionView:recordInteraction': this.onQuestionRecordInteraction,
          'assessment:complete': this.onAssessmentComplete,
          'tracking:complete': this.onTrackingComplete
        });
        var config = Adapt.spoor.config;
        var advancedSettings = config._advancedSettings;
        var shouldCommitOnVisibilityChange = !advancedSettings || advancedSettings._commitOnVisibilityChangeHidden !== false;

        if (shouldCommitOnVisibilityChange) {
          document.addEventListener('visibilitychange', this.onVisibilityChange);
        }

        $(window).on('beforeunload unload', this.endSession);
      }
    }, {
      key: "saveSessionState",
      value: function saveSessionState() {
        var courseState = SCORMSuspendData.serialize([Boolean(Adapt.course.get('_isComplete')), Boolean(Adapt.course.get('_isAssessmentPassed'))]);
        var componentStates = this._shouldStoreResponses === true ? this._componentSerializer.serialize() : '';
        var sessionPairs = {
          'c': courseState,
          'q': componentStates
        };
        this.printCompletionInformation();
        Adapt.offlineStorage.set(sessionPairs);
      }
    }, {
      key: "printCompletionInformation",
      value: function printCompletionInformation() {
        var _this = this;

        var courseComplete = Boolean(Adapt.course.get('_isComplete'));
        var assessmentPassed = Boolean(Adapt.course.get('_isAssessmentPassed'));
        var trackingIdModels = Adapt.data.filter(function (model) {
          return model.get('_type') === _this._trackingIdType && model.has('_trackingId');
        });
        var trackingIds = trackingIdModels.map(function (model) {
          return model.get('_trackingId');
        });

        if (!trackingIds.length) {
          Adapt.log.info("course._isComplete: ".concat(courseComplete, ", course._isAssessmentPassed: ").concat(assessmentPassed, ", ").concat(this._trackingIdType, " completion: no tracking ids found"));
          return;
        }

        var max = Math.max.apply(Math, _toConsumableArray(trackingIds));
        var completion = trackingIdModels.reduce(function (completion, model) {
          var trackingId = model.get('_trackingId');
          completion[trackingId] = model.get('_isComplete') ? '1' : '0';
          return completion;
        }, new Array(max + 1).join('-').split('')).join('');
        Adapt.log.info("course._isComplete: ".concat(courseComplete, ", course._isAssessmentPassed: ").concat(assessmentPassed, ", ").concat(this._trackingIdType, " completion: ").concat(completion));
      }
    }, {
      key: "onLanguageChanged",
      value: function onLanguageChanged() {
        var config = Adapt.spoor.config;
        this.removeEventListeners();
        this.setupEventListeners();
        this.saveSessionState();

        if (config && config._reporting && config._reporting._resetStatusOnLanguageChange === true) {
          Adapt.offlineStorage.set('status', 'incomplete');
        }
      }
    }, {
      key: "onVisibilityChange",
      value: function onVisibilityChange() {
        if (document.visibilityState === 'hidden') this.scorm.commit();
      }
    }, {
      key: "onQuestionRecordInteraction",
      value: function onQuestionRecordInteraction(questionView) {
        if (!this._shouldRecordInteractions) return;
        var responseType = questionView.getResponseType();
        if (_.isEmpty(responseType)) return;
        var id = questionView.model.get('_id');
        var response = questionView.getResponse();
        var result = questionView.isCorrect();
        var latency = questionView.getLatency();
        Adapt.offlineStorage.set('interaction', id, response, result, latency, responseType);
      }
    }, {
      key: "onAssessmentComplete",
      value: function onAssessmentComplete(stateModel) {
        var _Adapt$offlineStorage;

        var config = Adapt.spoor.config;
        Adapt.course.set('_isAssessmentPassed', stateModel.isPass);
        this.saveSessionState();
        var shouldSubmitScore = config && config._tracking && config._tracking._shouldSubmitScore;
        if (!shouldSubmitScore) return;
        var scoreArgs = stateModel.isPercentageBased ? [stateModel.scoreAsPercent, 0, 100] : [stateModel.score, 0, stateModel.maxScore];

        (_Adapt$offlineStorage = Adapt.offlineStorage).set.apply(_Adapt$offlineStorage, ['score'].concat(scoreArgs));
      }
    }, {
      key: "onTrackingComplete",
      value: function onTrackingComplete(completionData) {
        var config = Adapt.spoor.config;
        this.saveSessionState();
        var completionStatus = completionData.status.asLowerCase;

        switch (completionData.status) {
          case COMPLETION_STATE$1.COMPLETED:
          case COMPLETION_STATE$1.PASSED:
            {
              if (!config || !config._reporting || !config._reporting._onTrackingCriteriaMet) {
                Adapt.log.warn("No value defined for '_onTrackingCriteriaMet', so defaulting to '".concat(completionStatus, "'"));
              } else {
                completionStatus = config._reporting._onTrackingCriteriaMet;
              }

              break;
            }

          case COMPLETION_STATE$1.FAILED:
            {
              if (!config || !config._reporting || !config._reporting._onAssessmentFailure) {
                Adapt.log.warn("No value defined for '_onAssessmentFailure', so defaulting to '".concat(completionStatus, "'"));
              } else {
                completionStatus = config._reporting._onAssessmentFailure;
              }
            }
        }

        Adapt.offlineStorage.set('status', completionStatus);
      }
    }, {
      key: "endSession",
      value: function endSession() {
        if (!this.scorm.finishCalled) {
          this.scorm.finish();
        }

        this.removeEventListeners();
      }
    }, {
      key: "removeEventListeners",
      value: function removeEventListeners() {
        $(window).off('beforeunload unload', this.endSession);
        document.removeEventListener('visibilitychange', this.onVisibilityChange);
        this.stopListening();
      }
    }]);

    return StatefulSession;
  }(Backbone.Controller);

  var StatefulSession$1 = __AMD("extensions/adapt-contrib-spoor/js/adapt-stateful-session", StatefulSession);

  var OfflineStorage = function (_Backbone$Controller) {
    _inherits(OfflineStorage, _Backbone$Controller);

    var _super = _createSuper(OfflineStorage);

    function OfflineStorage() {
      _classCallCheck(this, OfflineStorage);

      return _super.apply(this, arguments);
    }

    _createClass(OfflineStorage, [{
      key: "initialize",
      value: function initialize(statefulSession) {
        this.scorm = ScormWrapper$1.getInstance();
        this.statefulSession = statefulSession;
        this.temporaryStore = {};
        this.suspendDataStore = {};
        this.suspendDataRestored = false;
        Adapt.offlineStorage.initialize(this);
      }
    }, {
      key: "save",
      value: function save() {
        this.statefulSession.saveSessionState();
      }
    }, {
      key: "serialize",
      value: function serialize() {
        var _SCORMSuspendData;

        return (_SCORMSuspendData = SCORMSuspendData).serialize.apply(_SCORMSuspendData, arguments);
      }
    }, {
      key: "deserialize",
      value: function deserialize() {
        var _SCORMSuspendData2;

        return (_SCORMSuspendData2 = SCORMSuspendData).deserialize.apply(_SCORMSuspendData2, arguments);
      }
    }, {
      key: "get",
      value: function get(name) {
        if (name === undefined) {
          if (this.useTemporaryStore()) return this.temporaryStore;
          this.suspendDataStore = this.getCustomStates();
          var data = Object.assign(_.clone(this.suspendDataStore), {
            location: this.scorm.getLessonLocation(),
            score: this.scorm.getScore(),
            status: this.scorm.getStatus(),
            student: this.scorm.getStudentName(),
            learnerInfo: this.getLearnerInfo()
          });
          this.suspendDataRestored = true;
          return data;
        }

        if (this.useTemporaryStore()) return this.temporaryStore[name];
        var courseState;

        switch (name.toLowerCase()) {
          case 'location':
            return this.scorm.getLessonLocation();

          case 'score':
            return this.scorm.getScore();

          case 'status':
            return this.scorm.getStatus();

          case 'student':
            return this.scorm.getStudentName();

          case 'learnerinfo':
            return this.getLearnerInfo();

          case 'coursestate':
            courseState = this.getCustomState('c');
            var stateArray = courseState && SCORMSuspendData.deserialize(courseState) || [];
            return {
              _isCourseComplete: Boolean(stateArray.slice(0, 1).map(Number)[0]),
              _isAssessmentPassed: Boolean(stateArray.slice(1, 2).map(Number)[0]),
              completion: stateArray.slice(2).map(Number).map(String).join('') || ''
            };

          case 'completion':
            courseState = this.getCustomState('c');
            return courseState && SCORMSuspendData.deserialize(courseState).slice(2).map(Number).map(String).join('') || '';

          case '_iscoursecomplete':
            courseState = this.getCustomState('c');
            return Boolean(courseState && SCORMSuspendData.deserialize(courseState).slice(0, 1).map(Number)[0]);

          case '_isassessmentpassed':
            courseState = this.getCustomState('c');
            return Boolean(courseState && SCORMSuspendData.deserialize(courseState).slice(1, 2).map(Number)[0]);

          case 'questions':
            var questionsState = this.getCustomState('q');
            return questionsState || '';

          default:
            return this.getCustomState(name);
        }
      }
    }, {
      key: "set",
      value: function set(name, value) {
        var _this$scorm, _this$scorm2, _this$scorm3, _this$scorm4;

        var args = Array.prototype.slice.call(arguments).slice(1);
        var isObject = _typeof(name) === 'object';

        if (isObject) {
          value = name;
          name = 'suspendData';
        }

        if (this.useTemporaryStore()) {
          if (isObject) {
            Object.assign(this.temporaryStore, value);
          } else {
            this.temporaryStore[name] = value;
          }

          return true;
        }

        switch (name.toLowerCase()) {
          case 'interaction':
            return (_this$scorm = this.scorm).recordInteraction.apply(_this$scorm, _toConsumableArray(args));

          case 'location':
            return (_this$scorm2 = this.scorm).setLessonLocation.apply(_this$scorm2, _toConsumableArray(args));

          case 'score':
            return (_this$scorm3 = this.scorm).setScore.apply(_this$scorm3, _toConsumableArray(args));

          case 'status':
            return (_this$scorm4 = this.scorm).setStatus.apply(_this$scorm4, _toConsumableArray(args));

          case 'student':
          case 'learnerinfo':
            return false;

          case 'lang':
            this.scorm.setLanguage(value);
            break;
        }

        if (isObject) {
          Object.assign(this.suspendDataStore, value);
        } else {
          this.suspendDataStore[name] = value;
        }

        var dataAsString = JSON.stringify(this.suspendDataStore);
        return this.suspendDataRestored ? this.scorm.setSuspendData(dataAsString) : false;
      }
    }, {
      key: "getCustomStates",
      value: function getCustomStates() {
        var isSuspendDataStoreEmpty = _.isEmpty(this.suspendDataStore);

        if (!isSuspendDataStoreEmpty && this.suspendDataRestored) {
          return _.clone(this.suspendDataStore);
        }

        var dataAsString = this.scorm.getSuspendData();

        if (dataAsString === '' || dataAsString === ' ' || dataAsString === undefined) {
          return {};
        }

        var dataAsJSON = JSON.parse(dataAsString);

        if (!isSuspendDataStoreEmpty && !this.suspendDataRestored) {
          Object.assign(dataAsJSON, this.suspendDataStore);
        }

        return dataAsJSON;
      }
    }, {
      key: "getCustomState",
      value: function getCustomState(name) {
        var dataAsJSON = this.getCustomStates();
        return dataAsJSON[name];
      }
    }, {
      key: "useTemporaryStore",
      value: function useTemporaryStore() {
        var cfg = Adapt.config.get('_spoor');
        if (!this.scorm.lmsConnected || cfg && cfg._isEnabled === false) return true;
        return false;
      }
    }, {
      key: "getLearnerInfo",
      value: function getLearnerInfo() {
        var id = this.scorm.getStudentId();
        var name = this.scorm.getStudentName();
        var firstname = '';
        var lastname = '';
        var hasName = name && name !== 'undefined';
        var isNameCommaSeparated = hasName && name.includes(',');
        var isNameSpaceSeparated = hasName && name.includes(' ');
        hasName = hasName && (isNameCommaSeparated || isNameSpaceSeparated);

        if (!hasName) {
          console.log("SPOOR: LMS learner_name not in 'lastname, firstname' or 'firstname lastname' format");
          return {
            id: id,
            name: name,
            firstname: firstname,
            lastname: lastname
          };
        }

        var separator = isNameCommaSeparated ? ',' : ' ';
        var nameParts = name.split(separator);

        if (isNameCommaSeparated) {
          nameParts.reverse();
        }

        var _nameParts$map = nameParts.map(function (part) {
          return part.trim();
        });

        var _nameParts$map2 = _slicedToArray(_nameParts$map, 2);

        firstname = _nameParts$map2[0];
        lastname = _nameParts$map2[1];
        name = "".concat(firstname, " ").concat(lastname);
        return {
          id: id,
          name: name,
          firstname: firstname,
          lastname: lastname
        };
      }
    }]);

    return OfflineStorage;
  }(Backbone.Controller);

  var OfflineStorage$1 = __AMD("extensions/adapt-contrib-spoor/js/adapt-offlineStorage-scorm", OfflineStorage);

  var Spoor = function (_Backbone$Controller) {
    _inherits(Spoor, _Backbone$Controller);

    var _super = _createSuper(Spoor);

    function Spoor() {
      _classCallCheck(this, Spoor);

      return _super.apply(this, arguments);
    }

    _createClass(Spoor, [{
      key: "initialize",
      value: function initialize() {
        this.config = null;
        this.scorm = ScormWrapper$1.getInstance();
        this.listenToOnce(Adapt, 'offlineStorage:prepare', this._prepare);
      }
    }, {
      key: "_prepare",
      value: function _prepare() {
        this.config = Adapt.config.get('_spoor');

        if (!this.isEnabled) {
          Adapt.offlineStorage.setReadyStatus();
          return;
        }

        this.statefulSession = new StatefulSession$1();
        this.offlineStorage = new OfflineStorage$1(this.statefulSession);
        Adapt.offlineStorage.get();
        Adapt.offlineStorage.setReadyStatus();

        require(['libraries/jquery.keycombo'], function () {
          $.onKeyCombo([68, 69, 86], function () {
            Adapt.spoor.scorm.showDebugWindow();
          });
        });
      }
    }, {
      key: "isEnabled",
      get: function () {
        return this.config && this.config._isEnabled;
      }
    }]);

    return Spoor;
  }(Backbone.Controller);

  Adapt.spoor = new Spoor();
  __AMD("extensions/adapt-contrib-spoor/js/adapt-contrib-spoor", Spoor);

  var TrickleView = Backbone.View.extend({
    isSteplocked: false,
    completionAttribute: null,
    initialize: function (options) {
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      var AdaptEvents = {
        "trickle:kill": this.onKill,
        "remove": this.onRemove
      };
      this.onPreRender(this);
      AdaptEvents[this.model.get("_type") + "View:postRender"] = this.onPostRender;
      this.listenTo(Adapt, AdaptEvents);
      this.on("steplock", this.onStepLock);
      this.on("stepunlock", this.onStepUnlock);
    },
    onPreRender: function (view) {
      this.completionAttribute = Adapt.trickle.getCompletionAttribute();
      if (!this.isElementEnabled()) return;
      Adapt.trigger("trickle:preRender", this);
    },
    onPostRender: function (view) {
      if (view.model.get("_id") !== this.model.get("_id")) return;
      if (!this.isElementEnabled()) return;
      Adapt.trigger("trickle:postRender", this);
    },
    isElementEnabled: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      if (!trickle) return false;
      if (this.model.get(this.completionAttribute)) return false;

      var isArticleWithOnChildren = this.model.get("_type") === "article" && trickle._onChildren;

      if (isArticleWithOnChildren) {
        return false;
      }

      if (trickle._isEnabled === true) return true;
      return false;
    },
    onStepLock: function () {
      if (!this.isElementEnabled()) {
        this.continueToNext();
        return;
      }

      var trickle = Adapt.trickle.getModelConfig(this.model);
      var isSteplocking = trickle._stepLocking && trickle._stepLocking._isEnabled;

      if (!isSteplocking) {
        this.continueToNext();
        return;
      }

      Adapt.trigger("trickle:steplock", this);
      this.isSteplocked = true;
    },
    continueToNext: function () {
      Adapt.trigger("trickle:continue", this);
    },
    onStepUnlock: function () {
      if (!this.isSteplocked) return;
      this.isSteplocked = false;
      Adapt.trigger("trickle:stepunlock", this);
    },
    onKill: function () {
      this.detachFromElement();
    },
    onRemove: function () {
      this.detachFromElement();
    },
    detachFromElement: function () {
      this.undelegateEvents();
      this.stopListening();
      this.model = null;
      this.articleModel = null;
      this.$el = null;
      this.el = null;
    }
  });
  var TrickleView$1 = __AMD("extensions/adapt-contrib-trickle/js/trickleView", TrickleView);

  var PageView = Backbone.View.extend({
    currentDescendantIndex: 0,
    currentLocksOnDescendant: 0,
    currentDescendant: null,
    initialize: function (options) {
      if (!this.isPageEnabled()) {
        return this.detachFromPage();
      }

      this.setupDescendants();

      if (!this.haveDescendantsGotTrickle()) {
        return this.detachFromPage();
      }

      this.addClassToHtml();
      this.setupEventListeners();
    },
    isPageEnabled: function () {
      var trickleConfig = Adapt.trickle.getModelConfig(this.model);
      if (trickleConfig && trickleConfig._isEnabled === false) return false;
      return true;
    },
    setupDescendants: function () {
      this.currentDescendant = null;
      this.descendantViews = {};
      this.getDescendants();
      Adapt.trigger("trickle:descendants", this);
    },
    descendantsChildFirst: null,
    descendantsParentFirst: null,
    descendantViews: null,
    getDescendants: function () {
      this.descendantsChildFirst = this.model.getAllDescendantModels();
      this.descendantsParentFirst = this.model.getAllDescendantModels(true);
      this.setDescendantsTrickleDefaults();
      this.descendantsChildFirst = this.filterComponents(this.descendantsChildFirst);
      this.descendantsParentFirst = this.filterComponents(this.descendantsParentFirst);
    },
    filterComponents: function (descendants) {
      return descendants.filter(function (descendant) {
        if (descendant.get("_type") === "component") return false;
        if (!descendant.get("_isAvailable")) return false;
        return true;
      });
    },
    setDescendantsTrickleDefaults: function () {
      this.descendantsParentFirst.forEach(function (descendant) {
        var trickle = Adapt.trickle.getModelConfig(descendant);

        if (!trickle) {
          return;
        }

        trickle._stepLocking = _.extend({
          "_isEnabled": true,
          "_isCompletionRequired": true,
          "_isLockedOnRevisit": false
        }, trickle._stepLocking);
        trickle = _.extend({
          "_isEnabled": true,
          "_autoScroll": true,
          "_scrollDuration": 500,
          "_onChildren": true,
          "_scrollTo": "@block +1"
        }, trickle);
        Adapt.trickle.setModelConfig(descendant, trickle);

        if (trickle._onChildren && descendant.get("_type") === "article") {
          this.setupArticleOnChildren(descendant, trickle);
        }

        descendant.set("_isTrickleConfigured", true);
      }.bind(this));
    },
    setupArticleOnChildren: function (articleModel, articleTrickleConfig) {
      var articleBlocks = articleModel.getChildren();
      articleBlocks.each(function (blockModel, index) {
        var blockTrickleConfig = Adapt.trickle.getModelConfig(blockModel);

        for (var k in blockTrickleConfig) {
          if (_typeof(blockTrickleConfig[k]) === "object") {
            blockTrickleConfig[k] = _.extend({}, articleTrickleConfig[k], blockTrickleConfig[k]);
          }
        }

        blockTrickleConfig = _.extend({}, articleTrickleConfig, blockTrickleConfig);

        if (articleBlocks.length === index + 1) {
          blockTrickleConfig._isFinal = true;
        }

        if (index === 0) {
          blockTrickleConfig._isStart = true;
        }

        Adapt.trickle.setModelConfig(blockModel, blockTrickleConfig);
      });
    },
    haveDescendantsGotTrickle: function () {
      return this.descendantsChildFirst.some(function (descendant) {
        var trickle = Adapt.trickle.getModelConfig(descendant);
        return trickle && trickle._isEnabled === true;
      });
    },
    addClassToHtml: function () {
      $("html").addClass("trickle");
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "remove": this.onRemove,
        "articleView:preRender": this.onDescendantPreRender,
        "blockView:preRender": this.onDescendantPreRender,
        "trickle:unwait": this.onUnwait,
        "trickle:wait": this.onWait,
        "trickle:continue": this.onContinue,
        "trickle:skip": this.onSkip,
        "trickle:kill": this.onKill
      });
      this.listenToOnce(this.model, "change:_isReady", this.onPageReady);
    },
    onDescendantPreRender: function (view) {
      if (view.model.get("_type") === "component") return;
      var descendantView = new TrickleView$1({
        model: view.model,
        el: view.el
      });
      this.descendantViews[view.model.get("_id")] = descendantView;
    },
    onPageReady: function (model, value) {
      if (!value) return;
      this.currentDescendant = null;
      Adapt.trigger("trickle:started");
      this.gotoNextDescendant();
    },
    gotoNextDescendant: function () {
      this.getDescendants();

      if (this.currentDescendant) {
        this.currentDescendant.trigger("stepunlock");
        this.currentDescendant = null;
      }

      for (var index = this.currentDescendantIndex || 0, l = this.descendantsChildFirst.length; index < l; index++) {
        var descendant = this.descendantsChildFirst[index];

        switch (descendant.get("_type")) {
          case "block":
          case "article":
            this.currentLocksOnDescendant = 0;
            this.currentDescendantIndex = index;
            var currentId = descendant.get("_id");
            this.currentDescendant = this.descendantViews[currentId];
            this.currentDescendant.trigger("steplock");
            return;
        }
      }

      this.finished();
    },
    onContinue: function (view) {
      if (!this.currentDescendant) return;
      if (view.model.get("_id") !== this.currentDescendant.model.get("_id")) return;
      this.onSkip();
    },
    onWait: function () {
      this.currentLocksOnDescendant++;
    },
    onUnwait: function () {
      this.currentLocksOnDescendant--;
      if (this.currentLocksOnDescendant > 0) return;
      var lastDescendant = this.currentDescendant.model;
      this.currentDescendantIndex++;
      this.gotoNextDescendant();
      Adapt.trickle.scroll(lastDescendant);
    },
    onSkip: function () {
      this.currentDescendantIndex++;
      this.gotoNextDescendant();
    },
    onKill: function () {
      this.finished();
      this.detachFromPage();
    },
    finished: function () {
      Adapt.trigger("trickle:finished");
      this.detachFromPage();
    },
    onRemove: function () {
      this.finished();
    },
    detachFromPage: function () {
      $("html").removeClass("trickle");
      this.undelegateEvents();
      this.stopListening();
      this.model = null;
      this.$el = null;
      this.el = null;
      this.currentDescendant = null;
      this.descendantViews = null;
      this.descendantsChildFirst = null;
      this.descendantsParentFirst = null;
      Adapt.trickle.pageView = null;
    }
  });
  var PageView$1 = __AMD("extensions/adapt-contrib-trickle/js/pageView", PageView);

  var completionAttribute$1 = "_isComplete";
  var TrickleButtonView = Backbone.View.extend({
    isStepLocking: false,
    hasStepLocked: false,
    isStepLocked: false,
    isStepLockFinished: false,
    hasStepPreCompleted: false,
    isWaitingForClick: false,
    allowVisible: false,
    allowEnabled: true,
    overlayShownCount: 0,
    el: function () {
      this.setupPreRender();
      return Handlebars.templates['trickle-button'](this.model.toJSON());
    },
    setupPreRender: function () {
      this.setupButtonVisible();
      this.setupButtonEnabled();
    },
    setupButtonVisible: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      this.allowVisible = false;
      trickle._button._isVisible = false;

      if (trickle._button._styleBeforeCompletion === "visible") {
        this.allowVisible = true;

        if (trickle._button._autoHide && trickle._button._isFullWidth) {
          trickle._button._isVisible = false;
        } else {
          trickle._button._isVisible = true;
        }
      }
    },
    setupButtonEnabled: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);

      if (trickle._stepLocking._isCompletionRequired === false) {
        this.allowEnabled = true;
        trickle._button._isDisabled = false;
      } else if (trickle._button._styleBeforeCompletion === "visible") {
        this.allowEnabled = false;
        trickle._button._isDisabled = true;
      } else {
        trickle._button._isDisabled = false;
        this.allowEnabled = true;
      }
    },
    events: {
      "click .js-trickle-btn": "onButtonClick"
    },
    initialize: function (options) {
      this.getCompletionAttribute();
      this.debounceCheckAutoHide();
      this.setupStepLocking();
      this.setupEventListeners();
    },
    getCompletionAttribute: function () {
      var trickle = Adapt.trickle.getModelConfig(Adapt.config);
      if (!trickle) return;
      if (!trickle._completionAttribute) return;
      completionAttribute$1 = trickle._completionAttribute;
    },
    setupStepLocking: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      this.isStepLocked = Boolean(trickle._stepLocking._isEnabled);
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "trickle:overlay": this.onOverlay,
        "trickle:unoverlay": this.onUnoverlay,
        "trickle:steplock": this.onStepLock,
        "trickle:stepunlock": this.onStepUnlock,
        "trickle:skip": this.onSkip,
        "trickle:kill": this.onKill,
        "trickle:update": this.onUpdate,
        "remove": this.onRemove
      });
      this.listenTo(this.model, "change:" + completionAttribute$1, this.onCompletion);
    },
    debounceCheckAutoHide: function () {
      this.checkButtonAutoHideSync = this.checkButtonAutoHide.bind(this);
      this.checkButtonAutoHide = _.debounce(this.checkButtonAutoHideSync, 100);
    },
    checkButtonAutoHide: function () {
      if (!this.allowVisible) {
        this.setButtonVisible(false);
        return;
      }

      var trickle = Adapt.trickle.getModelConfig(this.model);

      if (!trickle._button._autoHide) {
        this.setButtonVisible(true);
        return;
      } else if (this.overlayShownCount > 0) {
        this.setButtonVisible(false);
        return;
      }

      var measurements = this.$el.onscreen();
      var isJustOffscreen = measurements.bottom > -100;

      if (measurements.onscreen || isJustOffscreen) {
        this.setButtonVisible(true);
      } else {
        this.setButtonVisible(false);
      }
    },
    setButtonVisible: function (isVisible) {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      trickle._button._isVisible = Boolean(isVisible);
      this.$(".js-trickle-btn-container").toggleClass("u-display-none", !trickle._button._isVisible);
    },
    checkButtonEnabled: function () {
      this.setButtonEnabled(this.allowEnabled);
    },
    setButtonEnabled: function (isEnabled) {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      var $button = this.$(".js-trickle-btn");

      if (isEnabled) {
        $button.removeClass("is-disabled").removeAttr("disabled");
        trickle._button._isDisabled = true;

        if (document.activeElement && document.activeElement.isSameNode(this.$('.aria-label')[0])) {
          this.$('.aria-label').focusNext();
        }

        this.$('.aria-label').a11y_cntrl(false);
      } else {
        $button.addClass("is-disabled").attr("disabled", "disabled");
        trickle._button._isDisabled = false;
      }
    },
    onStepLock: function (view) {
      if (!this.isViewMatch(view)) return;
      this.hasStepLocked = true;
      this.isStepLocking = true;
      this.overlayShownCount = 0;
      var trickle = Adapt.trickle.getModelConfig(this.model);
      if (!this.isButtonEnabled()) return;
      var isCompleteAndShouldRelock = trickle._stepLocking._isLockedOnRevisit && this.model.get(completionAttribute$1);

      if (isCompleteAndShouldRelock) {
        this.isStepLocked = true;
        this.model.set("_isTrickleAutoScrollComplete", false);
        Adapt.trigger("trickle:wait");
        this.allowVisible = true;
        this.checkButtonAutoHide();
      } else if (this.hasStepPreCompleted) {
        this.isStepLocked = true;
        this.model.set("_isTrickleAutoScrollComplete", false);
        this.allowVisible = true;
        this.stepCompleted();
      }

      this.setupOnScreenListener();
    },
    onOverlay: function () {
      this.overlayShownCount++;
    },
    onUnoverlay: function () {
      this.overlayShownCount--;
      this.checkButtonAutoHide();
    },
    setupOnScreenListener: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      if (!trickle._button._autoHide) return;
      this.$el.on("onscreen", this.checkButtonAutoHideSync);
    },
    isViewMatch: function (view) {
      return view.model.get("_id") === this.model.get("_id");
    },
    isButtonEnabled: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      if (!trickle._isEnabled || !trickle._button._isEnabled) return false;
      return true;
    },
    onCompletion: function (model, value) {
      if (value === false) return;
      this.hasStepPreCompleted = true;
      if (!this.hasStepLocked) return;
      this.stepCompleted();
    },
    stepCompleted: function () {
      if (this.isStepLockFinished) return;
      this.isStepLocked = false;
      this.allowVisible = false;
      this.allowEnabled = false;

      if (this.isButtonEnabled()) {
        if (this.isStepLocking) {
          this.isStepLocked = true;
          this.isWaitingForClick = true;
          Adapt.trigger("trickle:wait");
        } else {
          this.isStepLockFinished = true;
        }

        this.allowVisible = true;
        this.allowEnabled = true;
      }

      this.model.set("_isTrickleAutoScrollComplete", false);
      this.checkButtonAutoHideSync();
      this.checkButtonEnabled();
    },
    onButtonClick: function () {
      if (this.isStepLocked) {
        Adapt.trigger("trickle:unwait");
        this.isStepLocked = false;
        this.isStepLockFinished = true;
      } else {
        this.model.set("_isTrickleAutoScrollComplete", false);
        Adapt.trickle.scroll(this.model);
      }

      var trickle = this.model.get("_trickle");

      switch (trickle._button._styleAfterClick) {
        case "hidden":
          this.allowVisible = false;
          this.checkButtonAutoHideSync();
          break;

        case "disabled":
          this.allowEnabled = false;
          this.checkButtonAutoHideSync();
      }
    },
    onUpdate: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);

      if (trickle._button._autoHide && this.isStepLocking) {
        this.$el.off("onscreen", this.checkButtonAutoHideSync);
      }

      var $original = this.$el;
      var $newEl = $(Handlebars.templates['trickle-button'](this.model.toJSON()));
      $original.replaceWith($newEl);
      this.setElement($newEl);

      if (trickle._button._autoHide && this.isStepLocking) {
        this.$el.on("onscreen", this.checkButtonAutoHideSync);
      }
    },
    onStepUnlock: function (view) {
      if (!this.isViewMatch(view)) return;
      this.$el.off("onscreen", this.checkButtonAutoHideSync);
      this.isStepLocking = false;
      this.overlayShownCount = 0;

      if (document.activeElement && document.activeElement.isSameNode(this.$('.aria-label')[0])) {
        this.$('.aria-label').focusNext();
      }

      this.$('.aria-label').a11y_cntrl(false);
    },
    onSkip: function () {
      if (!this.isStepLocking) return;
      this.onKill();
    },
    onKill: function () {
      this.$el.off("onscreen", this.checkButtonAutoHideSync);

      if (this.isWaitingForClick) {
        this.model.set("_isTrickleAutoScrollComplete", true);
      }

      this.isWaitingForClick = false;
      this.isStepLocked = false;
      this.isStepLocking = false;
      this.allowVisible = false;
      this.allowEnabled = false;
      this.isStepLockFinished = true;
      this.model.set("_isTrickleAutoScrollComplete", false);
      this.checkButtonAutoHide();
      this.checkButtonEnabled();
    },
    onRemove: function () {
      if (this.isWaitingForClick) {
        this.model.set("_isTrickleAutoScrollComplete", true);
      }

      this.isWaitingForClick = false;
      this.$el.off("onscreen", this.checkButtonAutoHideSync);
      this.isStepLocking = true;
      this.remove();
    }
  });
  var ButtonView = __AMD("extensions/adapt-contrib-trickle/js/handlers/buttonView", TrickleButtonView);

  var TrickleButtonHandler = Backbone.Controller.extend({
    buttonViews: null,
    initialize: function () {
      this.listenToOnce(Adapt, {
        'app:dataReady': this.onAppDataReady,
        remove: this.onRemove
      });
    },
    onAppDataReady: function () {
      this.buttonViews = {};
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        'trickle:preRender': this.onPreRender,
        'trickle:postRender': this.onPostRender
      });
    },
    onPreRender: function (view) {
      if (!this.isTrickleEnabled(view.model)) return;
      this.setupConfigDefaults(view.model);
      this.buttonViews[view.model.get('_id')] = new ButtonView({
        model: view.model
      });
    },
    onPostRender: function (view) {
      if (!this.isTrickleEnabled(view.model)) return;
      view.$el.append(this.buttonViews[view.model.get('_id')].$el);
    },
    isTrickleEnabled: function (model) {
      var trickle = Adapt.trickle.getModelConfig(model);
      if (!trickle || !trickle._isEnabled) return false;
      if (trickle._onChildren && model.get('_type') === 'article') return false;
      return true;
    },
    setupConfigDefaults: function (model) {
      if (model.get('_isTrickleButtonConfigured')) return;
      var defaults = {
        _isEnabled: true,
        _styleBeforeCompletion: 'hidden',
        _styleAfterClick: 'hidden',
        _isFullWidth: true,
        _autoHide: false,
        _className: '',
        _hasIcon: false,
        text: 'Continue',
        startText: 'Begin',
        finalText: 'Finish',
        _component: 'trickle-button',
        _isLocking: true,
        _isVisible: false,
        _isDisabled: false
      };
      var trickle = Adapt.trickle.getModelConfig(model);
      trickle._button = _.extend(defaults, trickle._button);

      if (trickle._button._isFullWidth) {
        trickle._stepLocking._isEnabled = true;
        trickle._button._styleAfterClick = 'hidden';
      } else {
        trickle._button._autoHide = false;
      }

      Adapt.trickle.setModelConfig(model, trickle);
      model.set('_isTrickleButtonConfigured', true);
    },
    onRemove: function () {
      this.buttonViews = {};
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/button", new TrickleButtonHandler());

  var completionAttribute = "_isComplete";
  var TrickleCompletionHandler = Backbone.Controller.extend({
    isStepLocking: false,
    isCompleted: false,
    stepModel: null,
    initialize: function () {
      this.listenToOnce(Adapt, "app:dataReady", this.onAppDataReady);
    },
    onAppDataReady: function () {
      this.getCompletionAttribute();
      this.setupEventListeners();
    },
    getCompletionAttribute: function () {
      var trickle = Adapt.trickle.getModelConfig(Adapt.config);
      if (!trickle) return;
      if (!trickle._completionAttribute) return;
      completionAttribute = trickle._completionAttribute;
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "trickle:descendants": this.onDescendants,
        "trickle:steplock": this.onStepLock,
        "trickle:stepunlock": this.onStepUnlock,
        "trickle:kill": this.onKill,
        "remove": this.onRemove
      });
    },
    onDescendants: function (view) {
      view.descendantsParentFirst.forEach(function (descendant) {
        var trickle = Adapt.trickle.getModelConfig(descendant);
        if (!trickle) return;
        trickle._wasCompletedPreRender = descendant.get(completionAttribute);
      });
    },
    onStepLock: function (view) {
      var isModelComplete = view.model.get(completionAttribute);
      var trickle = Adapt.trickle.getModelConfig(view.model);

      if (!trickle._stepLocking._isCompletionRequired && !trickle._stepLocking._isLockedOnRevisit) {
        if (!isModelComplete) return;
        Adapt.trigger("trickle:continue", view);
        return;
      }

      if (trickle._stepLocking._isCompletionRequired && isModelComplete && trickle._wasCompletedPreRender) {
        Adapt.trigger("trickle:continue", view);
        return;
      }

      Adapt.trigger("trickle:wait");

      if (isModelComplete) {
        Adapt.trigger("trickle:unwait");
        return;
      }

      view.model.set("_isTrickleAutoScrollComplete", false);
      this.isCompleted = false;
      this.isStepLocking = true;
      this.stepModel = view.model;
      this.listenTo(this.stepModel, "change:" + completionAttribute, this.onCompletion);
    },
    onCompletion: function (model, value) {
      if (value === false) return;
      this.stepCompleted();
    },
    stepCompleted: function () {
      if (!this.isStepLocking) return;
      if (this.isCompleted) return;
      this.isCompleted = true;
      this.stopListening(this.stepModel, "change:" + completionAttribute, this.onCompletion);
      Adapt.trigger("trickle:unwait");
    },
    onKill: function () {
      this.onStepUnlock();
    },
    onRemove: function () {
      this.onStepUnlock();
    },
    onStepUnlock: function () {
      this.stopListening(this.stepModel, "change:" + completionAttribute, this.onCompletion);
      this.isStepLocking = false;
      this.stepModel = null;
      this.isCompleted = false;
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/completion", new TrickleCompletionHandler());

  var TrickleNotifyHandler = Backbone.Controller.extend({
    isStepLocking: false,
    isNotifyOpen: false,
    initialize: function () {
      this.listenToOnce(Adapt, "app:dataReady", this.onAppDataReady);
    },
    onAppDataReady: function () {
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "trickle:steplock": this.onStepLock,
        "notify:opened": this.onNotifyOpened,
        "notify:closed": this.onNotifyClosed,
        "trickle:stepunlock": this.onStepUnlock,
        "remove": this.onRemove
      });
    },
    onStepLock: function (view) {
      this.isStepLocking = true;
    },
    onNotifyOpened: function () {
      if (!this.isStepLocking) return;
      this.isNotifyOpen = true;
      Adapt.trigger("trickle:overlay");
      Adapt.trigger("trickle:wait");
    },
    onNotifyClosed: function () {
      if (!this.isStepLocking) return;
      if (!this.isNotifyOpen) return;
      this.isNotifyOpen = false;
      Adapt.trigger("trickle:unoverlay");
      Adapt.trigger("trickle:unwait");
    },
    onStepUnlock: function () {
      this.isStepLocking = false;
    },
    onRemove: function () {
      this.onStepUnlock();
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/notify", new TrickleNotifyHandler());

  var TrickleBodyResizeHandler = Backbone.Controller.extend({
    isStepLocking: false,
    stepView: null,
    initialize: function () {
      this.listenToOnce(Adapt, {
        "app:dataReady": this.onAppDataReady,
        "adapt:initialize": this.onAdaptInitialized
      });
    },
    onAppDataReady: function () {
      this.onResize = this.onResize.bind(this);
      this.preventWrapperScroll = this.preventWrapperScroll.bind(this);
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "trickle:steplock": this.onStepLock,
        "trickle:resize": this.onTrickleResize,
        "trickle:stepunlock": this.onStepUnlock,
        "trickle:kill": this.onKill,
        "trickle:finished": this.onFinished,
        "remove": this.onRemove
      });
    },
    onAdaptInitialized: function () {
      this.wrapper = document.getElementById('wrapper');
      this.wrapper.addEventListener("scroll", this.preventWrapperScroll);
    },
    onStepLock: function (view) {
      this.isStepLocking = true;
      this.stepView = view;
      $(window).on("resize", this.onResize);
      $(".page").on("resize", this.onResize);
      Adapt.trigger("trickle:resize");
    },
    preventWrapperScroll: function (event) {
      if (!this.isStepLocking) return;
      var top = this.wrapper.scrollTop;
      if (top === 0) return;
      this.wrapper.scrollTop = 0;
      window.scrollTo(0, window.pageYOffset + top);
    },
    onResize: function () {
      if (!this.isStepLocking) return;
      Adapt.trigger("trickle:resize");
    },
    onTrickleResize: function () {
      if (!this.isStepLocking) return;
      var offset = this.stepView.$el.offset();
      var height = this.stepView.$el.height();
      var $wrapper = $(this.wrapper);
      var bottom = offset['top'] + height;
      $wrapper.css("height", bottom);
    },
    onStepUnlock: function (view) {
      this.isStepLocking = false;
      this.stepView = null;
      $(window).off("resize", this.onResize);
      $(".page").off("resize", this.onResize);
    },
    onKill: function () {
      this.onFinished();
      this.onStepUnlock();
    },
    onFinished: function () {
      this.wrapper.removeEventListener("scroll", this.preventWrapperScroll);
      $(this.wrapper).css("height", "");
    },
    onRemove: function () {
      this.onStepUnlock();
      this.stepView = null;
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/resize", new TrickleBodyResizeHandler());

  var TrickleTutorHandler = Backbone.Controller.extend({
    stepLockedId: null,
    isStepLocking: false,
    isTutorOpen: false,
    initialize: function () {
      this.listenToOnce(Adapt, "app:dataReady", this.onAppDataReady);
    },
    onAppDataReady: function () {
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "trickle:steplock": this.onStepLock,
        "tutor:opened": this.onTutorOpened,
        "tutor:closed": this.onTutorClosed,
        "trickle:stepunlock": this.onStepUnlock,
        "remove": this.onRemove
      });
    },
    onStepLock: function (view) {
      if (view) {
        this.stepLockedId = view.model.get("_id");
      }

      this.isStepLocking = true;
    },
    onTutorOpened: function (view, alertObject) {
      if (!this.isStepLocking) return;
      if (!this.isOriginStepLocked(view)) return;
      this.isTutorOpen = true;
      Adapt.trigger("trickle:overlay");
      Adapt.trigger("trickle:wait");
    },
    isOriginStepLocked: function (view) {
      if (!view || !this.stepLockedId) return true;
      var parents = view.model.getAncestorModels();

      var hasStepLockedParent = _.find(parents, function (ancestor) {
        return ancestor.get('_id') === this.stepLockedId;
      }, this);

      if (!hasStepLockedParent) return false;
      return true;
    },
    onTutorClosed: function (view, alertObject) {
      if (!this.isStepLocking) return;
      if (!this.isTutorOpen) return;
      if (!this.isOriginStepLocked(view)) return;
      this.isTutorOpen = false;
      Adapt.trigger("trickle:unoverlay");
      Adapt.trigger("trickle:unwait");
    },
    onStepUnlock: function () {
      this.isStepLocking = false;
      this.stepLockedId = null;
    },
    onRemove: function () {
      this.onStepUnlock();
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/tutor", new TrickleTutorHandler());

  var TrickleVisibilityHandler = Backbone.Controller.extend({
    isStepLocking: false,
    trickleModel: null,
    initialize: function () {
      this.listenToOnce(Adapt, "app:dataReady", this.onAppDataReady);
    },
    onAppDataReady: function () {
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "trickle:steplock": this.onStepLock,
        "trickle:visibility": this.onVisibility,
        "trickle:stepunlock": this.onStepUnlock,
        "trickle:kill": this.onKill,
        "trickle:finished": this.onFinished,
        "remove": this.onRemove
      });
    },
    onStepLock: function (view) {
      this.isStepLocking = true;
      this.trickleModel = view.model;
      Adapt.trigger("trickle:visibility");
    },
    onVisibility: function () {
      if (!this.isStepLocking) return;
      if (!Adapt.trickle.pageView) return;
      var descendantsParentFirst = Adapt.trickle.pageView.descendantsParentFirst;
      var trickleModelId = this.trickleModel.get("_id");
      var trickleType = this.trickleModel.get("_type");

      var atIndex = _.findIndex(descendantsParentFirst, function (descendant) {
        if (descendant.get("_id") === trickleModelId) return true;
      });

      descendantsParentFirst.forEach(function (descendant, index) {
        var components = descendant.findDescendantModels("components");

        if (index <= atIndex) {
          descendant.set("_isVisible", true, {
            pluginName: "trickle"
          });
          components.forEach(function (componentModel) {
            componentModel.set("_isVisible", true, {
              pluginName: "trickle"
            });
          });
          return;
        }

        if (trickleType === "article" && descendant.get("_type") === "block") {
          if (descendant.get("_parentId") === trickleModelId) {
            descendant.set("_isVisible", true, {
              pluginName: "trickle"
            });
            components.forEach(function (componentModel) {
              componentModel.set("_isVisible", true, {
                pluginName: "trickle"
              });
            });
            return;
          }
        }

        descendant.set("_isVisible", false, {
          pluginName: "trickle"
        });
        components.forEach(function (componentModel) {
          componentModel.set("_isVisible", false, {
            pluginName: "trickle"
          });
        });
      });
    },
    onStepUnlock: function (view) {
      this.isStepLocking = false;
      this.trickleModel = null;
    },
    onKill: function () {
      this.onFinished();
      this.onStepUnlock();
    },
    onFinished: function () {
      var descendantsParentFirst = Adapt.trickle.pageView.descendantsParentFirst;
      descendantsParentFirst.forEach(function (descendant) {
        descendant.set("_isVisible", true, {
          pluginName: "trickle"
        });
        var components = descendant.findDescendantModels("components");
        components.forEach(function (componentModel) {
          componentModel.set("_isVisible", true, {
            pluginName: "trickle"
          });
        });
      });
    },
    onRemove: function () {
      this.onStepUnlock();
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/visibility", new TrickleVisibilityHandler());

  var TrickleDone = Backbone.Controller.extend({
    initialize: function () {
      this.listenToOnce(Adapt, "app:dataReady", this.onAppDataReady);
    },
    onAppDataReady: function () {
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      this.onDone = _.debounce(this.onDone.bind(this), 50);
      this.listenTo(Adapt, {
        "trickle:steplock": this.onDone,
        "trickle:stepunlock": this.onDone,
        "trickle:continue": this.onDone,
        "trickle:finished": this.onDone
      });
    },
    onDone: function () {
      Adapt.trigger("trickle:done");
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/done", new TrickleDone());

  var Trickle = Backbone.Controller.extend({
    model: null,
    pageView: null,
    initialize: function () {
      this.listenToOnce(Adapt, {
        'app:dataReady': this.onAppDataReady
      });
    },
    onAppDataReady: function () {
      this.getCourseModel();
      if (!this.isCourseEnabled()) return;
      this.setupListeners();
    },
    getCourseModel: function () {
      this.model = Adapt.course;
    },
    isCourseEnabled: function () {
      var trickleConfig = this.getModelConfig(this.model);
      if (trickleConfig && trickleConfig._isEnabled === false) return false;
      return true;
    },
    getModelConfig: function (model) {
      return model.get('_trickle');
    },
    getCompletionAttribute: function () {
      var trickle = this.getModelConfig(Adapt.config);
      if (!trickle) return '_isComplete';
      return trickle._completionAttribute || '_isComplete';
    },
    setModelConfig: function (model, config) {
      return model.set('_trickle', config);
    },
    setupListeners: function () {
      this.listenTo(Adapt, 'pageView:preRender', this.onPagePreRender);
    },
    onPagePreRender: function (view) {
      this.pageView = new PageView$1({
        model: view.model,
        el: view.el
      });
    },
    scroll: function (fromModel) {
      if (!this.shouldScrollPage(fromModel)) return;
      fromModel.set('_isTrickleAutoScrollComplete', true);
      var trickle = Adapt.trickle.getModelConfig(fromModel);
      var isAutoScrollOff = !trickle._autoScroll;
      var hasTrickleButton = trickle._button._isEnabled;

      if (isAutoScrollOff && !hasTrickleButton) {
        return;
      }

      var scrollTo = trickle._scrollTo;
      if (scrollTo === undefined) scrollTo = '@block +1';
      var scrollToId = '';

      switch (scrollTo.substr(0, 1)) {
        case '@':
          var relativeModel = fromModel.findRelativeModel(scrollTo, {
            filter: function (model) {
              return model.get('_isAvailable');
            }
          });
          if (relativeModel === undefined) return;
          scrollToId = relativeModel.get('_id');
          break;

        case '.':
          scrollToId = scrollTo.substr(1, scrollTo.length - 1);
          break;

        default:
          scrollToId = scrollTo;
      }

      if (scrollToId === '') return;

      if (hasTrickleButton) {
        Adapt.a11y.focusFirst($('.' + scrollToId));
      }

      if (isAutoScrollOff) return;
      var duration = fromModel.get('_trickle')._scrollDuration || 500;
      Adapt.scrollTo('.' + scrollToId, {
        duration: duration
      });
    },
    shouldScrollPage: function (fromModel) {
      var trickle = Adapt.trickle.getModelConfig(fromModel);
      if (!trickle || !trickle._isEnabled) return false;
      var hasScrolled = fromModel.get('_isTrickleAutoScrollComplete');
      if (hasScrolled) return false;

      var isArticleWithOnChildren = fromModel.get('_type') === 'article' && trickle._onChildren;

      if (isArticleWithOnChildren) return false;
      return true;
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/adapt-contrib-trickle", Adapt.trickle = new Trickle());

  Adapt.on('questionView:showFeedback', function (view) {
    var alertObject = {
      title: view.model.get('feedbackTitle'),
      body: view.model.get('feedbackMessage')
    };
    var attributes = {};
    var classes = [];

    if (view.model.has('_isCorrect')) {
      if (view.model.get('_isCorrect')) {
        classes.push('is-correct');
      } else {
        if (view.model.has('_isAtLeastOneIncorrectSelection')) {
          if (!view.model.get('_isAtLeastOneIncorrectSelection')) {
            classes.push('is-partially-correct');
          } else {
            classes.push('is-incorrect');
          }
        } else if (view.model.has('_isAtLeastOneCorrectSelection')) {
          if (view.model.get('_isAtLeastOneCorrectSelection')) {
            classes.push('is-partially-correct');
          } else {
            classes.push('is-incorrect');
          }
        } else {
          classes.push('is-incorrect');
        }
      }
    }

    if (view.model.has('_component')) {
      classes.push('is-component is-' + view.model.get('_component').toLowerCase());
    } else if (view.model.has('_extension')) {
      classes.push('is-extension is-' + view.model.get('_extension').toLowerCase());
    }

    attributes['data-adapt-id'] = view.model.get('_id');
    alertObject._classes = classes.join(' ');
    alertObject._attributes = attributes;
    Adapt.once('notify:closed', function () {
      Adapt.trigger('tutor:closed', view, alertObject);
    });
    Adapt.trigger('notify:popup', alertObject);
    Adapt.trigger('tutor:opened', view, alertObject);
  });

  var ComponentLogo = function (_Backbone$Controller) {
    _inherits(ComponentLogo, _Backbone$Controller);

    var _super = _createSuper(ComponentLogo);

    function ComponentLogo() {
      _classCallCheck(this, ComponentLogo);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentLogo, [{
      key: "initialize",
      value: function initialize() {
        Adapt.on("componentView:postRender", this.onComponentPostRender.bind(this));
      }
    }, {
      key: "onComponentPostRender",
      value: function onComponentPostRender(componentView) {
        var _this = this;

        var data = componentView.model.get("_componentLogo");
        if (!data) return;
        var mode = data._mode;
        this.render(mode, componentView, data);
        var componentRow = componentView.model.get("_componentRow");
        this.listenTo(componentRow, "change:_isEnabled", function (componentRow, isEnabled) {
          if (!isEnabled) return;

          _.delay(function () {
            _this.render(mode, componentView, data);
          }, 0);
        });
      }
    }, {
      key: "render",
      value: function render(mode, componentView, data) {
        switch (mode) {
          case "small":
            this._renderLogoSmall(componentView, data);

            break;

          default:
            this._renderLogoNormal(componentView, data);

        }
      }
    }, {
      key: "_renderLogoNormal",
      value: function _renderLogoNormal(componentView, data) {
        var template = Handlebars.templates['componentLogo'];
        var html = Handlebars.compile(template(data));
        componentView.$(".component__header").addClass("has-componentlogo").prepend(html).after("<div class='u-clearfix'></div>");
        componentView.$el.closest(".componentrow").find(".componentrow__title").addClass("has-componentlogo");
      }
    }, {
      key: "_renderLogoSmall",
      value: function _renderLogoSmall(componentView, data) {
        var template = Handlebars.templates['componentLogoSmall'];
        var html = Handlebars.compile(template(data));
        var $parents = componentView.$(".component__title-inner");
        $parents = $parents.add(componentView.$el.closest(".componentrow").find(".componentrow__title-inner"));
        $parents.each(function (i, e) {
          if ($(e).hasClass("has-componentlogo")) return;
          $(e).addClass("has-componentlogo").prepend(html);
        });
      }
    }]);

    return ComponentLogo;
  }(Backbone.Controller);

  Adapt.componentLogo = new ComponentLogo();

  var DownloadView = function (_Backbone$View) {
    _inherits(DownloadView, _Backbone$View);

    var _super = _createSuper(DownloadView);

    function DownloadView() {
      _classCallCheck(this, DownloadView);

      return _super.apply(this, arguments);
    }

    _createClass(DownloadView, [{
      key: "tagName",
      value: function tagName() {
        return "span";
      }
    }, {
      key: "className",
      value: function className() {
        var classes = ["download"];
        return classes.join(" ");
      }
    }, {
      key: "events",
      value: function events() {
        return {
          "click .js-download-tooltip": "onTooltipClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars__default['default'].templates["ddDownload"];
        this.$el.html(new Handlebars__default['default'].SafeString(template(this.model.toJSON())).string);
      }
    }, {
      key: "onTooltipClick",
      value: function onTooltipClick() {
        Adapt.createTooltip(this.$(".js-download-tooltip"), this.model.get("tooltip"));
      }
    }]);

    return DownloadView;
  }(Backbone.View);
  var DownloadView$1 = __AMD("extensions/adapt-dd-download/js/downloadView", DownloadView);

  Adapt.on('router:page', function () {
    Handlebars__default['default'].registerHelperEl("download", function () {
      var data = Handlebars__default['default'].getContextHash.apply(this, arguments);
      data._download = data.download;
      data._icon = data.icon || "download";

      if (Adapt.config.get("_isEpub")) {
        var rAbsoluteURL = new RegExp('^(?:[a-z]+:)?//', 'i');

        if (!rAbsoluteURL.test(data.href)) {
          var _Adapt$config$get;

          var filePath;

          try {
            filePath = data.href.match(/^course[/\\](.+)?[/\\]downloads[/\\](.+)$/);
            filePath = filePath[2];
          } catch (err) {
            throw "{{#download}} href property has invalid URL:\n\n" + data.href + "\n\nAll local downloadable files must be located in \"course/**/downloads/**.";
          }

          var externalURL = (_Adapt$config$get = Adapt.config.get("_download")) === null || _Adapt$config$get === void 0 ? void 0 : _Adapt$config$get._externalMirrorURL;
          if (!externalURL) throw "config.json: _download._externalMirrorURL must be defined!";
          var pageModel = Adapt.findById(Adapt.location._currentId);
          var productionCode = pageModel.get("productionCode");
          var topicNum = pageModel.get("topicNum");
          if (productionCode === undefined) throw "\"productionCode\" must be defined in contentObjects.jsonsynt!";
          if (topicNum === undefined) throw "\"topicNum\" must be defined in contentObjects.jsonsynt!";
          data.href = externalURL + "/" + productionCode + "/" + productionCode + "." + topicNum + "/" + filePath;
          data._isExternal = true;
        }
      }

      var modelJSON = _.extend({}, data, {
        tooltip: data._isExternal ? "Right-click and select ‘Save link as...’ to save this file to your device." : ""
      });

      return new DownloadView$1({
        model: new Backbone.Model(modelJSON)
      }).$el;
    });
  });

  var FigurePopupView = function (_Backbone$View) {
    _inherits(FigurePopupView, _Backbone$View);

    var _super = _createSuper(FigurePopupView);

    function FigurePopupView() {
      _classCallCheck(this, FigurePopupView);

      return _super.apply(this, arguments);
    }

    _createClass(FigurePopupView, [{
      key: "className",
      value: function className() {
        var classes = ["figure-popup", this.model.get("_classes") || ""];
        return classes.join(" ");
      }
    }, {
      key: "events",
      value: function events() {
        return {};
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpEventListeners();
        this.render();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenToOnce(Adapt, "notify:opened", this.onOpened);
        this.listenToOnce(Adapt, "notify:closed", this.onClosed);
      }
    }, {
      key: "onOpened",
      value: function onOpened() {
        Adapt.scrollfix.disableA11yScroll();
      }
    }, {
      key: "onClosed",
      value: function onClosed() {
        this.$el.addClass("is-closed");
        Adapt.scrollfix.enableA11yScroll();
      }
    }, {
      key: "remove",
      value: function remove() {
        this.model.trigger("remove");

        _get(_getPrototypeOf(FigurePopupView.prototype), "remove", this).call(this);
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var data = this.model.toJSON();
        data.view = this;
        var template = Handlebars.templates['ddFigurePopup'];
        this.$el.html(template(data));

        _.delay(function () {
          Handlebars.fixPlaceholders(_this.$el);
        }, 50);
      }
    }, {
      key: "closePopup",
      value: function closePopup() {
        Adapt.trigger('notify:close');
      }
    }]);

    return FigurePopupView;
  }(Backbone.View);
  var FigurePopupView$1 = __AMD("extensions/adapt-dd-figure/js/figurePopupView", FigurePopupView);

  var HIDDEN_OBSERVER_DEBOUNCE$1 = 500;

  var FigureItemView = function (_Backbone$View) {
    _inherits(FigureItemView, _Backbone$View);

    var _super = _createSuper(FigureItemView);

    function FigureItemView() {
      _classCallCheck(this, FigureItemView);

      return _super.apply(this, arguments);
    }

    _createClass(FigureItemView, [{
      key: "events",
      value: function events() {
        var e = {};

        if (this.model.get("lightbox")) {
          e["click"] = "onLightboxClick";
        }

        return e;
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpModelData();
        this.setupEventListeners();

        _.delay(this.postRender.bind(this), 0);
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        this.setUpLightboxData();
        this.model.set("content", this.$(".js-figure-item-inner").html());
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        var _this = this;

        this.onDeviceResize = _.debounce(this.onDeviceResize.bind(this), 10);
        this.listenTo(Adapt, 'device:resize', this.onDeviceResize);

        _.delay(function () {
          _this.$el.imageready(_this.onDeviceResize.bind(_this));
        }, 10);

        this.listenTo(this.model, "change:_isTransformed", this.onTransformedChange);
        this.listenTo(this.model, "change:_isHidden", this.onHiddenChange);
      }
    }, {
      key: "onDeviceResize",
      value: function onDeviceResize() {
        var scaleDown = this.model.get("scaleDown");

        if (scaleDown) {
          this.updateScaleDown();
          this.updateLightbox();
        } else {
          this.updateScrolling();
        }
      }
    }, {
      key: "updateScrolling",
      value: function updateScrolling() {
        if (this.model.get("scrolling") === false) return;
        this.$el.toggleClass("has-overflow-scrolling", false);
        var $itemInner = this.$(".js-figure-item-inner");
        $itemInner.css("display", "inline-block");
        var myWidth = this.$el[0].getBoundingClientRect().width;
        var innerWidth = $itemInner[0].getBoundingClientRect().width;
        $itemInner.css("display", "");
        this.$el.toggleClass("has-overflow-scrolling", myWidth < innerWidth);
      }
    }, {
      key: "isLightboxEnabled",
      value: function isLightboxEnabled() {
        var _this$model$get;

        return Boolean((_this$model$get = this.model.get("lightbox")) === null || _this$model$get === void 0 ? void 0 : _this$model$get._isEnabled);
      }
    }, {
      key: "isLightboxActive",
      value: function isLightboxActive() {
        var _this$model$get2;

        return Boolean((_this$model$get2 = this.model.get("lightbox")) === null || _this$model$get2 === void 0 ? void 0 : _this$model$get2._isActive);
      }
    }, {
      key: "onTransformedChange",
      value: function onTransformedChange(model, isTransformed) {
        var lightbox = this.model.get("lightbox");
        if (!lightbox) return;
        lightbox._isActive = isTransformed;
        this.$el.toggleClass("lightbox-active", isTransformed);
      }
    }, {
      key: "setUpLightboxData",
      value: function setUpLightboxData() {
        var lightbox = this.model.get("lightbox");
        if (!lightbox) return;
        if (lightbox === true) lightbox = {};
        this.model.set("lightbox", {
          _isEnabled: true,
          _width: !isNaN(lightbox) ? lightbox : lightbox._width || "auto",
          _backgroundEnabled: lightbox.bg === false ? false : true
        });
      }
    }, {
      key: "onLightboxClick",
      value: function onLightboxClick() {
        if (!this.isLightboxActive()) return;
        this.openLightbox();
      }
    }, {
      key: "openLightbox",
      value: function openLightbox() {
        if (this._isPopupOpen) return;
        this._isPopupOpen = true;
        this.popupView = new FigurePopupView$1({
          model: this.model
        });
        Adapt.trigger("notify:popup", {
          _view: this.popupView,
          _isCancellable: true,
          _showCloseButton: true,
          _classes: 'figure-lightbox dragscroll'
        });
        this.listenToOnce(Adapt, {
          'popup:closed': this.onLightboxClosed
        });
      }
    }, {
      key: "onLightboxClosed",
      value: function onLightboxClosed() {
        this._isPopupOpen = false;
      }
    }, {
      key: "onHiddenChange",
      value: function onHiddenChange(model, isHidden) {
        if (isHidden) return;
        var scaleDown = this.model.get("scaleDown");

        if (scaleDown) {
          this.updateScaleDown();
          this.updateLightbox();
        } else {
          this.updateScrolling();
        }
      }
    }, {
      key: "postRender",
      value: function postRender() {
        var _this2 = this;

        if (!this.isLightboxEnabled()) return;
        this.model.set("_isHidden", this.$el.is(":hidden"));

        var callback = _.debounce(function () {
          _this2.model.set("_isHidden", _this2.$el.is(":hidden"));
        }, HIDDEN_OBSERVER_DEBOUNCE$1);

        this._hiddenObserver = new MutationObserver(callback);
        var closestEl = this.$el.closest(".component")[0];
        if (!closestEl) closestEl = this.$el.closest(".notify")[0];

        this._hiddenObserver.observe(closestEl, {
          attributes: true,
          subtree: true
        });
      }
    }, {
      key: "updateScaleDown",
      value: function updateScaleDown() {
        if (!this.model.get("scaleDown")) return;
        if (this.model.get("_isHidden")) return;
        var $item = this.$el;
        var $itemInner = this.$(".js-figure-item-inner");
        $item.css("height", "");
        $itemInner.css("transform", "");
        var bb = $item[0].getBoundingClientRect();
        var bbInner = $itemInner[0].getBoundingClientRect();
        var xPadding = parseFloat($item.css("padding-left"), 10) + parseFloat($item.css("padding-right"), 10);
        var scale = (bb.width - xPadding) / bbInner.width;
        var isTransformed = scale < 1;
        this.model.set("_isTransformed", isTransformed);
        this.$el.toggleClass("is-transformed", isTransformed);
        if (!isTransformed) return;
        $itemInner.css("transform", "scale(".concat(scale, ")"));
        var yPadding = parseFloat($item.css("padding-top"), 10) + parseFloat($item.css("padding-bottom"), 10);
        $item.css("height", bbInner.height * scale + yPadding);
      }
    }, {
      key: "updateLightbox",
      value: function updateLightbox() {}
    }]);

    return FigureItemView;
  }(Backbone.View);
  var FigureItemView$1 = __AMD("extensions/adapt-dd-figure/js/figureItemView", FigureItemView);

  function renderFigureItem() {
    var data = Handlebars__default['default'].getContextHash.apply(this, arguments);
    if (data.sizing === undefined) data.sizing = "auto";
    if (data.sizing) data.sizing = Adapt.sizing.getSizingClass(data.sizing);
    if (data.scrolling === undefined) data.scrolling = true;

    if (data.scaledown || data.scaleDown) {
      data.scrolling = false;
      data.scaleDown = true;
    }

    if (data.lightbox) {
      data.scrolling = false;
      data.scaleDown = true;
      data.lightbox = data.lightbox;
    }

    if (data.caption) {
      data = _.extend({}, data, Adapt.figure.createCaptionData(data.caption, data.content));
    }

    var d = {
      scaleDown: data.scaleDown,
      lightbox: data.lightbox,
      scrolling: data.scrolling,
      caption: data.caption,
      captionPrefix: data.captionPrefix,
      stack: Boolean(data.stack)
    };
    data.data = JSON.stringify(d);
    var html = Handlebars__default['default'].templates["ddFigureItem"](data);
    return new Handlebars__default['default'].SafeString(html);
  }

  Handlebars__default['default'].registerHelper("item", renderFigureItem);
  Handlebars__default['default'].registerHelper("figureItem", renderFigureItem);
  Handlebars__default['default'].registerHelper("figureitem", renderFigureItem);

  function renderFigureText() {
    var data = Handlebars__default['default'].getContextHash.apply(this, arguments);
    if (data.sizing) data.sizing = Adapt.sizing.getSizingClass(data.sizing);
    var html = Handlebars__default['default'].templates["ddFigureText"](data);
    return new Handlebars__default['default'].SafeString(html);
  }

  Handlebars__default['default'].registerHelper("figureText", renderFigureText);
  Handlebars__default['default'].registerHelper("figuretext", renderFigureText);

  var FigureView = function (_Backbone$View) {
    _inherits(FigureView, _Backbone$View);

    var _super = _createSuper(FigureView);

    function FigureView() {
      _classCallCheck(this, FigureView);

      return _super.apply(this, arguments);
    }

    _createClass(FigureView, [{
      key: "className",
      value: function className() {
        var classes = ["figure", this.model.get("class") || "", this.model.get("reverse") ? "is-reverse" : "", this.model.get("align") ? "align-" + this.model.get("align") : "", this.model.get("justify") ? "justify-" + this.model.get("justify") : "", this.model.get("wrap") === false ? "no-wrap" : "", this.model.get("mode") ? "is-mode-" + this.model.get("mode") : "", this.model.get("theme") ? "theme-" + this.model.get("theme") : ""];
        var direction = this.model.get("direction");

        if (direction === undefined) {
          direction = this.model.get("column") ? "column" : "row";
        }

        classes.push("is-".concat(direction));
        return classes.join(" ");
      }
    }, {
      key: "tagName",
      value: function tagName() {
        return "figure";
      }
    }, {
      key: "attributes",
      value: function attributes() {
        var attr = {};
        if (this.model.get("style")) attr.style = this.model.get("style");
        if (this.model.get("name")) attr.name = this.model.get("name");
        return attr;
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.render();
        this.setupEventListeners();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {}
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var template = Handlebars__default['default'].templates['ddFigure'];
        this.$el.html(new Handlebars__default['default'].SafeString(template(this.model.toJSON())).string);
        this.$(".js-figure-item").each(function (i, e) {
          var modelData = {};

          try {
            modelData = JSON.parse($(e).attr("data-model"));
            $(e).removeAttr("data-model");
          } catch (err) {
            modelData = {};
          }

          modelData = _.extend({}, modelData, {
            _parent: _this.model
          });
          new FigureItemView$1({
            model: new Backbone.Model(modelData),
            el: e
          });
        });

        _.delay(function () {
          var _Adapt$debug;

          if ((_Adapt$debug = Adapt.debug) !== null && _Adapt$debug !== void 0 && _Adapt$debug.setUpInteract) {
            var $marks = _this.$(".mark");

            if (!$marks.length) return;
            Adapt.debug.setUpInteract(_this.$(".mark"), _this.$(".ddimg__inner"), false);
          }
        }, 0);
      }
    }]);

    return FigureView;
  }(Backbone.View);
  var FigureView$1 = __AMD("extensions/adapt-dd-figure/js/figureView", FigureView);

  var FigureModel = function (_Backbone$Model) {
    _inherits(FigureModel, _Backbone$Model);

    var _super = _createSuper(FigureModel);

    function FigureModel() {
      _classCallCheck(this, FigureModel);

      return _super.apply(this, arguments);
    }

    _createClass(FigureModel, [{
      key: "initialize",
      value: function initialize() {
        this.initCaption();
      }
    }, {
      key: "initCaption",
      value: function initCaption() {
        if (!this.get("caption")) return;
        this.set(Adapt.figure.createCaptionData(this.get("caption"), this.get("content")));
      }
    }]);

    return FigureModel;
  }(Backbone.Model);
  var FigureModel$1 = __AMD("extensions/adapt-dd-figure/js/figureModel", FigureModel);

  var CAPTION_COUNTS = {};

  var Figure = function (_Backbone$Controller) {
    _inherits(Figure, _Backbone$Controller);

    var _super = _createSuper(Figure);

    function Figure() {
      _classCallCheck(this, Figure);

      return _super.apply(this, arguments);
    }

    _createClass(Figure, [{
      key: "initialize",
      value: function initialize() {
        Adapt.on('router:page', this.onRouterPage);
      }
    }, {
      key: "onRouterPage",
      value: function onRouterPage() {
        Handlebars__default['default'].registerHelperEl("figure", function () {
          var context = arguments[arguments.length - 1];

          var modelJSON = _.extend({}, context.hash, {
            content: context.fn(this)
          });

          return new FigureView$1({
            model: new FigureModel$1(modelJSON)
          }).$el;
        });
      }
    }, {
      key: "_getCaptionCount",
      value: function _getCaptionCount(type, increment) {
        if (CAPTION_COUNTS[type] === undefined) {
          CAPTION_COUNTS[type] = 0;
        }

        if (increment) {
          CAPTION_COUNTS[type]++;
        }

        return CAPTION_COUNTS[type];
      }
    }, {
      key: "createCaptionData",
      value: function createCaptionData(captionStr, content) {
        var type = "Figure";
        if (content && (content.string || content).includes("<table")) type = "Table";
        if (captionStr === true) captionStr = " ";
        var isInvis = captionStr[0] === "!";

        var c = this._getCaptionCount(type, !isInvis);

        if (isInvis) captionStr = captionStr.substr(1);
        var captionPrefix = "".concat(type, " ").concat(c).concat(captionStr.trim().length == 0 ? "" : ".", " ");

        if (captionStr[0] === "!") {
          captionStr = captionStr.substr(1);
          captionPrefix = "";
        }

        var data = {
          captionPrefix: captionPrefix,
          caption: captionStr,
          isCaptionInvis: isInvis
        };
        return data;
      }
    }]);

    return Figure;
  }(Backbone.Controller);

  var figure = new Figure();
  Adapt.figure = figure;

  Adapt.isPDFMode = function () {
    var _Adapt$pdf;

    return Boolean((_Adapt$pdf = Adapt.pdf) === null || _Adapt$pdf === void 0 ? void 0 : _Adapt$pdf._isEnabled);
  };

  Adapt.isEpubMode = function () {
    var _Adapt$epub;

    return Boolean((_Adapt$epub = Adapt.epub) === null || _Adapt$epub === void 0 ? void 0 : _Adapt$epub._isEnabled);
  };

  Adapt.isDebugEnabled = function () {
    var _Adapt$debug;

    return Boolean((_Adapt$debug = Adapt.debug) === null || _Adapt$debug === void 0 ? void 0 : _Adapt$debug._isEnabled);
  };

  $.fn.onUnhidden = function (callback) {
    var HIDDEN_OBSERVER_DEBOUNCE = 10;
    var $el = $(this);
    var closestEl = $el.closest(".component")[0];
    if (!closestEl) closestEl = $el.closest(".notify")[0];

    if (!closestEl) {
      Adapt.log.error("$.fn.onUnhidden: Could not set up MutationObserver (could not find closest parent).", $el);
      return this;
    }

    var observerCallback = _.debounce(function () {
      $el.each(function (i, e) {
        var $e = $(e);
        var isHidden = $e.is(":hidden");
        var isUnhidden = $e.data("_isUnhidden");
        if (isHidden === !isUnhidden) return;
        $e.data("_isUnhidden", !isHidden);
        if (isHidden) return;
        callback.apply($e);
      });
    }, HIDDEN_OBSERVER_DEBOUNCE);

    var unhiddenObserver = new MutationObserver(observerCallback);
    unhiddenObserver.observe(closestEl, {
      attributes: true,
      attributeFilter: ["style", "hidden", "aria-expanded", "class"],
      subtree: true
    });
    return this;
  };

  requirejs.onError = function (err) {
    if (err.requireType === 'timeout') {
      if (Adapt.ddLoading) {
        Adapt.ddLoading.showError("Load timeout.");
      }

      throw err;
    } else {
        throw err;
      }
  };

  var helperElAttr = "data-registerhelperel-id";
  var helperElData = {};

  function getContextHash(args) {
    var context = arguments[arguments.length - 1];
    context.hash = _.mapObject(context.hash, function (val, key) {
      if (val == "true") return true;
      if (val == "false") return false;
      if (val === undefined) return false;

      if (val[0] == "{" && val[val.length - 1] == "}") {
        var SQUOT_PLACEHOLDER = "@@!_S_!@@";
        var DQUOT_PLACEHOLDER = "@@!_D_!@@";
        val = val.replace(/([^\\]\\(?:\\{2})*)(['"])/g, function (match, $1, $2) {
          return $1 + ($2 === "'" ? SQUOT_PLACEHOLDER : DQUOT_PLACEHOLDER);
        });
        var regex = new RegExp(/(['"]?)([\w-]*)(\1)\s*?:\s*?((['"]).*?(\5)|(\w+))/g);
        val = val.replace(regex, function (match, $1, $2, $3, $4) {
          if (!$1) return "'".concat($2, "': ").concat($4);
          $4 = $4.replace(new RegExp(SQUOT_PLACEHOLDER, 'g'), "'");
          $4 = $4.replace(new RegExp(DQUOT_PLACEHOLDER, 'g'), '"');
          return match;
        });
      }

      if (val[0] == "{" && val[val.length - 1] == "}" || val[0] == "[" && val[val.length - 1] == "]") {
        try {
          val = val.replace(/[']/g, '"');
          return JSON.parse(val);
        } catch (err) {
          throw "adapt-dd-helpers could not parse string as JSON: " + val;
        }
      }

      return val;
    });
    context.hash.content = context.fn ? context.fn(this) : "";
    return context.hash;
  }

  var helpers$4 = {
    concat: function () {
      var arg = Array.prototype.slice.call(arguments, 0);
      arg.pop();
      return arg.join('');
    },
    arr: function () {
      return Array.from(arguments);
    },
    zws: function () {
      getContextHash.apply(this, arguments);
      return "<span class='u-no-select'>\u200B</span>";
    },
    hyperlink: function () {
      var data = getContextHash.apply(this, arguments);
      data.content = data.content.trim();
      var html = Handlebars__default['default'].templates["ddHyperlink"](data);
      return new Handlebars__default['default'].SafeString(html);
    },
    tel: function () {
      var data = getContextHash.apply(this, arguments);
      var html = Handlebars__default['default'].templates["ddTel"](data);
      return new Handlebars__default['default'].SafeString(html);
    },
    kbd: function () {
      var data = getContextHash.apply(this, arguments);
      var html = Handlebars__default['default'].templates["ddKbd"](data);
      return new Handlebars__default['default'].SafeString(html);
    },
    clearfix: function () {
      var data = getContextHash.apply(this, arguments);
      var html = Handlebars__default['default'].templates["ddClearfix"](data);
      return new Handlebars__default['default'].SafeString(html);
    },
    inlineIcon: function (type) {
      var context = arguments[arguments.length - 1];
      var iconType = typeof type === "string" ? type : context.hash.type;
      if (!iconType && !context.hash.src) throw "{{{#icon}}}: Must have a defined \"type\" or \"src\" property.";

      var data = _.extend(context.hash, {
        "iconClass": "icon-" + iconType
      });

      var html = Handlebars__default['default'].templates["ddIcon"](data);
      return new Handlebars__default['default'].SafeString(html);
    },
    blockquote: function () {
      var context = arguments[arguments.length - 1];
      var html = Handlebars__default['default'].templates["ddBlockquote"](_.extend(context.hash, {
        content: context.fn(this)
      }));
      return new Handlebars__default['default'].SafeString(html);
    },
    paper: function () {
      var context = arguments[arguments.length - 1];
      var html = Handlebars__default['default'].templates["ddPaper"](_.extend(context.hash, {
        content: context.fn(this)
      }));
      return new Handlebars__default['default'].SafeString(html);
    },
    error: function () {
      var context = arguments[arguments.length - 1];
      Adapt.log.error("Page has {{#error}} tag present.");
      var html = Handlebars__default['default'].templates["ddError"](_.extend(context.hash, {
        content: context.fn(this)
      }));
      return new Handlebars__default['default'].SafeString(html);
    }
  };

  for (var name$4 in helpers$4) {
    if (helpers$4.hasOwnProperty(name$4)) {
      Handlebars__default['default'].registerHelper(name$4, helpers$4[name$4]);
    }
  }

  var registeredHelperEls = [];

  function observePlaceholderRender(placeholderAttrId, el, callback) {
    helperElData[placeholderAttrId] = el;
    var mutationObserver;
    var OBSERVER_TIMEOUT = 1000;
    var observerTimeout = setTimeout(function () {
      var $placeholder = $("[" + helperElAttr + "='" + placeholderAttrId + "']");

      if ($placeholder.length) {
        Adapt.log.error("registerHelperEl: Could not be rendered into its placeholder element: [" + helperElAttr + "='" + placeholderAttrId + "']\nMutationObserver could not detect the placeholder being rendered.", $placeholder);
      } else {
        Adapt.log.warn("registerHelperEl: Could not be rendered into its placeholder element.\nThis was likely caused by the placeholder being incorrectly rendered as an attribute value.");
      }

      mutationObserver.disconnect();
    }, OBSERVER_TIMEOUT);
    mutationObserver = new MutationObserver(function (mutations) {
      _.each(mutations, function (mutation) {
        if (mutation.type != "childList") return;

        _.find(mutation.addedNodes, function (node) {
          if (!node) return;
          var placeholderEl;

          try {
            placeholderEl = node.querySelector("[" + helperElAttr + "='" + placeholderAttrId + "']");

            if (!placeholderEl) {
              if (node.getAttribute(helperElAttr) == placeholderAttrId) {
                placeholderEl = node;
              }
            }
          } catch (err) {
            placeholderEl = false;
          }

          if (placeholderEl) {
            clearTimeout(observerTimeout);
            mutationObserver.disconnect();
            var $el = $(el);
            $(placeholderEl).replaceWith($el);

            if (callback) {
              callback($el);
            }

            return true;
          }
        });
      });
    });
    mutationObserver.observe($("body")[0], {
      childList: true,
      subtree: true
    });
  }

  Handlebars__default['default'].fixPlaceholders = function ($parentEl) {
    var $placeholders = $parentEl.find(".registerhelperel__placeholder");
    $placeholders.each(function (i, e) {
      var id = $(e).data("registerhelperel-id");
      $(e).replaceWith(helperElData[id].clone());
    });
  };

  Handlebars__default['default'].registerHelperEl = function (helperName, helperCallback, postRenderCallback) {
    if (_.includes(registeredHelperEls, helperName)) return;
    if (!helperCallback) throw "helperCallback must be defined";
    Handlebars__default['default'].registerHelper(helperName, function () {
      var el = helperCallback.apply(this, Array.prototype.slice.call(arguments));
      if (typeof el === "string") return el;
      if (el instanceof Handlebars__default['default'].SafeString) return el;
      helperName = helperName.toLowerCase();

      var _uniqueId = _.uniqueId(helperName);

      var placeholderHTML = "<span class=\"registerhelperel__placeholder\" ".concat(helperElAttr, "=\"").concat(_uniqueId, "\">PLACEHOLDER(").concat(helperName, ")</span>");
      observePlaceholderRender(_uniqueId, el, postRenderCallback);
      return placeholderHTML;
    });
  };

  Handlebars__default['default'].getComponentModelFromContext = function (helperContext) {
    var componentData = helperContext.data.root;
    var model;

    var isComponentModel = function (m) {
      try {
        if (m instanceof ComponentModel$1 || m.get("_type") === "component") {
            return true;
          }
      } catch (err) {
        return false;
      }

      return false;
    };

    try {
      model = componentData.view.model;
      if (isComponentModel(model)) return model;
    } catch (err) {
      model = componentData;
    }

    var errMsg = "Could not find ComponentModel from provided Handlebars Helper context.\nSee the array below for the ancestors (\"_parent\"s) that were traversed.";
    var path = [];

    do {
      try {
        path.push(model);

        if (model instanceof Backbone.Model) {
          var _model$getParent;

          if (isComponentModel(model)) break;
          model = ((_model$getParent = model.getParent) === null || _model$getParent === void 0 ? void 0 : _model$getParent.apply(model)) || model.get("_parent");
        } else {
            model = model._parent;
          }
      } catch (_unused) {
        Adapt.log.error(errMsg, path);
        throw "";
      }
    } while (Boolean(model));

    if (!model) {
      Adapt.log.error(errMsg, path);
      throw "";
    }

    return model;
  };

  Handlebars__default['default'].getBlockModelFromContext = function (helperContext) {
    var componentModel = Handlebars__default['default'].getComponentModelFromContext(helperContext);
    return componentModel.get("_parent");
  };

  var createHelperCallback = function (context, name, callback) {
    Adapt.log.error("createHelperCallback has been depractated (had asynchronous bug). Use Handlebars.registerHelperEl instead.");
    throw "";
  };

  Handlebars__default['default'].createHelperCallback = createHelperCallback;

  Handlebars__default['default'].getComponentViewFromContext = function (context) {
    Adapt.log.error("getComponentViewFromContext has been depractated (had asynchronous bug). Use Handlebars.getComponentModelFromContext instead.");
    var componentView = context.data.root.view;

    if (componentView.model.get("_type") != "component") {
      componentView = Adapt.findViewByModelId(componentView.model.get("_parent").get("_id"));
    }

    return componentView || undefined;
  };

  Handlebars__default['default'].getContextHash = getContextHash;

  var ImgPopupView = function (_Backbone$View) {
    _inherits(ImgPopupView, _Backbone$View);

    var _super = _createSuper(ImgPopupView);

    function ImgPopupView() {
      _classCallCheck(this, ImgPopupView);

      return _super.apply(this, arguments);
    }

    _createClass(ImgPopupView, [{
      key: "className",
      value: function className() {
        var classes = ["ddimg-popup", this.model.get("_classes") || ""];
        return classes.join(" ");
      }
    }, {
      key: "events",
      value: function events() {
        return {};
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpImgClasses();
        this.setUpEventListeners();
        this.render();
      }
    }, {
      key: "setUpImgClasses",
      value: function setUpImgClasses() {
        var lightbox = this.model.get("lightbox");
        var classes = ["ddimg-popup__img", "ddimg-popup__size-" + lightbox._width, lightbox._backgroundEnabled ? "has-bg" : ""];
        this.model.set("_imgClasses", classes.join(" "));
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenToOnce(Adapt, "notify:opened", this.onOpened);
        this.listenToOnce(Adapt, "notify:closed", this.onClosed);
      }
    }, {
      key: "onOpened",
      value: function onOpened() {
        Adapt.scrollfix.disableA11yScroll();
      }
    }, {
      key: "onClosed",
      value: function onClosed() {
        this.$el.addClass("is-closed");
        Adapt.scrollfix.enableA11yScroll();
      }
    }, {
      key: "remove",
      value: function remove() {
        this.model.trigger("remove");

        _get(_getPrototypeOf(ImgPopupView.prototype), "remove", this).call(this);
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        data.view = this;
        var template = Handlebars.templates['ddImgPopup'];
        this.$el.html(template(data));
      }
    }, {
      key: "closePopup",
      value: function closePopup() {
        Adapt.trigger('notify:close');
      }
    }]);

    return ImgPopupView;
  }(Backbone.View);
  var ImgPopupView$1 = __AMD("extensions/adapt-dd-img/js/imgPopupView", ImgPopupView);

  var ImgView = function (_Backbone$View) {
    _inherits(ImgView, _Backbone$View);

    var _super = _createSuper(ImgView);

    function ImgView() {
      _classCallCheck(this, ImgView);

      return _super.apply(this, arguments);
    }

    _createClass(ImgView, [{
      key: "className",
      value: function className() {
        var classes = ["ddimg", this.model.get("content").trim().length ? "has-content" : "", this.model.get("lightbox") ? "has-lightbox" : "", this.model.get("_widthAuto") ? "is-auto-width" : "", this.model.get("class") || "", this.model.get("sizing") || ""];
        return classes.join(" ");
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          id: this.model.get("_id"),
          name: this.model.get("name") || undefined,
          style: this.model.get("style") || undefined
        };
      }
    }, {
      key: "events",
      value: function events() {
        var _events = {};

        if (this.model.get("lightbox")) {
          _events["click .js-ddimg-click"] = "onImgClick";
        }

        return _events;
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpModelData();
        this.render();
        this.setUpEventListeners();
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        this.setUpLightboxData();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        var _this = this;

        var $img = this.$(".js-ddimg-img");
        $img.on("error", function () {
          _this.$el.addClass("has-error");

          $img.addClass("has-error");
        });
      }
    }, {
      key: "setUpLightboxData",
      value: function setUpLightboxData() {
        var lightbox = this.model.get("lightbox");
        if (!lightbox) return;
        var src = !isNaN(lightbox) || !(lightbox !== null && lightbox !== void 0 && lightbox.src) ? this.model.get("src") : lightbox.src;
        this.model.set("lightbox", {
          _isEnabled: true,
          _width: !isNaN(lightbox) ? lightbox : lightbox._width || "auto",
          src: src,
          _backgroundEnabled: Boolean(lightbox.bg)
        });
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars__default['default'].templates['ddImg'];
        this.$el.html(new Handlebars__default['default'].SafeString(template(this.model.toJSON())).string);

        if (this.$(".mark.has-shadow").length) {
          this.$(".ddimg__inner").css("overflow", "hidden");
        }
      }
    }, {
      key: "onImgClick",
      value: function onImgClick(event) {
        event.stopPropagation();
        this.openLightbox();
      }
    }, {
      key: "openLightbox",
      value: function openLightbox() {
        if (!this.model.get("lightbox")) return;
        if (this._isPopupOpen) return;
        this._isPopupOpen = true;
        this.popupView = new ImgPopupView$1({
          model: this.model
        });
        Adapt.trigger("notify:popup", {
          _view: this.popupView,
          _isCancellable: true,
          _showCloseButton: true,
          _classes: 'ddimg-lightbox dragscroll'
        });
        this.listenToOnce(Adapt, {
          'popup:closed': this.onLightboxClosed
        });
      }
    }, {
      key: "onLightboxClosed",
      value: function onLightboxClosed() {
        this._isPopupOpen = false;
      }
    }]);

    return ImgView;
  }(Backbone.View);
  var ImgView$1 = __AMD("extensions/adapt-dd-img/js/imgView", ImgView);

  var MAX_RESIZE_ATTEMPTS = 5;
  var RESIZE_BUFFER = 2;
  var HIDDEN_OBSERVER_DEBOUNCE = 500;

  var RespImgView = function (_ImgView) {
    _inherits(RespImgView, _ImgView);

    var _super = _createSuper(RespImgView);

    function RespImgView() {
      _classCallCheck(this, RespImgView);

      return _super.apply(this, arguments);
    }

    _createClass(RespImgView, [{
      key: "className",
      value: function className() {
        var classes = _get(_getPrototypeOf(RespImgView.prototype), "className", this).call(this);

        return classes + " rimg";
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.model.set("_isHidden", false);
        this._fontSizeMulti = 1;

        _get(_getPrototypeOf(RespImgView.prototype), "initialize", this).call(this);
      }
    }, {
      key: "_areItemsOverflowing",
      value: function _areItemsOverflowing() {
        var overflowing = false;
        var $items = this.$(".rimg__item");
        $items.each(function (i, e) {
          var $e = $(e);

          var bb = _.extend({}, $e[0].getBoundingClientRect());

          var pTop = parseFloat($e.css("padding-top"), 10);
          var pLeft = parseFloat($e.css("padding-left"), 10);
          var pRight = parseFloat($e.css("padding-right"), 10);
          var pBottom = parseFloat($e.css("padding-bottom"), 10);
          bb.top += pTop;
          bb.left += pLeft;
          bb.width -= pLeft + pRight;
          bb.height -= pTop + pBottom;
          var bbInner = $e.find(".rimg__item-inner")[0].getBoundingClientRect();

          if (bb.top - bbInner.top > RESIZE_BUFFER || bb.left - bbInner.left > RESIZE_BUFFER || bbInner.bottom - bb.bottom > RESIZE_BUFFER || bbInner.right - bb.right > RESIZE_BUFFER) {
            overflowing = $e;
            return false;
          }
        });
        return overflowing;
      }
    }, {
      key: "setUpRespImgEventListeners",
      value: function setUpRespImgEventListeners() {
        var _this = this;

        $(".rimg__img").imageready(function () {
          _this.$el.addClass("is-ready");
        });
        this.listenTo(Adapt, {
          'device:resize': _.debounce(this.onDeviceResize, 0).bind(this)
        });
        this.listenTo(this.model, "change:_isHidden", this.onHiddenChange);
        var observer = new MutationObserver(function (event) {
          _this._fontSizeMulti = 1;

          _this.onDeviceResize();

          var attempts = MAX_RESIZE_ATTEMPTS;
          var $overflowingItem = null;

          do {
            $overflowingItem = _this._areItemsOverflowing();

            if ($overflowingItem) {
              _this._fontSizeMulti -= 0.05;

              _this.onDeviceResize();
            } else {
              Adapt.log.info("RespImg: text resized after " + (MAX_RESIZE_ATTEMPTS - attempts) + " attempts.", _this.$el);
              return;
            }

            attempts--;
          } while (attempts > 0);

          Adapt.log.warn("RespImg: text resize was unsuccessful after " + MAX_RESIZE_ATTEMPTS + " attempts.", _this.$el, $overflowingItem);
        });
        observer.observe(this.$(".rimg__inner")[0], {
          subtree: true,
          childList: true
        });
      }
    }, {
      key: "onDeviceResize",
      value: function onDeviceResize() {
        this.recalculate();
      }
    }, {
      key: "recalculate",
      value: function recalculate() {
        var width = this.$el.width();
        var svgWidth = this.model.get("_svgWidth") || 1;
        var em = width / svgWidth * this._fontSizeMulti;
        this.$el.css("font-size", em + "px");
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars__default['default'].templates['ddRespImg'];
        this.$el.html(new Handlebars__default['default'].SafeString(template(this.model.toJSON())).string);
        this.renderItems();
      }
    }, {
      key: "onHiddenChange",
      value: function onHiddenChange(model, isHidden) {
        if (isHidden) return;
        this.onDeviceResize();
        Adapt.log.info("respImgView: :visible event detected.");
      }
    }, {
      key: "postRender",
      value: function postRender() {
        var _this2 = this;

        this.model.set("_isHidden", this.$el.is(":hidden"));

        _.delay(function () {
          _this2.recalculate();
        }, 0);

        var callback = _.debounce(function () {
          _this2.model.set("_isHidden", _this2.$el.is(":hidden"));
        }, HIDDEN_OBSERVER_DEBOUNCE);

        this._hiddenObserver = new MutationObserver(callback);
        var closestEl = this.$el.closest(".component")[0];
        if (!closestEl) closestEl = this.$el.closest(".notify")[0];

        this._hiddenObserver.observe(closestEl, {
          attributes: true,
          subtree: true
        });
      }
    }, {
      key: "renderItems",
      value: function renderItems() {
        var _this3 = this;

        var jsonPath = this.model.get("src").replace(/\.svg$/, ".json");
        $.ajax({
          dataType: "json",
          url: jsonPath,
          cache: true,
          success: function (data) {
            _this3.model.set("_svgWidth", data._width);

            _this3.model.set("_svgHeight", data._height);

            var css = document.createElement('style');
            css.type = "text/css";
            var styles = "";

            _.each(data._styles, function (props, className) {
              styles += "#" + _this3.model.get("_id") + " " + className + "{";

              _.each(props, function (e, i) {
                styles += i + ":" + e + ";";
              });

              styles += "} ";
            });

            css.appendChild(document.createTextNode(styles));

            _this3.$el[0].appendChild(css);

            _.each(data._items, function (item) {
              var $item = $("<div>");
              $item.addClass("rimg__item");
              $item.addClass("align-" + (item.align || "center"));
              $item.css({
                top: item.top + "%",
                left: item.left + "%",
                width: item.width + "%",
                height: item.height + "%",
                transform: item.transform
              });
              var $itemInner = $("<div>");
              $itemInner.attr("class", item.class).addClass("rimg__item-inner").html(item.html);

              _this3.$(".rimg__inner").append($item);

              $item.append($itemInner);
            });

            _this3.setUpRespImgEventListeners();

            _this3.postRender();
          },
          fail: function () {
            throw "respImgView.js: Could not load \"" + jsonPath + "\".";
          }
        });
      }
    }]);

    return RespImgView;
  }(ImgView$1);
  var RespImgView$1 = __AMD("extensions/adapt-dd-img/js/respImgView", RespImgView);

  Adapt.on('router:page', function () {
    Handlebars__default['default'].registerHelperEl("img", function () {
      var data = Handlebars__default['default'].getContextHash.apply(this, arguments);

      if (!data.src) {
        console.log(data);
        throw "{{#img}}: \"src\" parameter must be defined.";
      }

      data.src = data.src.trim();
      data._contain = data.contain === undefined ? true : Boolean(data.contain);
      data._widthAuto = Boolean(data.src.match(/\.svg$/i)) ? false : true;
      data.sizing = data.sizing ? Adapt.sizing.getSizingClass(data.sizing) : "";

      if (data.src.match(/--r\.svg$/)) {
        var _modelJSON = _.extend({}, data, {
          _id: "rimg-" + _.uniqueId()
        });

        return new RespImgView$1({
          model: new Backbone.Model(_modelJSON)
        }).$el;
      }

      var modelJSON = _.extend({}, data, {});

      return new ImgView$1({
        model: new Backbone.Model(modelJSON)
      }).$el;
    });
  });

  var InputFieldView = function (_Backbone$View) {
    _inherits(InputFieldView, _Backbone$View);

    var _super = _createSuper(InputFieldView);

    function InputFieldView() {
      _classCallCheck(this, InputFieldView);

      return _super.apply(this, arguments);
    }

    _createClass(InputFieldView, [{
      key: "className",
      value: function className() {
        var classes = ["inputfield", this.model.get("_isHintEnabled") ? "hint-enabled" : ""];
        return classes.join(" ");
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          name: this.model.get("_name"),
          "data-inputfield-id": this.model.get("_id")
        };
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'focus .js-inputfield-input': 'onFocus',
          'blur .js-inputfield-input': 'onBlur',
          'change .js-inputfield-input': 'onInputChange',
          'keyup .js-inputfield-input': 'onInputChange',
          'click .js-inputfield-incorrect-icon': 'onIncorrectIconClick',
          'click .js-inputfield-hint-icon': 'onHintIconClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpInputAttributes();
        this.render();
        this.setUpEventListeners();
      }
    }, {
      key: "setUpInputAttributes",
      value: function setUpInputAttributes() {
        var type = this.model.get("_type");
        var attr = {};

        switch (type) {
          case "number":
            attr.type = "number";
            attr.step = "any";
            attr.pattern = "[-+]?[0-9]*[.,]?[0-9]+";
            break;

          case "text":
            attr.type = "text";
            break;

          default:
            attr.type = "text";
            Adapt.log.error("{{#inputField}}: \"".concat(type, "\" is not a valid value for the \"type\" attribute of an <input> element! Defaulting to input type: \"text\"."));
        }

        this.model.set("_inputAttributes", attr);
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model, "change:_isSubmitted", this.onIsSubmittedChange);
        this.listenTo(this.model, "change:_isCorrect", this.onIsCorrectChange);
        this.listenTo(this.model, "change:_isLocked", this.onIsLockedChange);
        this.listenTo(this.model, "change:_isHintEnabled", this.onIsHintEnabledChange);
        this.listenTo(this.model, "change:_isFocused", this.onIsFocusedChange);
        this.listenTo(this.model, "change:_val", this.onValChange);
      }
    }, {
      key: "onIsSubmittedChange",
      value: function onIsSubmittedChange(model, isSubmitted) {
        if (!isSubmitted) {
          this.$el.removeClass("is-correct is-incorrect");
        } else {
          var isCorrect = this.model.get("_isCorrect");
          this.$el.toggleClass("is-correct", isCorrect).toggleClass("is-incorrect", !isCorrect);
        }
      }
    }, {
      key: "onIsLockedChange",
      value: function onIsLockedChange(model, isLocked) {
        this.$(".js-inputfield-input").prop("disabled", isLocked);
      }
    }, {
      key: "onFocus",
      value: function onFocus() {
        this.model.set("_isFocused", true);
      }
    }, {
      key: "onBlur",
      value: function onBlur() {
        this.model.set("_isFocused", false);
      }
    }, {
      key: "onIsFocusedChange",
      value: function onIsFocusedChange(model, isFocused) {
        this.$el.toggleClass("is-focused", isFocused);
      }
    }, {
      key: "onValChange",
      value: function onValChange(model, val) {
        this.$el.toggleClass("has-val", Boolean(val.length));
        this.$(".js-inputfield-input").attr("title", val);
      }
    }, {
      key: "onIsCorrectChange",
      value: function onIsCorrectChange(model, isCorrect) {
        if (!this.model.get("_isSubmitted")) return;
        this.$el.toggleClass("is-correct", isCorrect).toggleClass("is-incorrect", !isCorrect);
      }
    }, {
      key: "onIncorrectIconClick",
      value: function onIncorrectIconClick(event) {
        this.reset();
      }
    }, {
      key: "onIsHintEnabledChange",
      value: function onIsHintEnabledChange(model, isHintEnabled) {
        this.$el.toggleClass("hint-enabled", isHintEnabled);
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates['inputField'];
        this.$el.html(template(data));
        this.$(".js-inputfield-placeholder").css({
          "min-width": this.model.get("_width") + "em"
        });
      }
    }, {
      key: "reset",
      value: function reset() {
        var $input = this.$(".js-inputfield-input");
        $input.val("");
        $input.trigger("change");
        this.model.reset();
      }
    }, {
      key: "onInputChange",
      value: function onInputChange(event) {
        var $input = this.$("input");
        this.model.set("_val", $input.val());
      }
    }, {
      key: "onHintIconClick",
      value: function onHintIconClick() {
        this.showAnswer();
      }
    }, {
      key: "showAnswer",
      value: function showAnswer() {
        var $input = this.$("input");
        $input.val(this.model.getCorrectAnswer());
        $input.trigger("change");
      }
    }]);

    return InputFieldView;
  }(Backbone.View);

  var InputFieldView$1 = __AMD("extensions/adapt-dd-inputField/js/inputFieldView", InputFieldView);

  var InputFieldModel = function (_Backbone$Model) {
    _inherits(InputFieldModel, _Backbone$Model);

    var _super = _createSuper(InputFieldModel);

    function InputFieldModel() {
      _classCallCheck(this, InputFieldModel);

      return _super.apply(this, arguments);
    }

    _createClass(InputFieldModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _answers: [],
          _requireSubmit: true,
          _canShowMarking: true,
          _isHintEnabled: false,
          _allowsAnyCase: true,
          _allowsPunctuation: true,
          _width: undefined,
          _val: "",
          _isCorrect: false,
          _isLocked: false,
          _isSubmitted: false,
          _incorrectUserAnswers: [],
          _submitCount: 0
        };
      }
    }, {
      key: "getAnswers",
      value: function getAnswers() {
        return this.get("_answers");
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpWidth();
        this.checkGroupError();
        this.setUpEventListeners();
      }
    }, {
      key: "setUpWidth",
      value: function setUpWidth() {
        var answerLength = 1;
        var explicitWidth = this.get("_width");

        if (explicitWidth) {
          answerLength = explicitWidth;
        } else {
          _.each(this.get("_answers"), function (a) {
            var s = a.toString();
            if (s.length > answerLength) answerLength = s.length;
          });
        }

        this.set("_width", answerLength);
      }
    }, {
      key: "checkGroupError",
      value: function checkGroupError() {
        var _this = this;

        _.delay(function () {
          var groupItems = _this.getGroupItems();

          if (!groupItems) return;

          if (groupItems.length > _this.get("_answers").length) {
            throw "{{#inputField}}: inputField in group \"".concat(_this.get("_group"), "\" must have at least ").concat(groupItems.length, " possible answers (currently only has ").concat(_this.get("_answers").length, ").");
          }
        }, 0);
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this, "change:_val", this.onValChange);
      }
    }, {
      key: "onValChange",
      value: function onValChange(model, val) {
        if (this.get("_requireSubmit")) {
          if (this.checkAnswerInArray(this.get("_incorrectUserAnswers"), val)) {
            this.set("_isCorrect", false);
            this.set("_isSubmitted", true);
          } else {
            this.set("_isCorrect", false);
            this.set("_isSubmitted", false);
          }
        } else {
            this.submit();
          }
      }
    }, {
      key: "submit",
      value: function submit() {
        var val = this.get("_val");
        this.set("_submitCount", this.get("_submitCount") + 1);
        var isCorrect = this.checkAnswerInArray(this.get("_answers"), val);
        this.set("_isSubmitted", val !== "" || isCorrect);
        this.set("_isCorrect", isCorrect);

        if (!isCorrect && this.get("_requireSubmit")) {
          var iua = this.get("_incorrectUserAnswers");
          iua.push(val);
          this.set("_incorrectUserAnswers", _.uniq(iua));
        }
      }
    }, {
      key: "reset",
      value: function reset() {
        this.set("_isSubmitted", false);
        this.set("_isCorrect", false);
        this.set("_val", "");
      }
    }, {
      key: "lock",
      value: function lock() {
        this.set("_isLocked", true);
      }
    }, {
      key: "unlock",
      value: function unlock() {
        this.set("_isLocked", false);
      }
    }, {
      key: "enableHint",
      value: function enableHint() {
        this.set("_isHintEnabled", true);
      }
    }, {
      key: "disableHint",
      value: function disableHint() {
        this.set("_isHintEnabled", false);
      }
    }, {
      key: "enableRequireSubmit",
      value: function enableRequireSubmit() {
        this.set("_requireSubmit", true);
      }
    }, {
      key: "getVal",
      value: function getVal() {
        return this.get("_val");
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        return this.get("_isCorrect");
      }
    }, {
      key: "isGrouped",
      value: function isGrouped() {
        return this.get("_group") !== undefined;
      }
    }, {
      key: "getAnswerIndex",
      value: function getAnswerIndex() {
        var _this2 = this;

        if (!this.isCorrect()) return -1;
        var groupItems = this.getGroupItems();

        if (groupItems) {
          return groupItems.indexOf(this);
        }

        var idx = -1;

        _.find(this.model.get("_answers"), function (a, i) {
          var isCorrect = _this2.compareVals(_this2.getVal(), a);

          if (isCorrect) idx = i;
          return isCorrect;
        });

        return idx;
      }
    }, {
      key: "getNumber",
      value: function getNumber() {
        var val = this.get("_val");
        if (!val) return 0;
        if (!isNaN(val)) return parseFloat(val);
        Adapt.log.error("inputFieldModel.getNumber(): value \"".concat(val, "\" is not a number. Fallback value of \"0\" used."));
        return 0;
      }
    }, {
      key: "getGroupItems",
      value: function getGroupItems() {
        var group = this.get("_group");
        var groupItems = [this];

        if (group !== undefined) {
          groupItems = this.get("_parent").get("_inputField")._items.filter(function (itemModel) {
            return itemModel.get("_group") === group;
          });
        }

        return groupItems;
      }
    }, {
      key: "compareVals",
      value: function compareVals(val1, val2) {
        var type = this.get("_type");
        var decimals = this.get("_decimals");
        var v1 = this.cleanupUserAnswer(val1);
        var v2 = this.cleanupUserAnswer(val2);

        if (type == "number") {
          if (decimals !== undefined) {
            return v1.toString() == v2.toString();
          }

          var num1 = parseFloat(v1);
          var num2 = parseFloat(v2);
          return num1 == num2;
        }

        return v1 == v2;
      }
    }, {
      key: "checkAnswerInArray",
      value: function checkAnswerInArray(arr, val) {
        var _this3 = this;

        var group = this.get("_group");
        var groupItems = this.getGroupItems();
        var uAnswer = this.cleanupUserAnswer(val);
        var matched = arr.filter(function (cAnswer, idx) {
          return this.compareVals(uAnswer, cAnswer);
        }, this);
        var answerIsCorrect = matched && matched.length > 0;

        if (answerIsCorrect && group !== undefined) {
          var maxCorrect = matched.length;

          _.find(groupItems, function (itemModel) {
            if (itemModel == _this3) return true;

            if (_this3.compareVals(itemModel.getVal(), _this3.getVal())) {
              maxCorrect--;

              if (maxCorrect <= 0) {
                answerIsCorrect = false;
                return true;
              }
            }
          });
        }

        if (answerIsCorrect) this.set('_isCorrect', true);
        return answerIsCorrect;
      }
    }, {
      key: "getCorrectAnswer",
      value: function getCorrectAnswer() {
        var _this4 = this;

        var answers = this.get("_answers");
        var group = this.get("_group");

        if (group === undefined) {
          return answers ? answers[0] : "";
        }

        var groupItems = this.getGroupItems();
        return _.find(answers, function (a) {
          var matchingItem = _.find(groupItems, function (itemModel) {
            if (itemModel === _this4) return false;
            return _this4.compareVals(itemModel.getVal(), a);
          });

          if (!matchingItem) return true;
          groupItems.splice(groupItems.indexOf(matchingItem), 1);
        });
      }
    }, {
      key: "cleanupUserAnswer",
      value: function cleanupUserAnswer(userAnswer) {
        if (this.get('_allowsAnyCase')) {
          userAnswer = userAnswer.toLowerCase();
        }

        if (this.get('_allowsPunctuation')) {
          userAnswer = userAnswer.replace(/[\.,-\/#!$£%\^&\*;:{}=\-_`~()]/g, '');
          userAnswer = userAnswer.replace(/(  +)+/g, ' ');
        }

        return $.trim(userAnswer);
      }
    }]);

    return InputFieldModel;
  }(Backbone.Model);

  var InputFieldModel$1 = __AMD("extensions/adapt-dd-inputField/js/inputFieldModel", InputFieldModel);

  var FN_REGEX = new RegExp(/(\${([\w-]*?)})/g);

  var OutputFieldView = function (_Backbone$View) {
    _inherits(OutputFieldView, _Backbone$View);

    var _super = _createSuper(OutputFieldView);

    function OutputFieldView() {
      _classCallCheck(this, OutputFieldView);

      return _super.apply(this, arguments);
    }

    _createClass(OutputFieldView, [{
      key: "className",
      value: function className() {
        var classes = ["outputfield", this.model.get("_hasError") ? "has-error" : ""];
        return classes.join(" ");
      }
    }, {
      key: "events",
      value: function events() {
        return {};
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpModelData();
        this.render();
        this.setUpEventListeners();
        this.updateResult();
        this.updateValidationState();
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        var fn = this.model.get("fn");

        var allItems = this.model.get("_parent").get("_inputField")._items;

        var names = [];
        fn.replace(FN_REGEX, function (match, $1, $2) {
          names.push($2);
          return match;
        });
        var items = allItems.filter(function (item) {
          return names.indexOf(item.get("_name")) >= 0;
        });
        this.model.set("_inputFields", new Backbone.Collection(items));
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model.get("_inputFields"), {
          "change:_val": this.onInputFieldValChange,
          "change:_isCorrect": this.onInputFieldStateChange
        });
        this.listenTo(this.model, "change:result", this.onResultChange);
        this.listenTo(this.model, "change:_hasError", this.onHasErrorChange);
        this.listenTo(this.model, "change:_isVisited", this.onIsVisitedChange);
      }
    }, {
      key: "onInputFieldValChange",
      value: function onInputFieldValChange(inputFieldModel, val) {
        this.updateResult();
        this.model.set("_isVisited", true);
      }
    }, {
      key: "onIsVisitedChange",
      value: function onIsVisitedChange(model, isVisited) {
        this.$el.toggleClass("is-visited", isVisited);
      }
    }, {
      key: "onInputFieldStateChange",
      value: function onInputFieldStateChange(inputFieldModel) {
        this.updateValidationState();
      }
    }, {
      key: "updateValidationState",
      value: function updateValidationState() {
        var isAnyIncorrect = Boolean(this.model.get("_inputFields").find(function (inputField) {
          return !inputField.get("_isCorrect");
        }));
        this.model.set("_isCorrect", !isAnyIncorrect);
        this.model.set("_isIncorrect", isAnyIncorrect);
        this.$el.toggleClass("is-incorrect", isAnyIncorrect).toggleClass("is-correct", !isAnyIncorrect);
      }
    }, {
      key: "updateResult",
      value: function updateResult() {
        var _this = this;

        var fn = this.model.get("fn");
        var eqn = fn.replace(FN_REGEX, function (match, $1, $2) {
          var inputField = _this.model.get("_inputFields").find(function (inputField) {
            return inputField.get("_name") == $2;
          });

          if (!inputField) throw "OutputFieldView: could not find inputField with name: \"".concat($2, "\"!\n\nfn: ").concat(fn);
          var val = inputField.getNumber();
          return val;
        });
        var result = eval(eqn);

        if (isNaN(result) || !isFinite(result)) {
          this.model.set("result", "N/A");
          this.model.set("_hasError", true);
          return;
        }

        this.model.set("result", result);
        this.model.set("_hasError", false);
      }
    }, {
      key: "onResultChange",
      value: function onResultChange(model, result) {
        var r = result;
        if (!isNaN(r)) r = parseFloat(r.toFixed(this.model.get("decimals") || 0));
        this.$(".js-outputfield-result").html(r);
        this.$(".js-outputfield-content").attr("title", "".concat(this.model.get("prefix") || "").concat(result).concat(this.model.get("suffix") || ""));
      }
    }, {
      key: "onHasErrorChange",
      value: function onHasErrorChange(model, hasError) {
        this.$el.toggleClass("has-error", hasError);
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates['outputField'];
        this.$el.html(template(data));
      }
    }]);

    return OutputFieldView;
  }(Backbone.View);

  var OutputFieldView$1 = __AMD("extensions/adapt-dd-inputField/js/outputFieldView", OutputFieldView);

  var InputFieldController = function (_Backbone$Controller) {
    _inherits(InputFieldController, _Backbone$Controller);

    var _super = _createSuper(InputFieldController);

    function InputFieldController() {
      _classCallCheck(this, InputFieldController);

      return _super.apply(this, arguments);
    }

    _createClass(InputFieldController, [{
      key: "initialize",
      value: function initialize() {
        Adapt.on('router:page', this.setUpHelpers.bind(this));
        this._inputFieldViews = {};
      }
    }, {
      key: "findViewByModelId",
      value: function findViewByModelId(id) {
        return this._inputFieldViews[id];
      }
    }, {
      key: "findViewByEl",
      value: function findViewByEl(el) {
        return this._inputFieldViews[$(el).attr("data-inputfield-id")];
      }
    }, {
      key: "setUpHelpers",
      value: function setUpHelpers() {
        var _Adapt$stickyBlock;

        (_Adapt$stickyBlock = Adapt.stickyBlock) === null || _Adapt$stickyBlock === void 0 ? void 0 : _Adapt$stickyBlock.addResetOnReRender("_inputField");
        var t = this;
        Handlebars.registerHelperEl("inputField", function () {
          var context = arguments[arguments.length - 1];
          var data = Handlebars.getContextHash.apply(this, arguments);
          var componentModel = Handlebars.getComponentModelFromContext(context);
          var name = data.name;

          var id = _.uniqueId("inputfield");

          data.answers = data.answers || data.correct;
          if (data.decimals && isNaN(data.decimals)) throw "{{#inputField}}: \"decimals\" property must be a number (value given: ".concat(decimals, ").");
          var modelJSON = {
            _id: id,
            _parent: componentModel,
            _name: name,
            _group: data.group,
            placeholder: data.content || data.placeholder || "?",
            _type: data.type || "number",
            _answers: Array.isArray(data.answers) ? data.answers : [data.answers],
            _width: data.width,
            _allowsAnyCase: data.allowsAnyCase || false,
            _allowsPunctuation: data.allowsPunctuation || false,
            _decimals: data.decimals || undefined,
            _requireSubmit: false,
            _isHintEnabled: true
          };
          var model = new InputFieldModel$1(modelJSON);

          if (!componentModel.get("_inputField")) {
            componentModel.set("_inputField", {
              _items: new Backbone.Collection(null, {
                model: InputFieldModel$1
              })
            });
          }

          var inputFieldCollection = componentModel.get("_inputField")._items;

          inputFieldCollection.push(model);

          if (name !== undefined) {
            if (inputFieldCollection.filter(function (inputField) {
              return inputField.get("_name") == name;
            }).length > 1) {
              throw "{{#inputField}}: Duplicate names are not allowed (\"".concat(name, "\" name used more than once in block ").concat(componentModel.getParent().get("_id"), ".");
            }
          }

          var view = new InputFieldView$1({
            model: model
          });

          if (t._inputFieldViews[id] === undefined) {
            t._inputFieldViews[id] = view;
          } else {
            Adapt.log.warning("adapt-dd-inputField: duplicate {{#inputField}} detected: ".concat(id));
          }

          return view.$el;
        });
        Handlebars.registerHelperEl("outputField", function () {
          var context = arguments[arguments.length - 1];
          var data = Handlebars.getContextHash.apply(this, arguments);
          if (!data.fn) throw "{{#outputField}}: \"fn\" property must be defined!";
          var componentModel = Handlebars.getComponentModelFromContext(context);
          data = _.extend({
            decimals: 2
          }, data, {
            _parent: componentModel
          });
          data._parent = componentModel;
          var model = new Backbone.Model(data);
          return new OutputFieldView$1({
            model: model
          }).$el;
        });
      }
    }]);

    return InputFieldController;
  }(Backbone.Controller);

  Adapt.inputField = new InputFieldController();

  var OPACITY = 0.1;

  var DDLoadingModel = function (_Backbone$Model) {
    _inherits(DDLoadingModel, _Backbone$Model);

    var _super = _createSuper(DDLoadingModel);

    function DDLoadingModel() {
      _classCallCheck(this, DDLoadingModel);

      return _super.apply(this, arguments);
    }

    _createClass(DDLoadingModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          "_percentLoaded": 0,
          "_hasLoaded": false,
          "_hasError": false,
          "text": ""
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.initHelpers();
        this.set("_componentsReady", 0);
        this.listenTo(Adapt.components, "change:_isReady", this.onComponentReadyChange.bind(this));
        this.listenTo(Adapt, "contentObjectView:postReady", this.onLoaded.bind(this));
      }
    }, {
      key: "initHelpers",
      value: function initHelpers() {
        var helpers = {
          loadingIcon: function () {
            var context = arguments[arguments.length - 1];
            var template = Handlebars.templates['ddLoadingIcon'];
            return template(context.hash);
          }
        };

        for (var name in helpers) {
          if (!helpers.hasOwnProperty(name)) continue;
          Handlebars.registerHelper(name, helpers[name]);
        }
      }
    }, {
      key: "onLoaded",
      value: function onLoaded(contentObjectView) {
        this.set("_hasLoaded", true);
        this.clearText();
      }
    }, {
      key: "onComponentReadyChange",
      value: function onComponentReadyChange(componentModel, _isReady) {
        var componentsReady = [];
        Adapt.components.each(function (componentModel) {
          if (componentModel.get("_isReady")) {
            componentsReady.push(componentModel);
          }
        });
        var percentage = componentsReady.length / Adapt.components.length * 100;
        this.set("_percentLoaded", percentage);

        if (this._debugCommentEl) {
          this._debugCommentEl.remove();

          this._debugCommentEl = null;
        }

        var commentStr = "";
        Adapt.blocks.each(function (blockModel) {
          commentStr += blockModel.get("_id") + " --- ";
          var readyComponentCount = 0;
          var waiting = [];
          blockModel.getChildren().each(function (componentModel) {
            var isReady = componentModel.get("_isReady");
            if (isReady) readyComponentCount++;else waiting.push(componentModel.get("_id"));
          });
          commentStr += "".concat(readyComponentCount, "/").concat(blockModel.getChildren().length).concat(waiting.length ? " [" + waiting.join(", ") + "]" : '', "\n");
        });
        this._debugCommentEl = document.createComment("\nComponents loaded\n-----------------\n".concat(commentStr, "\n"));
        document.body.appendChild(this._debugCommentEl);
      }
    }, {
      key: "setText",
      value: function setText(text) {
        this.set("text", text || "");
      }
    }, {
      key: "showError",
      value: function showError(errorText) {
        $(".js-loading").show();
        var template = Handlebars.templates['ddLoadingErrorText'];
        this.set("text", template({
          text: errorText
        }));
        this.set("_hasError", true);
      }
    }, {
      key: "clearText",
      value: function clearText() {
        this.set("text", "");
      }
    }, {
      key: "show",
      value: function show() {
        $(".js-loading").show();
      }
    }, {
      key: "hide",
      value: function hide() {
        $(".js-loading").hide();
      }
    }]);

    return DDLoadingModel;
  }(Backbone.Model);

  var DDLoadingView = function (_Backbone$View) {
    _inherits(DDLoadingView, _Backbone$View);

    var _super2 = _createSuper(DDLoadingView);

    function DDLoadingView() {
      _classCallCheck(this, DDLoadingView);

      return _super2.apply(this, arguments);
    }

    _createClass(DDLoadingView, [{
      key: "initialize",
      value: function initialize() {
        this.render();
        this.setUpEventListeners();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model, "change:_percentLoaded", this.onPercentLoadedChange.bind(this));
        this.listenTo(this.model, "change:_hasLoaded", this.onHasLoadedChange.bind(this));
        this.listenTo(this.model, "change:_hasError", this.onHasErrorChange.bind(this));
        this.listenTo(this.model, "change:text", this.onTextChange.bind(this));
      }
    }, {
      key: "onHasErrorChange",
      value: function onHasErrorChange(model, hasError) {
        this.$el.toggleClass("has-error", hasError);
      }
    }, {
      key: "onTextChange",
      value: function onTextChange(model, text) {
        this.$(".js-ddloading-text").html(text);
      }
    }, {
      key: "onHasLoadedChange",
      value: function onHasLoadedChange(model, hasLoaded) {
        this.$(".js-ddloading-graphic").toggleClass("is-idle", hasLoaded);
        this.$(".js-ddloading-img").css("opacity", "");
      }
    }, {
      key: "onPercentLoadedChange",
      value: function onPercentLoadedChange(model, percentLoaded) {
        var o = 1 - OPACITY;
        var graphicCount = 16;
        var segment = 100 / graphicCount;
        var idx = Math.floor(percentLoaded / segment);
        var opacity = 1 - o + o * (percentLoaded % segment / segment);
        var $img = this.$(".js-ddloading-img").filter("[data-logo-index=" + idx + "]");
        $img.css("opacity", opacity);

        for (var i = 0; i < idx - 1; i++) {
          this.$(".js-ddloading-img").filter("[data-logo-index=" + i + "]").css("opacity", 1);
        }

        this.$(".js-ddloading-percent").html(Math.floor(percentLoaded) + "%");
      }
    }, {
      key: "render",
      value: function render() {}
    }]);

    return DDLoadingView;
  }(Backbone.View);

  Adapt.on("router:page", function () {
    var $loading = $(".js-loading").first();
    $loading.addClass("ddloading");
    var model = new DDLoadingModel();
    new DDLoadingView({
      model: model,
      el: $loading[0]
    });
    Adapt.ddLoading = model;
  });

  Adapt.on("notify:opened", function (notifyView) {
    notifyView.$(".js-notify-bg").on("click", function (event) {
      if (event.target != event.currentTarget) return;
      Adapt.trigger('notify:close');
    });
  });

  function getUrlVars() {
    var vars = {};
    window.location.href.replace(/[?&]+([^=&]+)=([^&#]*)/gi, function (m, key, value) {
      vars[key] = value;
    });
    return vars;
  }
  var CLASSNAME_PREFIX = "mode-";
  Adapt.on("app:dataLoaded", function (test) {
    var url = window.location.href;
    var DEBUG_FORCED = url.indexOf("proofingsite.didaskogroup.com") >= 0;
    var DEBUG_DISABLED = getUrlVars().debug === "false";
    var PAGEMODE_ENABLED = url.indexOf("localhost") >= 0 || DEBUG_FORCED;
    if (DEBUG_DISABLED) PAGEMODE_ENABLED = false;
    var config = getCourseConfig();
    debugIsolateBlock();
    disablePageNavigation();

    if (PAGEMODE_ENABLED) {
      if (DEBUG_FORCED) config._mode = "debug";

      if (config._mode) {
        $("html").addClass(CLASSNAME_PREFIX + config._mode);
        Adapt.log.info("Page mode set to: " + config._mode);

        if (config._mode == "debug") {
            setUpDebugMode();
            return;
          }
      }

      _.each(Adapt.blocks.models, function (e, i) {
        e.set("_mode", undefined);
      });
    }
  });

  function disablePageNavigation() {
    var url = getUrlVars();
    if (url.navigationEnabled !== "false") return;
    $("html").addClass("navigation-hidden");
    $("body").append("<style>[role='navigation'],.sidemenu{display: none;}.component__container{margin-left: 0;}#app{border-top: 0;}.page::after{content: none;}");
  }

  function debugIsolateBlock() {
    var url = getUrlVars();
    if (url.block === undefined) return;
    var blocksPlus = url.block[url.block.length - 1] == "+";
    if (blocksPlus) url.block = url.block.slice(0, -1);
    var blockNums = url.block.split(",");

    if (blocksPlus) {
      var found = false;

      _.each(Adapt.blocks.models, function (block) {
        var blockId = block.get("_id");

        if (found) {
          blockNums.push(blockId.substr(2));
          return;
        }

        if (blockId == "b-" + blockNums[blockNums.length - 1]) {
          found = true;
          return;
        }
      });
    }

    var disabledBlocks = [];

    _.each(Adapt.articles.models, function (article) {
      article.set("_isAvailable", false);
    });

    _.each(Adapt.blocks.models, function (block) {
      block.get("_id");

      if (!block.get("_isAvailable")) {
        disabledBlocks.push(block);
      }

      block.set("_isAvailable", false);
    });

    var isolatedBlocks = [];

    _.each(blockNums, function (blockNum, sortIndex) {
      var block = _.find(Adapt.blocks.models, function (block) {
        var blockId = block.get("_id");

        if (blockId == "b-" + blockNum) {
          if (_.includes(disabledBlocks, block)) {
            throw "Block " + blockId + " has been manually removed (its \"_isAvailable\" property is set to false) and cannot be isolated.";
          }

          block.set("_isAvailable", true);
          block.set("_pageModeSortIndex", sortIndex);
          block.getParent().set("_isAvailable", true);
          return true;
        }
      });

      if (!block) {
        throw "Could not find block \"b-" + url.block + "\" to isolate. Change/remove the block parameter in the URL and try again.";
      }

      isolatedBlocks.push(block);
    });

    if (isolatedBlocks.length && !_.includes(isolatedBlocks, Adapt.blocks.first())) {
      Adapt.on("router:page", function (pageModel) {
        pageModel.get("_didasko")._pageHeader._isEnabled = false;
      });
    }

    _.each(Adapt.articles.models, function (article) {
      if (!article.get("_isAvailable")) return;

      article.getChildren().comparator = function (model) {
        return model.get("_pageModeSortIndex");
      };

      article.getChildren().sort();
    });
  }

  Adapt.on("pageView:ready", function (pageView) {
    return;
  });

  function getCourseConfig() {
    return Adapt.course.get('_pageMode') || {
      _mode: "debug"
    };
  }

  function setUpDebugMode() {
    getUrlVars();
    if (!Adapt.debug) Adapt.debug = {};
    Adapt.debug._isEnabled = true;

    Adapt.on("blockView:postRender", onDebugBlockViewPostRender);
    setTimeout(function () {
      var $debugBtn = $("<button class='debug__toggle'>D</button>");
      $('.nav__inner').append($debugBtn);
      $debugBtn.on("click", function () {
        $("html").toggleClass(CLASSNAME_PREFIX + "debug");
      });
    }, 250);
  }

  function onDebugBlockViewPostRender(view) {
    var blockId = view.model.get("_id");
    var $blockId = $("<div class='debug-block-id'>" + blockId + "</div>");
    view.$el.append($blockId);
    $blockId.on("click", function () {
      $.ajax({
        dataType: "text",
        url: "course/en/components.jsonsynt",
        cache: true,
        success: function (data) {
          getComponentJSONSYNT(blockId, data);
        },
        fail: function () {
          alert("Could not load .jsonsynt preview.");
        }
      });
    });
  }

  function getComponentJSONSYNT(blockId, data) {
    data.split("\n");
  }

  var QuestionPlusMultiModel = function (_Backbone$Model) {
    _inherits(QuestionPlusMultiModel, _Backbone$Model);

    var _super = _createSuper(QuestionPlusMultiModel);

    function QuestionPlusMultiModel() {
      _classCallCheck(this, QuestionPlusMultiModel);

      return _super.apply(this, arguments);
    }

    _createClass(QuestionPlusMultiModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          "_parent": undefined,
          "_children": undefined
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.hideQuestionRows();
        this.get("_children").each(function (model, i) {
          if (i == 0) return;
          model.set("_hasDivider", true);
        });
        this.listenTo(this.get("_parent").get("_children"), "change:_isComplete", this.onQuestionComponentComplete);
      }
    }, {
      key: "hideQuestionRows",
      value: function hideQuestionRows() {
        var crVisible = true;

        _.each(this.get("_children").models, function (componentRow, i) {
          if (crVisible && !componentRow.get("_isComplete")) {
            crVisible = false;
            return;
          }

          componentRow.set("_isVisible", crVisible);
        });
      }
    }, {
      key: "onQuestionComponentComplete",
      value: function onQuestionComponentComplete(model, _isComplete) {
        if (!_isComplete) return;
        var nextIncompleteComponent = this.showNextQuestionComponent();
        if (!nextIncompleteComponent) return;
        this.listenToOnce(Adapt, "notify:closed", function () {
          _.debounce(function () {
            Adapt.navigateToElement("." + nextIncompleteComponent.get("_id"), {
              duration: 400
            });
          })();
        });
      }
    }, {
      key: "showNextQuestionComponent",
      value: function showNextQuestionComponent() {
        var nextIncompleteComponent = _.find(this.get("_parent").getChildren().models, function (component) {
          if (!component.get("_isComplete")) return true;
        });

        if (!nextIncompleteComponent) return undefined;
        nextIncompleteComponent.get("_componentRow").set("_isVisible", true);
        return nextIncompleteComponent;
      }
    }]);

    return QuestionPlusMultiModel;
  }(Backbone.Model);
  var QuestionPlusMultiModel$1 = __AMD("extensions/adapt-dd-questionPlus/js/questionPlusMultiModel", QuestionPlusMultiModel);

  function _fixString(val) {
    if (!val) return "";
    if (typeof val === "string") return val.trim();
    return val;
  }

  var QuestionPlus = function (_Backbone$Controller) {
    _inherits(QuestionPlus, _Backbone$Controller);

    var _super = _createSuper(QuestionPlus);

    function QuestionPlus() {
      _classCallCheck(this, QuestionPlus);

      return _super.apply(this, arguments);
    }

    _createClass(QuestionPlus, [{
      key: "initialize",
      value: function initialize() {
        Adapt.on({
          'app:dataReady': this.onDataReady.bind(this)
        });
      }
    }, {
      key: "onDataReady",
      value: function onDataReady() {
        this._onDataReady();

        Adapt.on("blockView:preRender", this.onBlockViewPrerender.bind(this));
        Adapt.on("blockView:postRender", this.onBlockViewPostRender.bind(this));
        Adapt.on("componentView:postRender", this.onComponentViewPostRender.bind(this));
        Adapt.on("questionView:showFeedback", this.onQuestionViewShowFeedback.bind(this));
      }
    }, {
      key: "onBlockViewPrerender",
      value: function onBlockViewPrerender(blockView) {
        var questionRowCount = 0;
        var questionRows = [];

        _.each(blockView.model.get("_componentRow").get("_children").models, function (componentRow) {
          if (componentRow.get("_isQuestionType")) {
            questionRowCount++;
            questionRows.push(componentRow);
          }
        });

        if (questionRowCount == 0) return;
        blockView.model.set("_isQuestionType", true);
        blockView.model.getChildren().first().set("_componentLogo", {
          src: "assets/questionplus-logo.svg"
        });

        if (questionRowCount > 1) {
          blockView.model.set("_questionPlusMulti", new QuestionPlusMultiModel$1({
            _parent: blockView.model,
            _children: new Backbone.Collection(questionRows)
          }));
        }

        blockView.model.set("_classes", blockView.model.get("_classes") + " is-question");
        blockView.$el.addClass("is-question");
      }
    }, {
      key: "_onDataReady",
      value: function _onDataReady() {
        Adapt.components.each(function (componentModel) {
          if (!componentModel.get("_isQuestionType")) return;
          componentModel.set("_canShowModelAnswer", false);
          componentModel.set("_attempts", 999);

          {
            _.debounce(function () {
              componentModel.reset(true, true);
            })();
          }

          var block = componentModel.getParent();
          block.set("_isQuestionType", true);
        });
      }
    }, {
      key: "onBlockViewPostRender",
      value: function onBlockViewPostRender(blockView) {
        blockView.$el.toggleClass("is-question", Boolean(blockView.model.get("_isQuestionType")));
      }
    }, {
      key: "onComponentViewPreRender",
      value: function onComponentViewPreRender(componentView) {
        var componentModel = componentView.model;
        if (!componentModel.get("_isQuestionType")) return;
        componentModel.reset(true, true);
      }
    }, {
      key: "onComponentViewPostRender",
      value: function onComponentViewPostRender(componentView) {
        var componentModel = componentView.model;
        if (!componentModel.get("_isQuestionType")) return;
        if (componentModel.get("_isQuestionPlus")) return;
        componentModel.set("_isQuestionPlus", true);
        componentView.$el.addClass("is-questionplus");

        componentModel.setQuestionAsSubmitted = function () {
          var isCorrect = componentModel.isCorrect();
          componentModel.set({
            _isEnabled: !isCorrect,
            _isSubmitted: isCorrect
          });
        };

        componentModel.updateAttempts = function () {
          this.set('_attemptsLeft', 999);
        };

        this.setUpFeedback(componentModel);
        var _onSubmitClicked = componentView.onSubmitClicked;

        if (!_onSubmitClicked.prototype._questionPlusOverride) {
          componentView.onSubmitClicked = function () {
            _onSubmitClicked.apply(componentView, arguments);

            this.$('.component__widget').addClass('show-user-answer');
          };

          componentView.onSubmitClicked.prototype._questionPlusOverride = true;
        }

        var buttonsView = componentView.buttonsView;
        var _onFeedbackMessageChanged = buttonsView.onFeedbackMessageChanged;

        if (!_onFeedbackMessageChanged.prototype._questionPlusOverride) {
          buttonsView.onFeedbackMessageChanged = function () {
            var canShowFeedback = buttonsView.model.get('_canShowFeedback');
            Adapt.a11y.toggleAccessibleEnabled(buttonsView.$('.js-btn-feedback'), canShowFeedback);
            buttonsView.$('.js-btn-feedback').prop("disabled", !canShowFeedback);
          };

          buttonsView.onFeedbackMessageChanged.prototype._questionPlusOverride = true;
        }

        buttonsView.stopListening(buttonsView.model, 'change:feedbackMessage');
        buttonsView.listenTo(buttonsView.model, 'change:feedbackMessage', buttonsView.onFeedbackMessageChanged);
      }
    }, {
      key: "setUpFeedback",
      value: function setUpFeedback(questionModel) {
        var _getFeedbackTitle = questionModel.getFeedbackTitle;

        var _default = Adapt.course.get("_feedback");

        if (!_default) throw "\"course._feedback\" must be defined for un-set component._feedback titles to fall back on.";

        if (!_getFeedbackTitle.prototype._questionPlusOverride) {
          questionModel.getFeedbackTitle = function () {
            var _feedback = questionModel.get("_feedback");

            if (Boolean(questionModel.get("_isCorrect"))) {
              if (!_feedback._correct) return _getFeedbackTitle.apply(questionModel, arguments);
              return _feedback._correct.title || _default._correct.title || _getFeedbackTitle.apply(questionModel, arguments);
            }

            if (Boolean(questionModel.get("_isAtLeastOneCorrectSelection"))) {
              if (!_feedback._partlyCorrect) return _getFeedbackTitle.apply(questionModel, arguments);
              return _feedback._partlyCorrect.title || _default._partlyCorrect.title || _getFeedbackTitle.apply(questionModel, arguments);
            }

            if (!_feedback._incorrect) return _getFeedbackTitle.apply(questionModel, arguments);
            return _feedback._incorrect.title || _default._incorrect.title || _getFeedbackTitle.apply(questionModel, arguments);
          };

          questionModel.getFeedbackTitle.prototype._questionPlusOverride = true;
        }

        var _feedback = questionModel.get("_feedback");

        var formatMessage = function (body, instruction) {
          return Handlebars.templates["questionPlusFeedbackBody"]({
            body: body,
            instruction: instruction
          });
        };

        _feedback = _.extend({}, _feedback, {
          correct: formatMessage((_fixString(_feedback._correct) ? _fixString(_feedback._correct.body) : "") || ""),
          _incorrect: _.extend({}, _feedback._incorrect, {
            final: formatMessage(_fixString(_feedback._incorrect.body) || "", _fixString(_feedback._incorrect.instruction) || _fixString(_default._incorrect.instruction) || "")
          }),
          _partlyCorrect: _.extend({}, _feedback._partlyCorrect, {
            final: formatMessage(_fixString(_feedback._partlyCorrect.body) || _fixString(_feedback._incorrect.body) || "", _fixString(_feedback._partlyCorrect.instruction) || _fixString(_feedback._incorrect.instruction) || _fixString(_default._partlyCorrect.instruction) || "")
          })
        });
        questionModel.set("_feedback", _feedback);
      }
    }, {
      key: "onQuestionViewShowFeedback",
      value: function onQuestionViewShowFeedback(questionView) {

        if (questionView.updateMarking) questionView.updateMarking();
        if (questionView.model.get("_isComplete")) return;
        this.listenToOnce(Adapt, {
          'notify:closed': function () {
            _.debounce(function () {
              Adapt.navigateToElement(questionView.$(".component__instruction"), {
                align: 'inview'
              });
            }, 500)();

            return;
          }
        });
      }
    }]);

    return QuestionPlus;
  }(Backbone.Controller);

  var questionPlus = new QuestionPlus();
  Adapt.questionPlus = questionPlus;

  var SideMenuCategoryModel = function (_Backbone$Model) {
    _inherits(SideMenuCategoryModel, _Backbone$Model);

    var _super = _createSuper(SideMenuCategoryModel);

    function SideMenuCategoryModel() {
      _classCallCheck(this, SideMenuCategoryModel);

      return _super.apply(this, arguments);
    }

    _createClass(SideMenuCategoryModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          title: "UNDEFINED",
          type: "UNDEFINED",
          _items: undefined,
          _isActive: false
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {}
    }, {
      key: "toggle",
      value: function toggle() {
        this.set("_isActive", !this.get("_isActive"));
      }
    }]);

    return SideMenuCategoryModel;
  }(Backbone.Model);
  var SideMenuCategoryModel$1 = __AMD("extensions/adapt-dd-sideMenu/js/SideMenuCategoryModel", SideMenuCategoryModel);

  var SideMenuCategoryCollection = function (_Backbone$Collection) {
    _inherits(SideMenuCategoryCollection, _Backbone$Collection);

    var _super = _createSuper(SideMenuCategoryCollection);

    function SideMenuCategoryCollection() {
      _classCallCheck(this, SideMenuCategoryCollection);

      return _super.apply(this, arguments);
    }

    _createClass(SideMenuCategoryCollection, [{
      key: "initialize",
      value: function initialize(models, options) {
        this.listenTo(Adapt, 'remove', this.reset);
        if (!options || !options.pageModel) return;
        this._pageModel = options.pageModel;
        this.repopulate();
      }
    }, {
      key: "repopulate",
      value: function repopulate() {
        var _this = this;

        this.reset();
        if (!this._pageModel) return;

        var menuData = this._pageModel.get("_menuData");

        var m = new SideMenuCategoryModel$1({
          title: "Content",
          _type: "nav",
          _items: Adapt.blocks
        });
        this.add(m);

        _.each(menuData, function (cat, name) {
          var models = [];

          _.each(cat._items, function (item) {
            models.push(new Backbone.Model(item));
          });

          var m = new SideMenuCategoryModel$1({
            title: cat.title,
            _type: cat.title.toLowerCase(),
            _items: new Backbone.Collection(models)
          });

          _this.add(m);
        });
      }
    }]);

    return SideMenuCategoryCollection;
  }(Backbone.Collection);

  var SideMenuCategoryCollection$1 = __AMD("extensions/adapt-dd-sideMenu/js/SideMenuCategoryCollection", SideMenuCategoryCollection);

  var SideMenuModel = function (_Backbone$Model) {
    _inherits(SideMenuModel, _Backbone$Model);

    var _super = _createSuper(SideMenuModel);

    function SideMenuModel() {
      _classCallCheck(this, SideMenuModel);

      return _super.apply(this, arguments);
    }

    _createClass(SideMenuModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          title: "",
          _pageModel: undefined,
          _categories: undefined,
          _isActive: false
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.set("title", this.get("_pageModel").get("title"));
      }
    }, {
      key: "toggle",
      value: function toggle() {
        this.set("_isActive", !this.get("_isActive"));
      }
    }]);

    return SideMenuModel;
  }(Backbone.Model);
  var SideMenuModel$1 = __AMD("extensions/adapt-dd-sideMenu/js/SideMenuModel", SideMenuModel);

  var SideMenuCategoryContentView = function (_Backbone$View) {
    _inherits(SideMenuCategoryContentView, _Backbone$View);

    var _super = _createSuper(SideMenuCategoryContentView);

    function SideMenuCategoryContentView() {
      _classCallCheck(this, SideMenuCategoryContentView);

      return _super.apply(this, arguments);
    }

    _createClass(SideMenuCategoryContentView, [{
      key: "className",
      value: function className() {
        return "smcategory smcategory-type-" + this.model.get("_type");
      }
    }, {
      key: "init",
      value: function init() {}
    }, {
      key: "initialize",
      value: function initialize() {
        this.init();
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates[this.constructor.template];
        var data = {
          title: this.model.get("title"),
          _type: this.model.get("_type"),
          _items: this.model.get("_items").toJSON()
        };
        this.$el.html(template(data));
      }
    }]);

    return SideMenuCategoryContentView;
  }(Backbone.View);
  SideMenuCategoryContentView.template = 'sideMenuCategory';
  var SideMenuCategoryView = __AMD("extensions/adapt-dd-sideMenu/js/SideMenuCategoryView", SideMenuCategoryContentView);

  var SideMenuCategoryNavView = function (_SideMenuCategoryView) {
    _inherits(SideMenuCategoryNavView, _SideMenuCategoryView);

    var _super = _createSuper(SideMenuCategoryNavView);

    function SideMenuCategoryNavView() {
      _classCallCheck(this, SideMenuCategoryNavView);

      return _super.apply(this, arguments);
    }

    _createClass(SideMenuCategoryNavView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-nav-item-btn-click': 'scrollToPageElement'
        };
      }
    }, {
      key: "init",
      value: function init() {
        this.setUpModelData();
        this.setUpEventListeners();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(Adapt.blocks, "change:_isComplete", this.onBlockCompleteChange);
        this.listenTo(Adapt.blocks, "change:_isInview", this.onBlockInviewChange);
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        _.each(this.model.get("_items").models, function (block) {
          if (!block.get("_sideMenu")) block.set("_sideMenu", {});
          var title = "";

          _.find(block.getChildren().models, function (component) {
            title = component.get("title");
            if (title) return true;
          });

          if (!title) throw "Block " + block.get("_id") + " doesn't have any child components with a defined title.";
          block.get("_sideMenu").title = title;
        });
      }
    }, {
      key: "onBlockCompleteChange",
      value: function onBlockCompleteChange(blockModel, isComplete) {
        this.$(".js-nav-item-btn-click[data-id='" + blockModel.get("_id") + "']").toggleClass("is-complete", isComplete);
      }
    }, {
      key: "onBlockInviewChange",
      value: function onBlockInviewChange(blockModel, isInview) {
        this.$(".js-nav-item-btn-click[data-id='" + blockModel.get("_id") + "']").toggleClass("is-inview", isInview);
      }
    }, {
      key: "scrollToPageElement",
      value: function () {
        var _scrollToPageElement = _asyncToGenerator(regeneratorRuntime.mark(function _callee(event) {
          var $target, id, model, currentComponentSelector, $shadow;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (event && event.cancelable && event.preventDefault) event.preventDefault();
                  $target = $(event.currentTarget);

                  if (!$target.is('.is-disabled')) {
                    _context.next = 4;
                    break;
                  }

                  return _context.abrupt("return");

                case 4:
                  id = $target.attr('data-id');
                  model = Adapt.findById(id);
                  model.trigger("blockView:navigate", model);

                  if (model.get('_isRendered')) {
                    _context.next = 16;
                    break;
                  }

                  _context.prev = 8;
                  _context.next = 11;
                  return Adapt.parentView.renderTo(id);

                case 11:
                  _context.next = 16;
                  break;

                case 13:
                  _context.prev = 13;
                  _context.t0 = _context["catch"](8);
                  return _context.abrupt("return");

                case 16:
                  currentComponentSelector = '.' + id;
                  Adapt.navigateToElement(currentComponentSelector, {
                    duration: 400
                  });
                  $shadow = $(".sidemenu__shadow.js-sidemenu-shadow-click");

                  if (parseFloat($shadow.css("opacity"))) {
                    Adapt.sideMenu.toggle();
                  }

                case 20:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[8, 13]]);
        }));

        function scrollToPageElement(_x) {
          return _scrollToPageElement.apply(this, arguments);
        }

        return scrollToPageElement;
      }()
    }]);

    return SideMenuCategoryNavView;
  }(SideMenuCategoryView);
  SideMenuCategoryNavView.template = 'sideMenuCategoryNav';
  var SideMenuCategoryNavView$1 = __AMD("extensions/adapt-dd-sideMenu/js/SideMenuCategoryNavView", SideMenuCategoryNavView);

  var SideMenuCategoryResourcesView = function (_Backbone$View) {
    _inherits(SideMenuCategoryResourcesView, _Backbone$View);

    var _super = _createSuper(SideMenuCategoryResourcesView);

    function SideMenuCategoryResourcesView() {
      _classCallCheck(this, SideMenuCategoryResourcesView);

      return _super.apply(this, arguments);
    }

    _createClass(SideMenuCategoryResourcesView, [{
      key: "className",
      value: function className() {
        return "smcategory smcategory-type-" + this.model.get("_type");
      }
    }, {
      key: "init",
      value: function init() {}
    }, {
      key: "initialize",
      value: function initialize() {
        this.init();
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates[this.constructor.template];
        var pdfDownloadName = Adapt.course.get("title") + " - " + this.model.get("_parent").get("title") + ".pdf";

        var resources = this.model.get("_parent").get("_pageModel").get("_menuData")._resources;

        var data = {
          _type: this.model.get("_type"),
          _pdfDownloadName: pdfDownloadName,
          _isPDFEnabled: resources._isPDFEnabled,
          _items: resources._items || []
        };
        this.$el.html(template(data));
      }
    }]);

    return SideMenuCategoryResourcesView;
  }(Backbone.View);
  SideMenuCategoryResourcesView.template = 'sideMenuCategoryResources';
  var SideMenuCategoryResourcesView$1 = __AMD("extensions/adapt-dd-sideMenu/js/SideMenuCategoryResourcesView", SideMenuCategoryResourcesView);

  var SideMenuCategoryCreditsView = function (_Backbone$View) {
    _inherits(SideMenuCategoryCreditsView, _Backbone$View);

    var _super = _createSuper(SideMenuCategoryCreditsView);

    function SideMenuCategoryCreditsView() {
      _classCallCheck(this, SideMenuCategoryCreditsView);

      return _super.apply(this, arguments);
    }

    _createClass(SideMenuCategoryCreditsView, [{
      key: "className",
      value: function className() {
        return "smcategory smcategory-type-" + this.model.get("_type");
      }
    }, {
      key: "init",
      value: function init() {}
    }, {
      key: "initialize",
      value: function initialize() {
        this.init();
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates[this.constructor.template];
        var data = {
          _type: this.model.get("_type"),
          _items: this.model.get("_items").toJSON(),
          copyright: this.getDDCopyrightHtml()
        };
        this.$el.html(template(data));
      }
    }, {
      key: "getDDCopyrightHtml",
      value: function getDDCopyrightHtml() {
        var year = new Date().getFullYear();
        return "&#169; ".concat(year, " Didasko Digital. All Rights Reserved.");
      }
    }]);

    return SideMenuCategoryCreditsView;
  }(Backbone.View);
  SideMenuCategoryCreditsView.template = 'sideMenuCategoryCredits';
  var SideMenuCategoryCreditsView$1 = __AMD("extensions/adapt-dd-sideMenu/js/SideMenuCategoryCreditsView", SideMenuCategoryCreditsView);

  var helpers$3 = {
    category_is_type: function (category, type, block) {
      var isType = category._type.toLowerCase() == type.toLowerCase();
      return isType ? block.fn(this) : block.inverse(this);
    }
  };

  for (var name$3 in helpers$3) {
    if (helpers$3.hasOwnProperty(name$3)) {
      Handlebars__default['default'].registerHelper(name$3, helpers$3[name$3]);
    }
  }

  var SideMenuView = function (_Backbone$View) {
    _inherits(SideMenuView, _Backbone$View);

    var _super = _createSuper(SideMenuView);

    function SideMenuView() {
      _classCallCheck(this, SideMenuView);

      return _super.apply(this, arguments);
    }

    _createClass(SideMenuView, [{
      key: "className",
      value: function className() {
        return "sidemenu";
      }
    }, {
      key: "events",
      value: function events() {
        return {
          "click .sidemenu__btn": "onCloseBtnClick",
          "click .js-sidemenu-shadow-click": "onCloseBtnClick",
          "click .js-toggle-accordion-item": "onAccordionItemClick",
          "click .js-sidemenu-drawer-btn": "onMenuBtnClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _this = this;

        this.setupEventListeners();
        this.render();

        _.debounce(function () {
          _this.model.get("_categories").models[0].set("_isActive", true);
        })();
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates['sideMenu'];
        this.$el.html(template(_.extend(this.model.get("_categories").toJSON(), {
          title: this.model.get("title")
        })));
        this.renderCategories();
        this.$('.sidemenu__btn-container').html(Handlebars.templates['sideMenuBtn']());
      }
    }, {
      key: "onMenuBtnClick",
      value: function onMenuBtnClick(event) {
        this.model.toggle();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(this.model, "change:_isActive", this.onIsActiveChange);
        this.listenTo(Adapt, "device:resize", this.onDeviceResize);
        this.listenTo(this.model.get("_categories"), {
          "change:_isActive": this.onAccordionItemActiveChange
        });
      }
    }, {
      key: "onShadowTouchstart",
      value: function onShadowTouchstart(event) {
        event.preventDefault();
      }
    }, {
      key: "onDeviceResize",
      value: function onDeviceResize() {
        this.updateAccordion();
        this.updateScrollEnabled();
      }
    }, {
      key: "onIsActiveChange",
      value: function onIsActiveChange(model, _isActive) {
        this.$el.toggleClass("is-active", _isActive);
        $("#wrapper").toggleClass("is-sidemenu-active", _isActive);
        $(".js-sidemenu-drawer-btn").toggleClass("is-burger", !_isActive).toggleClass("is-cross", _isActive);
        this.updateScrollEnabled();

        if (_isActive) {
          this.focus();
        } else {
          this.unfocus();
        }
      }
    }, {
      key: "focus",
      value: function focus() {
        this.$previousActiveElement = $(document.activeElement);
        $.inview();
        Adapt.a11y.popupOpened(this.$el);
        Adapt.a11y.scrollDisable('body');
        $('html').addClass('notify');
        Adapt.a11y.focusFirst(this.$(".sidemenu__menu"), {
          defer: false
        });
      }
    }, {
      key: "unfocus",
      value: function unfocus() {
        Adapt.a11y.scrollEnable('body');
        $('html').removeClass('notify');
        Adapt.a11y.popupClosed(this.$previousActiveElement);
      }
    }, {
      key: "updateScrollEnabled",
      value: function updateScrollEnabled() {
        var _this2 = this;

        var _isActive = this.model.get("_isActive");

        if (_isActive) {
          _.debounce(function () {
            if (_this2.$(".js-sidemenu-shadow-click").css("opacity") > 0) {
              Adapt.a11y.scrollDisable('body');
            }
          }, 50)();
        } else {
          Adapt.a11y.scrollEnable('body');
        }
      }
    }, {
      key: "onAccordionItemClick",
      value: function onAccordionItemClick(event) {
        var index = $(event.currentTarget).data("index");
        var item = this.model.get("_categories").models[index];

        var _isActive = item.get("_isActive");

        if (_isActive) return;

        _.each(this.model.get("_categories").models, function (model) {
          model.set("_isActive", false);
        });

        item.set("_isActive", true);
      }
    }, {
      key: "onAccordionItemActiveChange",
      value: function onAccordionItemActiveChange(model, isActive) {
        if (!isActive) return;
        var $btns = this.$(".sidemenu__accordion-item-btn");
        var $items = this.$(".sidemenu__accordion-item-content");
        $btns.toggleClass("is-active", false);
        $items.toggleClass("is-active", false);
        var index = this.model.get("_categories").indexOf(model);
        var $item = $items.filter("[data-index=" + index + "]").toggleClass("is-active", true);
        $btns.filter("[data-index=" + index + "]").toggleClass("is-active", true);
        var $accordion = this.$(".sidemenu__accordion");
        var accordionHeight = $accordion.height();
        var itemHeight = accordionHeight - $btns.outerHeight() * this.model.get("_categories").models.length;
        $items.each(function (i, e) {
          $(e).css("height", "");
          $(e).css("max-height", $(e).height());
        });
        $items.hide(0).show(0).css("max-height", 0);
        $item.css("max-height", itemHeight);
        $item.one('transitionend', function () {
          var $activeItem = $items.filter(".is-active");
          $activeItem.css({
            "max-height": "none",
            "height": $activeItem.height()
          });
          $items.filter(":not(.is-active)").hide(0);
        });
      }
    }, {
      key: "updateAccordion",
      value: function updateAccordion() {
        var $item = this.$(".sidemenu__accordion-item-content").filter(".is-active");
        $item.css("height", "").css("height", $item.height());
      }
    }, {
      key: "renderCategories",
      value: function renderCategories() {
        var _this3 = this;

        var parentModel = this.model;
        this.model.get("_categories").each(function (model, idx) {
          var view = undefined;
          model.set("_parent", parentModel);

          switch (model.get("_type")) {
            case "nav":
              view = new SideMenuCategoryNavView$1({
                model: model
              });
              break;

            case "resources":
              view = new SideMenuCategoryResourcesView$1({
                model: model
              });
              break;

            case "authors":
              Adapt.log.error("SideMenuView:\n the contentObjects \"_authors\" property is no longer being used. Please remove it and replace it with \"_credits\".");
              view = new SideMenuCategoryView({
                model: model
              });
              break;

            case "credits":
              view = new SideMenuCategoryCreditsView$1({
                model: model
              });
              break;

            case "references":
              model.get("_items").comparator = function (model) {
                return model.get("body").toLowerCase();
              };

              model.get("_items").sort();
              view = new SideMenuCategoryView({
                model: model
              });
              break;

            case "glossaries":
              model.get("_items").comparator = function (model) {
                return model.get("title").toLowerCase();
              };

              model.get("_items").sort();
              view = new SideMenuCategoryView({
                model: model
              });
              break;

            default:
              view = new SideMenuCategoryView({
                model: model
              });
          }

          _this3.$(".sidemenu__accordion-item-content").filter("[data-index=" + idx + "]").html(view.$el);
        });
        return;
      }
    }, {
      key: "onCloseBtnClick",
      value: function onCloseBtnClick(event) {
        this.model.toggle();
      }
    }]);

    return SideMenuView;
  }(Backbone.View);
  var SideMenuView$1 = __AMD("extensions/adapt-dd-sideMenu/js/SideMenuView", SideMenuView);

  var SideMenu = function (_Backbone$Controller) {
    _inherits(SideMenu, _Backbone$Controller);

    var _super = _createSuper(SideMenu);

    function SideMenu() {
      _classCallCheck(this, SideMenu);

      return _super.apply(this, arguments);
    }

    _createClass(SideMenu, [{
      key: "initialize",
      value: function initialize() {
        Adapt.on({
          'app:dataReady': this.onDataReady.bind(this)
        });
      }
    }, {
      key: "onDataReady",
      value: function onDataReady() {
        this.setUpEventListeners();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(Adapt, {
          'router:page': this.renderSideMenuBtn
        });
      }
    }, {
      key: "renderSideMenuBtn",
      value: function renderSideMenuBtn(pageModel) {
        var categoryCollection = new SideMenuCategoryCollection$1(null, {
          pageModel: pageModel
        });
        var sideMenuModel = new SideMenuModel$1({
          "_pageModel": pageModel,
          "_categories": categoryCollection
        });
        var sideMenuView = new SideMenuView$1({
          model: sideMenuModel
        });
        this.sideMenuModel = sideMenuModel;
        $(".drawer").first().after(sideMenuView.$el);
      }
    }, {
      key: "toggle",
      value: function toggle() {
        this.sideMenuModel.toggle();
      }
    }]);

    return SideMenu;
  }(Backbone.Controller);

  Adapt.sideMenu = new SideMenu();

  var SideNavCollection = function (_Backbone$Collection) {
    _inherits(SideNavCollection, _Backbone$Collection);

    var _super = _createSuper(SideNavCollection);

    function SideNavCollection() {
      _classCallCheck(this, SideNavCollection);

      return _super.apply(this, arguments);
    }

    _createClass(SideNavCollection, [{
      key: "initialize",
      value: function initialize(models, options) {
        this.listenTo(Adapt, 'remove', this.reset);
        if (!options || !options.pageModel) return;
        this._pageModel = options.pageModel;
        this.repopulate();
      }
    }, {
      key: "repopulate",
      value: function repopulate() {
        this.reset();
        if (!this._pageModel) return;

        var allDescendants = this._pageModel.getAllDescendantModels(true);

        var allProgressItems = allDescendants.filter(function (item) {
          if (item.get("_type") != "block") return false;
          return Boolean(item.get("_isEnabled"));
        });
        this.add(allProgressItems);
      }
    }]);

    return SideNavCollection;
  }(Backbone.Collection);

  var SideNavCollection$1 = __AMD("extensions/adapt-dd-sideNav/js/SideNavCollection", SideNavCollection);

  var SideNavProgressView = function (_Backbone$View) {
    _inherits(SideNavProgressView, _Backbone$View);

    var _super = _createSuper(SideNavProgressView);

    function SideNavProgressView() {
      _classCallCheck(this, SideNavProgressView);

      return _super.apply(this, arguments);
    }

    _createClass(SideNavProgressView, [{
      key: "className",
      value: function className() {
        return "sidenav__progress";
      }
    }, {
      key: "events",
      value: function events() {
        return {
          "click": "onClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setupEventListeners();
        this.render();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(Adapt.blocks, 'change:_isComplete', this.onBlockCompletionChange);
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates['sideNavProgress'];
        this.$el.html(template());
      }
    }, {
      key: "onBlockCompletionChange",
      value: function onBlockCompletionChange() {
        var completionPercent = 0;
        Adapt.blocks.each(function (model) {
          completionPercent += model.get("_completionPercent");
        });
        completionPercent /= Adapt.blocks.length;
        this.$(".sidenav__progress-indicator-bar").css({
          height: completionPercent + "%"
        });
      }
    }, {
      key: "onClick",
      value: function onClick() {
        this.scrollToFirstIncompleteComponent();
      }
    }, {
      key: "scrollToFirstIncompleteComponent",
      value: function scrollToFirstIncompleteComponent() {
        var incompleteComponent = Adapt.components.find(function (model) {
          return !model.get("_isComplete") && model.getParent().get("_isAvailable");
        });
        if (!incompleteComponent) return;
        Adapt.navigateToElement("." + incompleteComponent.get("_id"), {
          duration: 400
        });
      }
    }, {
      key: "scrollToFirstIncompleteBlock",
      value: function scrollToFirstIncompleteBlock() {
        var incompleteBlock = Adapt.blocks.find(function (model) {
          return !model.get("_isComplete") && model.get("_isAvailable");
        });
        if (!incompleteBlock) return;
        Adapt.navigateToElement("." + incompleteBlock.get("_id"), {
          duration: 400
        });
      }
    }]);

    return SideNavProgressView;
  }(Backbone.View);
  var SideNavProgressView$1 = __AMD("extensions/adapt-dd-sideNav/js/sideNavProgressView", SideNavProgressView);

  var BlocknumView = function (_Backbone$View) {
    _inherits(BlocknumView, _Backbone$View);

    var _super = _createSuper(BlocknumView);

    function BlocknumView() {
      _classCallCheck(this, BlocknumView);

      return _super.apply(this, arguments);
    }

    _createClass(BlocknumView, [{
      key: "className",
      value: function className() {
        return "sidenav__blocknum";
      }
    }, {
      key: "events",
      value: function events() {
        return {
          "click": "onClick",
          "focus .js-sidenav-blocknum-input": "onInputFocus",
          "change .js-sidenav-blocknum-input": "onInputChange",
          "oninput .js-sidenav-blocknum-input": "onInputChange",
          "keydown .js-sidenav-blocknum-input": "onInputChange",
          "keyup .js-sidenav-blocknum-input": "onInputKeyup"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.maxInputLength = 2;
        this.setupEventListeners();
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates['sideNavBlocknum'];
        this.$el.html(template());
      }
    }, {
      key: "onInputFocus",
      value: function onInputFocus(event) {
        var input = event.currentTarget;
        this.inputVal = input.value;
      }
    }, {
      key: "onInputChange",
      value: function onInputChange(event) {
        this.updateInput();
      }
    }, {
      key: "updateInput",
      value: function updateInput() {
        var input = this.$(".js-sidenav-blocknum-input")[0];

        if (input.value.length > this.maxInputLength) {
          input.value = input.value.slice(0, this.maxInputLength);
        }
      }
    }, {
      key: "onInputKeyup",
      value: function onInputKeyup(event) {
        this.updateInput();
        var input = this.$(".js-sidenav-blocknum-input")[0];

        if (event.which === 27) {
          input.value = this.inputVal;
          $(input).blur();
          return false;
        }

        if (event.which === 13) {
          $(input).blur();

          if (!input.value) {
            input.value = this.inputVal;
            return false;
          }

          var blockNum = parseInt(input.value);
          var targetBlock = Adapt.blocks.find(function (block) {
            return block.get("_blockNum") == blockNum;
          });

          if (!targetBlock) {
            var _firstBlock = _.first(Adapt.blocks.models);

            if (blockNum < _firstBlock.get("_blockNum")) targetBlock = _firstBlock;else targetBlock = _.last(Adapt.blocks.models);
          }

          Adapt.scrollTo("." + targetBlock.get("_id"), {
            duration: 400
          });
          this.setInputVal(targetBlock.get("_blockNum"));
          return;
        }
      }
    }, {
      key: "setInputVal",
      value: function setInputVal(val) {
        var input = this.$(".js-sidenav-blocknum-input")[0];
        input.value = val;
        this.inputVal = val;
      }
    }, {
      key: "onClick",
      value: function onClick() {
        var $input = this.$(".js-sidenav-blocknum-input");
        $input.select();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(this.model, "change:_inviewBlock", this.onInviewBlockChange);
      }
    }, {
      key: "onInviewBlockChange",
      value: function onInviewBlockChange(model, blockModel) {
        this.setInputVal(blockModel.get("_blockNum"));

        if (this.model.get("_curBlock")) {
          this.stopListening(this.model.get("_curBlock"), "change:_completionPercent");
        }

        this.setProgressPercent(blockModel.get("_completionPercent"));
        this.model.set("_curBlock", blockModel);
        this.listenTo(this.model.get("_curBlock"), "change:_completionPercent", this.onCurBlockCompletionPercentChange);
      }
    }, {
      key: "setProgressPercent",
      value: function setProgressPercent(percentage) {
        var $r = this.$(".sidenav__blocknum-half-rot");
        var r = (1 - percentage / 100) * 180;
        $r.eq(0).css({
          "transform": "rotate(" + r + "deg)"
        });
        $r.eq(1).css({
          "transform": "rotate(" + -r + "deg)"
        });
      }
    }, {
      key: "onCurBlockCompletionPercentChange",
      value: function onCurBlockCompletionPercentChange(blockModel, completionPercent) {
        this.setProgressPercent(completionPercent);
      }
    }]);

    return BlocknumView;
  }(Backbone.View);
  var SideNavBlocknumView = __AMD("extensions/adapt-dd-sideNav/js/sideNavBlocknumView", BlocknumView);

  var SideNavWidgetView = function (_Backbone$View) {
    _inherits(SideNavWidgetView, _Backbone$View);

    var _super = _createSuper(SideNavWidgetView);

    function SideNavWidgetView() {
      _classCallCheck(this, SideNavWidgetView);

      return _super.apply(this, arguments);
    }

    _createClass(SideNavWidgetView, [{
      key: "className",
      value: function className() {
        return "sidenav__widget";
      }
    }, {
      key: "events",
      value: function events() {
        return {};
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setupEventListeners();
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        this.$el.append(new SideNavProgressView$1({
          model: this.model
        }).$el);
        this.$el.append(new SideNavBlocknumView({
          model: this.model
        }).$el);
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        this.model.set("_inviewBlock", Adapt.blocks.models[0]);
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(Adapt, "blockView:postRender", this.setUpBlockInview);
      }
    }, {
      key: "setUpBlockInview",
      value: function setUpBlockInview(view) {
        var _this = this;

        view.$el.off("onscreen.sideNavBlockView");
        view.$el.on("onscreen.sideNavBlockView", function (event, m) {
          var threshold = 50;

          if (m.percentFromTop < threshold && m.percentFromBottom < threshold) {
            if (_this.model.get("_inviewBlock") && _this.model.get("_inviewBlock") !== view.model) {
              _this.model.get("_inviewBlock").set("_isInview", false);
            }

            _this.model.set("_inviewBlock", view.model);

            _this.model.get("_inviewBlock").set("_isInview", true);
          }
        });
      }
    }, {
      key: "remove",
      value: function remove() {
        Adapt.blocks.each(function (blockModel) {
          Adapt.findViewByModelId(blockModel.get("_id")).$el.off("onscreen.sideNavBlockView");
        });
        Backbone.View.remove.apply(this, arguments);
      }
    }]);

    return SideNavWidgetView;
  }(Backbone.View);
  var SideNavWidgetView$1 = __AMD("extensions/adapt-dd-sideNav/js/SideNavWidgetView", SideNavWidgetView);

  var SlideNav = function (_Backbone$Controller) {
    _inherits(SlideNav, _Backbone$Controller);

    var _super = _createSuper(SlideNav);

    function SlideNav() {
      _classCallCheck(this, SlideNav);

      return _super.apply(this, arguments);
    }

    _createClass(SlideNav, [{
      key: "initialize",
      value: function initialize() {
        Adapt.on({
          'app:dataReady': this.onDataReady.bind(this)
        });
      }
    }, {
      key: "onDataReady",
      value: function onDataReady() {
        Adapt.scrolling.isLegacyScrolling = false;
        this.setUpBlocks();
        this.setUpEventListeners();
      }
    }, {
      key: "setUpBlocks",
      value: function setUpBlocks() {
        Adapt.blocks.each(function (block, index) {
          block.set("_blockNum", index + 1);
          block.set("_completionPercent", 0);
        });
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(Adapt, {
          'router:page': this.renderNavigationView
        });
        this.listenTo(Adapt.components, "change:_isComplete", this.onComponentCompletionChange);
      }
    }, {
      key: "onComponentCompletionChange",
      value: function onComponentCompletionChange(componentModel, isComplete) {
        var block = componentModel.getParent();
        var blockPercentCompletion = 0;
        block.getChildren().each(function (componentModel) {
          blockPercentCompletion += componentModel.get("_isComplete") ? 1 : 0;
        });
        blockPercentCompletion /= block.getChildren().length;
        block.set("_completionPercent", blockPercentCompletion * 100);
      }
    }, {
      key: "renderNavigationView",
      value: function renderNavigationView(pageModel) {
        var collection = new SideNavCollection$1(null, {
          pageModel: pageModel
        });
        this.collection = collection;
        $(".nav[role='navigation']").addClass("sidenav");
        this.renderSideNavWidget();
      }
    }, {
      key: "renderSideNavWidget",
      value: function renderSideNavWidget() {
        $('.nav__inner').append(new SideNavWidgetView$1({
          model: new Backbone.Model()
        }).$el);
      }
    }]);

    return SlideNav;
  }(Backbone.Controller);
  Adapt.sideNav = new SlideNav();

  var Events = function (_Backbone$Controller) {
    _inherits(Events, _Backbone$Controller);

    var _super = _createSuper(Events);

    function Events() {
      _classCallCheck(this, Events);

      return _super.apply(this, arguments);
    }

    _createClass(Events, [{
      key: "initialize",
      value: function initialize() {
        Adapt.on({
          'app:dataReady': this.onDataReady.bind(this)
        });
      }
    }, {
      key: "onDataReady",
      value: function onDataReady() {
        Adapt.on("componentView:preRender", this.componentViewPreRender.bind(this));
        Adapt.on("componentView:postRender", this.componentViewPostRender.bind(this));
        Adapt.on("blockView:preRender", this.blockViewPreRender.bind(this));
        Adapt.on("blockView:postRender", this.blockViewPostRender.bind(this));
        Adapt.blocks.each(function (blockModel) {
          blockModel.listenTo(blockModel.getChildren(), {
            "change:_isReady": function (model) {
              var notReadyChild = blockModel.getChildren().find(function (child) {
                return !child.get("_isReady");
              });

              if (notReadyChild) {
                return;
              }

              var blockView = Adapt.findViewByModelId(blockModel.get("_id"));
              blockModel.trigger("blockView:childrenReady", blockView);
              Adapt.trigger("blockView:childrenReady view:childrenReady", blockView);
            }
          });
        });
      }
    }, {
      key: "componentViewPreRender",
      value: function componentViewPreRender(view) {
        view.model.trigger("componentView:preRender", view);
      }
    }, {
      key: "componentViewPostRender",
      value: function componentViewPostRender(view) {
        view.model.trigger("componentView:postRender", view);
      }
    }, {
      key: "blockViewPreRender",
      value: function blockViewPreRender(view) {
        view.model.trigger("blockView:preRender", view);
      }
    }, {
      key: "blockViewPostRender",
      value: function blockViewPostRender(view) {
        view.model.trigger("blockView:postRender", view);
      }
    }]);

    return Events;
  }(Backbone.Controller);

  new Events();

  var ExtraLearningPopupView = function (_Backbone$View) {
    _inherits(ExtraLearningPopupView, _Backbone$View);

    var _super = _createSuper(ExtraLearningPopupView);

    function ExtraLearningPopupView() {
      _classCallCheck(this, ExtraLearningPopupView);

      return _super.apply(this, arguments);
    }

    _createClass(ExtraLearningPopupView, [{
      key: "className",
      value: function className() {
        return "extralearning-popup " + (this.model.get("_classes") || "");
      }
    }, {
      key: "events",
      value: function events() {
        return {
          "click .js-extralearning-icon": "closePopup"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpEventListeners();
        this.render();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenToOnce(Adapt, "notify:opened", this.onOpened);
        this.listenTo(Adapt, "notify:closed", this.onNotifyClosed);
      }
    }, {
      key: "closePopup",
      value: function closePopup() {
        Adapt.trigger('notify:close');
      }
    }, {
      key: "onOpened",
      value: function onOpened() {
        this.$(".js-extralearning-icon").addClass("u-visibility-hidden");
        this.$el.imageready(_.debounce(this.setUpIconTransition.bind(this), 0));
      }
    }, {
      key: "onNotifyClosed",
      value: function onNotifyClosed(notifyView) {
        if (notifyView.model.get("_view") !== this) return;
        this.$el.addClass("is-closed");
        this.alignIconToParent();
        this.$(".js-extralearning-icon").removeClass("is-active");
      }
    }, {
      key: "remove",
      value: function remove() {
        this.model.trigger("remove");

        _get(_getPrototypeOf(ExtraLearningPopupView.prototype), "remove", this).call(this);
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        data.view = this;
        var template = Handlebars.templates['extraLearningPopup'];
        this.$el.html(template(data));
      }
    }, {
      key: "setUpIconTransition",
      value: function setUpIconTransition() {
        this.alignIconToParent();
        this.$(".js-extralearning-icon").hide(0).removeClass("u-visibility-hidden").show(0).addClass("is-active");
      }
    }, {
      key: "alignIconToParent",
      value: function alignIconToParent() {
        var parentView = this.model.get("_parentView");
        var $icon = this.$(".js-extralearning-icon");
        var $parentIcon = parentView.$(".js-extralearning-icon");
        $icon.css({
          "transform": ""
        });
        var iconBB = $icon[0].getBoundingClientRect();
        var parentIconBB = $parentIcon[0].getBoundingClientRect();
        var offset = {
          top: parentIconBB.top - iconBB.top,
          left: parentIconBB.left - iconBB.left
        };
        var scale = parentIconBB.width / iconBB.width;
        $icon.css({
          "transform": "translate(" + offset.left + "px, " + offset.top + "px) scale(" + scale + ")"
        });
        $parentIcon.addClass("u-visibility-hidden");
        return $icon;
      }
    }]);

    return ExtraLearningPopupView;
  }(Backbone.View);
  var ExtraLearningPopupView$1 = __AMD("extensions/adapt-extraLearning/js/extraLearningPopupView", ExtraLearningPopupView);

  var ExtraLearningView = function (_Backbone$View) {
    _inherits(ExtraLearningView, _Backbone$View);

    var _super = _createSuper(ExtraLearningView);

    function ExtraLearningView() {
      _classCallCheck(this, ExtraLearningView);

      return _super.apply(this, arguments);
    }

    _createClass(ExtraLearningView, [{
      key: "className",
      value: function className() {
        return "extralearning extralearning-btn";
      }
    }, {
      key: "tagName",
      value: function tagName() {
        return "div";
      }
    }, {
      key: "events",
      value: function events() {
        return {
          "click .js-extralearning-btn": "onClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.render();
      }
    }, {
      key: "setUpViewData",
      value: function setUpViewData() {
        this.popupView = null;
        this._isPopupOpen = false;
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates['extraLearning'];
        this.$el.html(new Handlebars.SafeString(template(this.model.toJSON())).string);
      }
    }, {
      key: "onClick",
      value: function onClick() {
        this.openPopup();
      }
    }, {
      key: "openPopup",
      value: function openPopup() {
        if (this._isPopupOpen) return;
        this._isPopupOpen = true;
        var popupModel = new Backbone.Model(_.extend({}, this.model.get("_popupData"), {
          _parent: this.model.get("_componentParent"),
          _parentView: this,
          _type: this.model.get("_type")
        }));
        this.popupView = new ExtraLearningPopupView$1({
          model: popupModel
        });
        this.notifyView = Adapt.notify.popup({
          _view: this.popupView,
          _isCancellable: true,
          _showCloseButton: true,
          _classes: 'extralearning'
        });
        this.listenTo(Adapt, {
          'notify:closed': this.onPopupClosed
        });
        this.listenToOnce(popupModel, "remove", this.onPopupRemoved);
      }
    }, {
      key: "onPopupClosed",
      value: function onPopupClosed(notifyView) {
        if (notifyView.model.get("_view") !== this.popupView) return;
        this.stopListening(Adapt, "notify:closed", this.onPopupClosed);
        this.$el.addClass("is-visited");
        this._isPopupOpen = false;
      }
    }, {
      key: "onPopupRemoved",
      value: function onPopupRemoved() {
        this.$(".js-extralearning-icon").removeClass("u-visibility-hidden");
      }
    }]);

    return ExtraLearningView;
  }(Backbone.View);
  var ExtraLearningView$1 = __AMD("extensions/adapt-extraLearning/js/extraLearningView", ExtraLearningView);

  Adapt.on('router:page', function () {
    Handlebars.registerHelperEl("extraLearning", function () {
      var context = arguments[arguments.length - 1];
      var hash = context.hash;
      var componentModel = Handlebars.getComponentModelFromContext(context);
      var id = hash.id;

      var popupData = _.find(componentModel.get("_extraLearning")._items, function (extraLearningItem) {
        return extraLearningItem._id == id;
      });

      if (!popupData) throw "{{#extraLearning}}: Could not find _extraLearning._items element with _id: \"" + id + "\"";

      var _default = Adapt.course.get("_extraLearning");

      if (!_default) {
        throw "No \"_extraLearning\" property defined in course.json.\n\nSee src/extensions/adapt-extraLearning/example.json for instructions.";
      }

      var type = popupData._type;
      var title = "MISSING_TITLE_ERROR";

      if (!_default[type]) {
        throw "Could not find course._extraLearning data with key(\"_type\"): \"" + type + "\".";
      }

      title = _default[type].title;
      var content = context.fn ? context.fn(this).trim() : undefined;
      var modelJSON = {
        content: content,
        title: content || popupData.title || title,
        _type: type,
        _componentParent: componentModel,
        _popupData: popupData
      };
      return new ExtraLearningView$1({
        model: new Backbone.Model(_.extend({}, hash, modelJSON))
      }).$el;
    });
  });

  var LottieModel = function (_Backbone$Model) {
    _inherits(LottieModel, _Backbone$Model);

    var _super = _createSuper(LottieModel);

    function LottieModel() {
      _classCallCheck(this, LottieModel);

      return _super.apply(this, arguments);
    }

    _createClass(LottieModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          "anim": null,
          "loops": 1,
          "_controlsType": "none",
          "isDecorative": true,
          "_isPlaying": true,
          "_duration": 0,
          "_loopsNum": 0,
          "_isComplete": false,
          "_resetOnOutview": true,
          "_resetOnOutviewEnabled": true
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpEventListeners();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenToOnce(this, "change:anim", this.onAnimLoad);
        this.listenTo(this, "change:_isPlaying", this.onIsPlayingChange);
        this.listenTo(this, "change:_isComplete", this.onIsCompleteChange);
      }
    }, {
      key: "onIsPlayingChange",
      value: function onIsPlayingChange(model, isPlaying) {
        var anim = this.get("anim");
        if (!anim) return;

        if (!isPlaying) {
          anim.pause();
        } else {
          anim.play();
        }
      }
    }, {
      key: "onIsCompleteChange",
      value: function onIsCompleteChange(model, isComplete) {
        if (isComplete) {
          if (this.get("_controlsType") == "basic") {
            this.set("_resetOnOutviewEnabled", false);
          }
        } else {
          if (this.get("_controlsType") == "basic") {
            this.set("_resetOnOutviewEnabled", true);
          }
        }
      }
    }, {
      key: "checkResetOnOutview",
      value: function checkResetOnOutview() {
        return this.get("_resetOnOutview") && this.get("_resetOnOutviewEnabled");
      }
    }, {
      key: "setUpAnimEventListeners",
      value: function setUpAnimEventListeners() {
        var anim = this.get("anim");
        anim.addEventListener('loopComplete', this.onAnimLoopComplete.bind(this));
        anim.addEventListener('enterFrame', this.onAnimEnterFrame.bind(this));
      }
    }, {
      key: "onAnimLoopComplete",
      value: function onAnimLoopComplete() {
        this.set("_loopsNum", this.get("_loopsNum") + 1);

        if (this.get("_loopsNum") >= this.get("loops")) {
          this.pause(this.get("_duration") - 1);
          this.set("_isComplete", true);
        }
      }
    }, {
      key: "getProgressPercent",
      value: function getProgressPercent() {
        var anim = this.get("anim");
        if (!anim) return 0;
        return anim.currentFrame / anim.totalFrames;
      }
    }, {
      key: "onAnimEnterFrame",
      value: function onAnimEnterFrame(event) {
        if (!this.get("_isPlaying")) return;
        var currentProgressPercent = event.currentTime / event.totalTime;
        this.set("_currentProgressPercent", currentProgressPercent);

        if (this.get("loops") % 1 !== 0 && this.get("_loopsNum") + currentProgressPercent > this.get("loops")) {
          var duration = this.get("_duration");
          var pauseTime = duration * (this.get("loops") % 1) - 1;
          if (pauseTime < 0) pauseTime = duration - 1;
          this.pause(pauseTime);
          this.set("_isComplete", true);
        }
      }
    }, {
      key: "onAnimLoad",
      value: function onAnimLoad(model, anim) {
        if (!anim) throw "lottieModel: an unexpected error has occured (Lottie animation object is falsy).";
        this.set("_duration", anim.getDuration() * 1000);
        this.onIsPlayingChange(this, this.get("_isPlaying"));
        this.setUpAnimEventListeners();
      }
    }, {
      key: "pause",
      value: function pause(time) {
        this.set("_isPlaying", false);

        if (time !== undefined) {
          var _this$get;

          (_this$get = this.get("anim")) === null || _this$get === void 0 ? void 0 : _this$get.goToAndStop(time, false);
        }
      }
    }, {
      key: "play",
      value: function play(time) {
        this.set("_isPlaying", true);

        if (time !== undefined) {
          var _this$get2;

          (_this$get2 = this.get("anim")) === null || _this$get2 === void 0 ? void 0 : _this$get2.goToAndPlay(time, false);
        }
      }
    }, {
      key: "toggle",
      value: function toggle() {
        this.set("_isPlaying", !this.get("_isPlaying"));
      }
    }, {
      key: "isLoopsComplete",
      value: function isLoopsComplete() {
        return Boolean(this.get("_isComplete"));
      }
    }, {
      key: "isComplete",
      value: function isComplete() {
        return Boolean(this.get("_isComplete"));
      }
    }, {
      key: "isDecorative",
      value: function isDecorative() {
        return Boolean(this.get("isDecorative"));
      }
    }, {
      key: "reset",
      value: function reset() {
        this.set("_loopsNum", 0);
        this.set("_isComplete", false);
        this.play(0);
      }
    }]);

    return LottieModel;
  }(Backbone.Model);

  var LottieModel$1 = __AMD("extensions/adapt-lottie/js/lottieModel", LottieModel);

  var LottieControlsView = function (_Backbone$View) {
    _inherits(LottieControlsView, _Backbone$View);

    var _super = _createSuper(LottieControlsView);

    function LottieControlsView() {
      _classCallCheck(this, LottieControlsView);

      return _super.apply(this, arguments);
    }

    _createClass(LottieControlsView, [{
      key: "className",
      value: function className() {
        return "lottie__controls";
      }
    }, {
      key: "events",
      value: function events() {
        return {
          "click .js-controls-playpause": "onPlayPauseClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpEventListeners();
        this.render();
      }
    }, {
      key: "onPlayPauseClick",
      value: function onPlayPauseClick() {
        if (this.model.isLoopsComplete()) {
          this.model.reset();
          return;
        }

        if (this.model.isDecorative()) return;
        this.model.toggle();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {}
    }, {
      key: "render",
      value: function render() {
        this.$el.html(new Handlebars.SafeString(Handlebars.templates['lottieControls'](this.model.toJSON())).string);
      }
    }]);

    return LottieControlsView;
  }(Backbone.View);
  var LottieControlsView$1 = __AMD("extensions/adapt-lottie/js/lottieControlsView", LottieControlsView);

  var INTERSECTION_THRESHOLD = 0.99;
  Lottie__default['default'].setQuality('high');

  var LottieView = function (_Backbone$View) {
    _inherits(LottieView, _Backbone$View);

    var _super = _createSuper(LottieView);

    function LottieView() {
      _classCallCheck(this, LottieView);

      return _super.apply(this, arguments);
    }

    _createClass(LottieView, [{
      key: "className",
      value: function className() {
        var classNames = ["lottie", this.model.get("theme") ? "theme-" + this.model.get("theme") : "", this.model.get("_controlsType") ? "controls-type-" + this.model.get("_controlsType") : "", this.model.get("isDecorative") ? "is-decorative" : ""];
        return classNames.join(' ');
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          name: this.model.get("name"),
          "aria-busy": true
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpModelData();
        this.setUpEventListeners();
        this.render();

        if (this.model.get("autoplay")) {
          this.setUpIntersectionObserver();
        }
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        this.model.set("_isPlaying", false);
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        var _this = this;

        this.listenTo(this.model, "change:_isPlaying", this.onIsPlayingChange);
        this.listenTo(this.model, "change:_isComplete", this.onIsCompleteChange);
        this.listenTo(this.model, "change:_isReady", this.onIsReadyChange);
        this.listenTo(this.model.get("_parent"), "stickyBlock:inview", this.onParentStickyBlockInview);
        this.listenTo(this.model.get("_parent"), "stickyBlock:outview", this.onParentStickyBlockOutview);
        this.$el.on("annotation:active", function () {
          _this.model.reset();
        });
        this.$el.on("annotation:inactive", function () {
          _this.model.reset();

          _this.model.pause(0);
        });
      }
    }, {
      key: "setUpIntersectionObserver",
      value: function setUpIntersectionObserver() {
        var _this2 = this;

        var observer = new IntersectionObserver(function (entries) {
          entries.forEach(_this2.onAutoplayIntersection.bind(_this2));
        }, {
          root: null,
          rootMargin: '0px',
          threshold: [INTERSECTION_THRESHOLD, 0]
        });
        observer.observe(this.$(".js-lottie-container")[0]);
      }
    }, {
      key: "onAutoplayIntersection",
      value: function onAutoplayIntersection(entry) {
        if (entry.isIntersecting && entry.intersectionRatio >= INTERSECTION_THRESHOLD) this.onAutoplayInview();else if (!entry.isIntersecting && entry.intersectionRatio == 0) this.onAutoplayOutview();
      }
    }, {
      key: "onAutoplayOutview",
      value: function onAutoplayOutview() {
        if (this.model.checkResetOnOutview()) {
          this.model.reset();
          this.model.pause(0);
        }
      }
    }, {
      key: "onAutoplayInview",
      value: function onAutoplayInview() {
        if (!this.model.get("_isPlaying")) {
          if (this.model.checkResetOnOutview()) {
            this.model.reset();
          }
        }
      }
    }, {
      key: "onParentStickyBlockInview",
      value: function onParentStickyBlockInview() {
        if (Adapt.device.screenSize !== 'large') return;

        if (this.model.checkResetOnOutview()) {
          this.model.reset();
        }
      }
    }, {
      key: "onParentStickyBlockOutview",
      value: function onParentStickyBlockOutview() {
        if (Adapt.device.screenSize !== 'large') return;

        if (this.model.checkResetOnOutview()) {
          this.model.reset();
          this.model.pause(0);
        }
      }
    }, {
      key: "onIsReadyChange",
      value: function onIsReadyChange(model, isReady) {
        this.$el.toggleClass("is-ready", isReady);
      }
    }, {
      key: "onIsPlayingChange",
      value: function onIsPlayingChange(model, isPlaying) {
        this.$el.toggleClass("is-playing", isPlaying);
        this.$el.toggleClass("is-paused", !isPlaying);
      }
    }, {
      key: "onIsCompleteChange",
      value: function onIsCompleteChange(model, isComplete) {
        this.$el.toggleClass("is-complete", isComplete);
      }
    }, {
      key: "render",
      value: function render() {
        this.$el.html(new Handlebars.SafeString(Handlebars.templates['lottie'](this.model.toJSON())).string);
        this.renderLottie();
      }
    }, {
      key: "renderLottie",
      value: function renderLottie() {
        var _this3 = this;
        var anim;

        try {
          anim = Lottie__default['default'].loadAnimation({
            container: this.$(".js-lottie-container")[0],
            path: this.model.get("src"),
            renderer: 'svg',
            loop: true,
            autoplay: false,
            name: this.model.get("src")
          });
        } catch (err) {}

        anim.addEventListener('DOMLoaded', function () {
          var callback = function () {
            _this3.$el.attr("aria-busy", false);

            _this3.model.set("anim", anim);

            _this3.model.set("_isReady", true);

            _this3.$(".lottie__controls-container").html(new LottieControlsView$1({
              model: _this3.model
            }).$el);
          };

          callback();
        }, function () {});
      }
    }]);

    return LottieView;
  }(Backbone.View);
  var LottieView$1 = __AMD("extensions/adapt-lottie/js/lottieView", LottieView);

  Handlebars__default['default'].registerHelperEl("lottie", function () {
    var context = arguments[arguments.length - 1];
    if (!context.hash.src) throw "{{{lottie}}} helper: the \"src\" property must be defined.";
    var componentModel = Handlebars__default['default'].getComponentModelFromContext(context);

    var modelJSON = _.extend({
      _parent: componentModel,
      _controlsType: context.hash.controls || "none",
      autoplay: false,
      loops: context.hash.loops !== undefined ? context.hash.loops : 1,
      theme: context.hash.theme || ""
    }, context.hash);

    return new LottieView$1({
      model: new LottieModel$1(modelJSON)
    }).$el;
  });

  var MarkChainModel = function (_Backbone$Model) {
    _inherits(MarkChainModel, _Backbone$Model);

    var _super = _createSuper(MarkChainModel);

    function MarkChainModel() {
      _classCallCheck(this, MarkChainModel);

      return _super.apply(this, arguments);
    }

    _createClass(MarkChainModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          "_name": "",
          "_isReady": false,
          "_prev": null,
          "_next": null
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpLabel();
        this.setUpEventListeners();
      }
    }, {
      key: "setUpLabel",
      value: function setUpLabel() {
        var label = this.get("label");
        if (!label) return;

        if (label.length >= 1 && label.length <= 3) {
          this.set("_isSmallLabel", true);
        }
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenToOnce(this, "change:_isReady", this.onReadyChange);
      }
    }, {
      key: "onReadyChange",
      value: function onReadyChange(model, isReady) {
        if (!isReady) throw "An unexpected error has occurred (\"_isReady\" should not be false).";
        var prev = this.collection.at(this.collection.indexOf(this) - 1);
        this.set("_prev", prev);
        var next = this.collection.at(this.collection.indexOf(this) + 1);
        this.set("_next", next);
      }
    }]);

    return MarkChainModel;
  }(Backbone.Model);
  var MarkChainModel$1 = __AMD("extensions/adapt-markChain/js/markChainModel", MarkChainModel);

  var MarkChainView = function (_Backbone$View) {
    _inherits(MarkChainView, _Backbone$View);

    var _super = _createSuper(MarkChainView);

    function MarkChainView() {
      _classCallCheck(this, MarkChainView);

      return _super.apply(this, arguments);
    }

    _createClass(MarkChainView, [{
      key: "className",
      value: function className() {
        var classes = ["markchain", this.model.get("theme") ? "theme-".concat(this.model.get("theme")) : "", this.model.get("class") || ""];
        return classes.join(" ");
      }
    }, {
      key: "attributes",
      value: function attributes() {
        var attr = {
          "name": this.model.get("name"),
          "style": this.model.get("style"),
          "data-markchain-idx": this.model.get("_idx") || -1
        };
        return attr;
      }
    }, {
      key: "tagName",
      value: function tagName() {
        return "span";
      }
    }, {
      key: "events",
      value: function events() {
        return {};
      }
    }, {
      key: "initialize",
      value: function () {
        var _initialize = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.render();
                  this.setUpEventListeners();

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function initialize() {
          return _initialize.apply(this, arguments);
        }

        return initialize;
      }()
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.onDeviceResized = _.debounce(this.onDeviceResized.bind(this), 50);
        this.listenTo(this.model, "change:_next", this.onNextChanged);
        this.listenTo(Adapt, "device:resize", this.onDeviceResized);
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars__default['default'].templates["markChain"];
        this.$el.html(new Handlebars__default['default'].SafeString(template(data)).string);
      }
    }, {
      key: "setUpHiddenObserver",
      value: function setUpHiddenObserver() {
        var _this = this;

        this.$el.onUnhidden(function () {
          _.delay(function () {
            _this.updateArrow();
          }, 0);
        });
      }
    }, {
      key: "onDeviceResized",
      value: function onDeviceResized() {
        this.updateArrow();
      }
    }, {
      key: "onNextChanged",
      value: function onNextChanged(model, nextModel) {
        this.updateArrow();
        if (!nextModel) return;
        this.setUpHiddenObserver();
      }
    }, {
      key: "_getVectorIntersection",
      value: function _getVectorIntersection(p0, v0, p1, v1) {
        var c = -v1.x * v0.y + v0.x * v1.y;
        var s = (-v0.y * (p0.x - p1.x) + v0.x * (p0.y - p1.y)) / c;
        var t = (v1.x * (p0.y - p1.y) - v1.y * (p0.x - p1.x)) / c;

        if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {
          return {
            x: p0.x + t * v0.x,
            y: p0.y + t * v0.y
          };
        }

        return null;
      }
    }, {
      key: "_getVectorBoxIntersection",
      value: function _getVectorBoxIntersection(p0, v0, bb) {
        var intersection = this._getVectorIntersection(p0, v0, {
          x: bb.left,
          y: bb.top
        }, {
          x: bb.width,
          y: 0
        });

        if (!intersection) intersection = this._getVectorIntersection(p0, v0, {
          x: bb.left + bb.width,
          y: bb.top + bb.height
        }, {
          x: -bb.width,
          y: 0
        });
        if (!intersection) intersection = this._getVectorIntersection(p0, v0, {
          x: bb.left + bb.width,
          y: bb.top
        }, {
          x: 0,
          y: bb.height
        });
        if (!intersection) intersection = this._getVectorIntersection(p0, v0, {
          x: bb.left,
          y: bb.top + bb.height
        }, {
          x: 0,
          y: -bb.height
        });
        if (!intersection) intersection = {
          x: bb.left + bb.width / 2,
          y: bb.top + bb.height / 2
        };
        return intersection;
      }
    }, {
      key: "_getVectorLength",
      value: function _getVectorLength(v) {
        return Math.sqrt(Math.pow(v.x, 2) + Math.pow(v.y, 2));
      }
    }, {
      key: "_subtractVector",
      value: function _subtractVector(v0, v1) {
        return {
          x: v0.x - v1.x,
          y: v0.y - v1.y
        };
      }
    }, {
      key: "updateArrow",
      value: function updateArrow() {
        var nextModel = this.model.get("_next");
        var $arrow = this.$(".js-markchain-arrow");

        if (!nextModel) {
          $arrow.hide();
          return;
        }

        var $scaled = this.$el.closest("[style*='scale('");
        var scale = 1;

        if ($scaled.length) {
          var transform = $scaled.css("transform");
          var matrix = transform.replace("matrix(", "").split(",");
          scale = parseFloat(matrix[0]);
        }

        $arrow.show();

        var fromBB = _.extend({}, this.$(".js-markchain-sizing")[0].getBoundingClientRect());

        var toBB = _.extend({}, nextModel.get("_view").$(".js-markchain-sizing")[0].getBoundingClientRect());

        var fromMid = {
          x: fromBB.left + fromBB.width / 2,
          y: fromBB.top + fromBB.height / 2
        };
        var toMid = {
          y: toBB.top + toBB.height / 2,
          x: toBB.left + toBB.width / 2
        };
        var v = {
          x: toMid.x - fromMid.x,
          y: toMid.y - fromMid.y
        };

        var fromIn = this._getVectorBoxIntersection(fromMid, v, fromBB);

        var toIn = this._getVectorBoxIntersection(fromMid, v, toBB);

        var final = {
          x: toIn.x - fromIn.x,
          y: toIn.y - fromIn.y
        };
        var angle = Math.atan2(final.y, final.x) * 180 / Math.PI;

        var length = this._getVectorLength(final);

        var offset = this._getVectorLength(this._subtractVector(fromMid, fromIn));

        $arrow.css({
          "width": length / scale,
          "transform": "rotate(".concat(angle, "deg) translateX(").concat(offset / scale, "px)")
        });
        var $label = this.$(".js-markchain-label");
        $label.css({
          "transform": "translateY(-50%) rotate(".concat(-angle, "deg)")
        });
      }
    }]);

    return MarkChainView;
  }(Backbone.View);
  var MarkChainView$1 = __AMD("extensions/adapt-markChain/js/markChainView", MarkChainView);

  var MarkChain = function (_Backbone$Controller) {
    _inherits(MarkChain, _Backbone$Controller);

    var _super = _createSuper(MarkChain);

    function MarkChain() {
      _classCallCheck(this, MarkChain);

      return _super.apply(this, arguments);
    }

    _createClass(MarkChain, [{
      key: "initialize",
      value: function initialize() {
        Adapt.on('router:page', this.setUpHelpers.bind(this));
      }
    }, {
      key: "setUpHelpers",
      value: function setUpHelpers() {
        var _Adapt$stickyBlock;

        (_Adapt$stickyBlock = Adapt.stickyBlock) === null || _Adapt$stickyBlock === void 0 ? void 0 : _Adapt$stickyBlock.addResetOnReRender("_markChain");
        Handlebars.registerHelperEl("markChain", function () {
          var context = arguments[arguments.length - 1];
          var data = Handlebars.getContextHash.apply(this, arguments);
          if (!data.name) throw "{{#markChain}}: \"name\" property must be defined!";
          var componentModel = Handlebars.getComponentModelFromContext(context);

          if (!componentModel.get("_markChain")) {
            componentModel.set("_markChain", {});
          }

          var groupsCollection = componentModel.get("_markChain")._groups;

          if (!groupsCollection) {
            componentModel.get("_markChain")._groups = new Backbone.Collection();
            groupsCollection = componentModel.get("_markChain")._groups;
          }

          var group = groupsCollection.find(function (g) {
            return g.get("_name") == data.name;
          });

          if (!group) {
            group = new Backbone.Model({
              _name: data.name,
              _items: new Backbone.Collection(null, {
                model: MarkChainModel$1,
                comparator: '_idx'
              })
            });
            groupsCollection.push(group);

            _.delay(function () {
              var items = group.get("_items");
              items.sort();
              items.each(function (markChainModel) {
                markChainModel.set("_isReady", true);
              });
            }, 1);
          }

          data._idx = data.idx;
          if (!data.content || !data.content.length) data.content = "&#8203;";
          var model = new MarkChainModel$1(data);
          group.get("_items").push(model);
          var view = new MarkChainView$1({
            model: model
          });
          model.set("_view", view);
          return view.$el;
        });
      }
    }]);

    return MarkChain;
  }(Backbone.Controller);

  var markChain = new MarkChain();
  Adapt.markChain = markChain;

  var NestComponentParentModel = function (_Backbone$Model) {
    _inherits(NestComponentParentModel, _Backbone$Model);

    var _super = _createSuper(NestComponentParentModel);

    function NestComponentParentModel() {
      _classCallCheck(this, NestComponentParentModel);

      return _super.apply(this, arguments);
    }

    _createClass(NestComponentParentModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _parentView: undefined,
          _isReady: false,
          _children: new Backbone.Collection()
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.extendParentView();
        this.listenTo(this.get("_children"), "change:_isReady", this.onChildReadyChange);
      }
    }, {
      key: "registerChild",
      value: function registerChild(componentModel) {
        this.get("_children").add(componentModel);
      }
    }, {
      key: "onChildReadyChange",
      value: function onChildReadyChange(childModel, isReady) {
        this.set("_isReady", !Boolean(this.get("_children").find(function (child) {
          return !child.get("_isReady");
        })));
        this.get("_parentView").setReadyStatus();
      }
    }, {
      key: "extendParentView",
      value: function extendParentView() {
        var _arguments = arguments,
            _this = this;

        var parentView = this.get("_parentView");
        var _setReadyStatus = parentView.setReadyStatus;

        if (!_setReadyStatus.prototype._nestComponentOverride) {
          parentView.setReadyStatus = function () {
            if (_this.get("_isReady")) {
              return _setReadyStatus.apply(parentView, _arguments);
            }
          };

          parentView.setReadyStatus.prototype._nestComponentOverride = true;
        }
      }
    }]);

    return NestComponentParentModel;
  }(Backbone.Model);
  var nestComponentParentModel = __AMD("extensions/adapt-nestComponent/js/nestComponentParentModel", NestComponentParentModel);

  Adapt.on('router:page', function () {
    Handlebars__default['default'].registerHelperEl("nestComponent", function () {
      var context = arguments[arguments.length - 1];
      var hash = context.hash;
      var id = hash.id;
      if (!id) throw "{{#nestComponent}} helper must have an \"id\" property.";
      var childModel = Adapt.findById(id);
      if (!childModel) throw "{{#nestComponent}} could not find component with \"_id\": \"" + id + "\"";
      var parentModel = Handlebars__default['default'].getComponentModelFromContext(context);
      var parentNestComponent = parentModel.get("_nestComponent");

      if (!parentNestComponent) {
        throw '{{#nestComponent}}: Component with "_id": "' + parentModel.get("_id") + '" contains {{#nestComponent}} elements, but does not have the "_nestComponent" partial added.';
      }

      try {
        parentNestComponent.registerChild(childModel);
      } catch (err) {
        throw "adapt-nestComponent: parent component \"_nestComponent\" incorrectly applied. Must be: \"_nestComponent\": {\"_isParent\": true}";
      }

      if (childModel.get("_nestComponent")) throw "{{#nestComponent}}: Child with \"_id\": \"" + id + "\" cannot also be a nestComponent parent / cannot be nested in multiple parents at once.";
      if (childModel.get("_layout") != "full") throw '{{#nestComponent}} only supports components with "_layout": "full" at this time ("' + id + '").';
      childModel.set("_nestComponent", {
        _isChild: true,
        _parent: parentModel
      });
      return $("<div class='nestcomponent' data-nestcomponent-id='" + id + "'>");
    });
  });

  var NestComponent = function (_Backbone$Controller) {
    _inherits(NestComponent, _Backbone$Controller);

    var _super = _createSuper(NestComponent);

    function NestComponent() {
      _classCallCheck(this, NestComponent);

      return _super.apply(this, arguments);
    }

    _createClass(NestComponent, [{
      key: "initialize",
      value: function initialize() {
        Adapt.on({
          'app:dataReady': this.onDataReady.bind(this)
        });
      }
    }, {
      key: "onDataReady",
      value: function onDataReady() {
        Adapt.on("componentView:preRender", this.onParentComponentViewPreRender.bind(this));
        Adapt.on("componentView:postRender", this.onChildComponentViewPostRender.bind(this));
      }
    }, {
      key: "onParentComponentViewPreRender",
      value: function onParentComponentViewPreRender(componentView) {
        var componentModel = componentView.model;
        var nestComponent = componentModel.get("_nestComponent");
        if (!nestComponent || !nestComponent._isParent) return;
        componentModel.set("_isReady", false);
        componentModel.set("_nestComponent", new nestComponentParentModel({
          _parentView: componentView
        }));
      }
    }, {
      key: "onChildComponentViewPostRender",
      value: function onChildComponentViewPostRender(componentView) {
        var componentModel = componentView.model;
        var nestComponent = componentModel.get("_nestComponent");
        if (!nestComponent || !nestComponent._isChild) return;
        var parentView = Adapt.findViewByModelId(nestComponent._parent.get("_id"));
        parentView.$(".nestcomponent[data-nestcomponent-id=" + componentModel.get("_id") + "]").append(componentModel.get("_componentRow") ? componentView.$el.closest(".componentrow") : componentView.$el);
      }
    }]);

    return NestComponent;
  }(Backbone.Controller);

  new NestComponent();

  var ResourcePopupPopupView = function (_Backbone$View) {
    _inherits(ResourcePopupPopupView, _Backbone$View);

    var _super = _createSuper(ResourcePopupPopupView);

    function ResourcePopupPopupView() {
      _classCallCheck(this, ResourcePopupPopupView);

      return _super.apply(this, arguments);
    }

    _createClass(ResourcePopupPopupView, [{
      key: "className",
      value: function className() {
        return "resourcepopup-popup " + (this.model.get("_classes") || "");
      }
    }, {
      key: "events",
      value: function events() {
        return {};
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpEventListeners();
        this.render();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenToOnce(Adapt, "notify:closed", this.onClosed);
      }
    }, {
      key: "onClosed",
      value: function onClosed() {
        this.$el.addClass("is-closed");
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        data.view = this;
        var template = Handlebars.templates['resourcePopupPopup'];
        this.$el.html(template(data));
      }
    }]);

    return ResourcePopupPopupView;
  }(Backbone.View);
  var ResourcePopupPopupView$1 = __AMD("extensions/adapt-resourcePopup/js/resourcePopupPopupView", ResourcePopupPopupView);

  var ResourcePopupBtnView = function (_Backbone$View) {
    _inherits(ResourcePopupBtnView, _Backbone$View);

    var _super = _createSuper(ResourcePopupBtnView);

    function ResourcePopupBtnView() {
      _classCallCheck(this, ResourcePopupBtnView);

      return _super.apply(this, arguments);
    }

    _createClass(ResourcePopupBtnView, [{
      key: "className",
      value: function className() {
        return "resourcepopup-btn btn-text";
      }
    }, {
      key: "tagName",
      value: function tagName() {
        return "button";
      }
    }, {
      key: "events",
      value: function events() {
        return {
          "click": "onClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpViewData();
        this.render();
      }
    }, {
      key: "setUpViewData",
      value: function setUpViewData() {
        this.popupView = null;
        this._isPopupOpen = false;
      }
    }, {
      key: "render",
      value: function render() {
        this.$el.html(new Handlebars.SafeString(this.model.get("buttonText")).string);
      }
    }, {
      key: "onClick",
      value: function onClick() {
        this.openPopup();
      }
    }, {
      key: "openPopup",
      value: function openPopup() {
        if (this._isPopupOpen) return;
        this._isPopupOpen = true;
        this.popupView = new ResourcePopupPopupView$1({
          model: this.model
        });
        Adapt.trigger("notify:popup", {
          _view: this.popupView,
          _isCancellable: true,
          _showCloseButton: true,
          _classes: 'resourcepopup ' + (this.model.get('_classes') || "")
        });
        this.listenToOnce(Adapt, {
          'popup:closed': this.onPopupClosed
        });
      }
    }, {
      key: "onPopupClosed",
      value: function onPopupClosed() {
        this.$el.addClass("is-visited");
        this._isPopupOpen = false;
      }
    }]);

    return ResourcePopupBtnView;
  }(Backbone.View);
  var ResourcePopupBtnView$1 = __AMD("extensions/adapt-resourcePopup/js/resourcePopupBtnView", ResourcePopupBtnView);

  var helpers$2 = {
    resourcePopup: function (resourceId, context) {
      var componentView = this.view;
      if (this.view.model.get("_type") != "component") componentView = Adapt.findViewByModelId(this.view.model.get("_parent").get("_id"));
      var resourcePopup = componentView.model.get("_resourcePopup");

      if (!resourcePopup) {
        throw componentView.model.get("_id") + " component uses a _resourcePopup, but has not defined it as a partial.";
      }

      var _uniqueId = _.uniqueId("resourcepopup");

      var btnHTML = "<div class='resourcepopup-btn-container' data-resourcepopup-id='" + _uniqueId + "'></div>";

      _.debounce(function () {
        var modelJSON = _.find(resourcePopup._items, function (item) {
          return item._id == resourceId;
        });

        if (!modelJSON) {
          throw componentView.model.get("_id") + " component could not find _resourcePopup item with \"_id\": \"" + resourceId + "\".";
        }

        modelJSON = _.extend(modelJSON, {
          buttonText: context.fn(),
          _id: _uniqueId,
          _parentView: componentView
        });
        var $btnContainer = componentView.$("[data-resourcepopup-id='" + _uniqueId + "']");
        $btnContainer.html(new ResourcePopupBtnView$1({
          model: new Backbone.Model(modelJSON)
        }).$el);
      })();

      return new Handlebars__default['default'].SafeString(btnHTML);
    }
  };

  for (var name$2 in helpers$2) {
    if (helpers$2.hasOwnProperty(name$2)) {
      Handlebars__default['default'].registerHelper(name$2, helpers$2[name$2]);
    }
  }

  var SCROLL_MARGIN = 48;
  var SCROLL_DURATION = 400;
  var isScrolling = false;
  var scrollPriority = -Infinity;
  Adapt.scrollfix = {};
  Adapt.on("offlineStorage:prepare", function () {
    if (/Mobi|Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
      Adapt.log.info("adapt-scrollfix.js: Mobile device detected.");
      $("html").addClass('device-mobile');
      return;
    }
  });
  Adapt.on("app:dataReady", function () {
    overrideNavigateToElement();
    overridePreventScroll();
    Adapt.navigateToRelOffset = navigateToRelOffset;
  });
  var disableA11yPreventScroll = false;

  function overridePreventScroll() {
    var _preventScroll = Adapt.a11y._scroll._preventScroll;

    Adapt.a11y._scroll._preventScroll = function () {
      if (disableA11yPreventScroll) return;
      return _preventScroll.apply(Adapt.a11y._scroll, arguments);
    };

    Adapt.scrollfix.disableA11yScroll = function () {
      disableA11yPreventScroll = true;
    };

    Adapt.scrollfix.enableA11yScroll = function () {
      disableA11yPreventScroll = false;
    };
  }

  function navigateToRelOffset(offset, settings) {
    var $target = $("<div class='scrollfix__target'>");
    $("#app").append($target);
    $target.offset({
      top: offset.top ? $(window).scrollTop() + offset.top : undefined,
      left: offset.left ? $(window).scrollLeft() + offset.left : undefined
    });

    var s = _.extend({
      offset: {
        top: 0,
        left: 0
      },
      ignoreNav: true
    }, settings);

    Adapt.navigateToElement($target, s);
    $target.remove();
  }

  function overrideNavigateToElement() {
    var _navigateToElement = Adapt.navigateToElement;

    Adapt.navigateToElement = function (selector, settings) {
      if (Adapt.isPDFMode()) return;
      settings.priority = settings.priority || 0;

      if (!isScrolling) {
        scrollPriority = settings.priority;
      } else {
        if (settings.priority < scrollPriority) return;
        scrollPriority = settings.priority;
      }

      if (!settings) settings = {};
      if (settings.duration === undefined) settings.duration = SCROLL_DURATION;
      if (settings.offset === undefined) settings.offset = {
        top: -SCROLL_MARGIN,
        left: 0
      };
      if (settings.fail === undefined) settings.fail = onScrollFail;

      if (settings.onAfter === undefined) {
        settings.onAfter = onScrollAfter;
      } else {
        var onAfter = settings.onAfter;

        settings.onAfter = function () {
          onAfter();
          onScrollAfter();
        };
      }

      if (!settings.ignoreNav && Adapt.device.screenSize !== 'large') {
        settings.offset.top -= $(".nav").height();
      }

      var $obj = $();

      var uniqueId = _.uniqueId("scrollfix");

      if (selector instanceof jQuery) {
        $obj = selector.addClass(uniqueId);
        selector = "." + uniqueId;
        arguments[0] = selector;
      }

      var scrollNestedCallback = undefined;

      if (settings.scrollNested === true) {
        var $scrollParent = $obj.scrollParent();
        var scrollParentId = $scrollParent.attr("id");

        if (scrollParentId != "adapt" && scrollParentId != "app" && !$scrollParent.hasClass("notify__popup")) {
            var scrollTop = $scrollParent.scrollTop();
            $scrollParent.scrollTo($obj, {
              axis: 'y',
              duration: 0
            });

            scrollNestedCallback = function () {
              var destScrollTop = $scrollParent.scrollTop();
              $scrollParent.scrollTop(scrollTop);
              $scrollParent.scrollTo(destScrollTop, {
                axis: 'y',
                duration: SCROLL_DURATION
              });
            };
          }
      }

      var cleanup = function () {
        if (scrollNestedCallback) scrollNestedCallback();
        $obj.removeClass(uniqueId);
      };

      if (settings.align == "inview") {
        var inview = getElementInview(selector, settings.offset);

        if (inview.inview === 0) {
          cleanup();
          onScrollAfter();
          return;
        }

        $obj.removeClass(uniqueId);
        inview.$topObj.addClass(uniqueId);

        if (inview.inview === 1) {
          settings.offset.top = -Adapt.device.screenHeight + inview.height + SCROLL_MARGIN;

          if (_useIphoneFix()) {
            settings.offset.top += SCROLL_MARGIN * 2;
          }
        }
      }

      if ($obj.closest(".notify").length && settings.notifyEnabled === true) {
        $(".notify__popup").scrollTo($obj, _.extend(settings, {
          axis: 'y',
          duration: SCROLL_DURATION
        }));
      } else {
          _navigateToElement.apply(this, arguments);
        }

      isScrolling = true;
      cleanup();
    };
  }

  function onScrollFail() {
    isScrolling = false;
    scrollPriority = -Infinity;
  }

  function onScrollAfter() {
    isScrolling = false;
    scrollPriority = -Infinity;
  }

  function getScreenTop() {
    if (Adapt.device.screenSize === 'small') {
      return SCROLL_MARGIN + $(".nav").height();
    }

    return SCROLL_MARGIN;
  }

  function _useIphoneFix() {
    return $("html").hasClass("iphone");
  }

  function getScreenBottom() {
    if (_useIphoneFix()) {
      return Adapt.device.screenHeight - SCROLL_MARGIN * 3;
    }

    return Adapt.device.screenHeight - SCROLL_MARGIN;
  }

  function getElementInview(selector, offset) {
    var $obj = $(selector);

    if (!$obj.length) {
      Adapt.log.error("adapt-scrollfix.getElementInview() could not find any elements with the provided selector: " + selector);
      return;
    }

    var bbs = [];
    $obj.each(function (i, e) {
      if ($(e).hasClass("component")) {
          var componentView = Adapt.findViewByModelId($(e).data("adapt-id"));

          if (componentView.getBoundingClientRect) {
            var bb = componentView.getBoundingClientRect();
            bb.$obj = $(e);
            bbs.push(bb);
          } else {
            var _bb = $(e)[0].getBoundingClientRect();

            _bb.$obj = $(e);
            bbs.push(_bb);
          }
        } else {
          var _bb2 = $(e)[0].getBoundingClientRect();

          _bb2.$obj = $(e);
          bbs.push(_bb2);
        }
    });
    var minTop = Infinity;
    var maxBottom = -Infinity;
    var $topObj = $obj.first();

    _.each(bbs, function (bb) {
      if (bb.top < minTop) {
        minTop = bb.top;
        $topObj = bb.$obj;
      }

      if (bb.bottom > maxBottom) {
        maxBottom = bb.bottom;
      }
    });

    var screenTop = getScreenTop() - 1;
    var screenBottom = getScreenBottom() + 1;
    var inview = 0;
    var height = maxBottom - minTop;

    if (offset.height !== undefined) {
      height = Math.max(height, offset.height);
    }

    if (maxBottom - minTop > screenBottom - screenTop) {
      inview = -1;
    } else {
      if (maxBottom > screenBottom) inview = 1;
      if (minTop < screenTop) inview = -1;
    }

    return {
      inview: inview,
      height: height,
      $topObj: $topObj
    };
  }

  var Sizing = function (_Backbone$Controller) {
    _inherits(Sizing, _Backbone$Controller);

    var _super = _createSuper(Sizing);

    function Sizing() {
      _classCallCheck(this, Sizing);

      return _super.apply(this, arguments);
    }

    _createClass(Sizing, [{
      key: "initialize",
      value: function initialize() {
        Adapt.on("componentView:postRender", this.componentViewPostRender.bind(this));
      }
    }, {
      key: "componentViewPostRender",
      value: function componentViewPostRender(componentView) {
        var sizing = componentView.model.get("_sizing");
        if (!sizing || sizing._isEnabled === false) return;
        componentView.$el.addClass(this.getSizingClasses(sizing));
      }
    }, {
      key: "_validateProperty",
      value: function _validateProperty(sizingObj, propName, isBoolValid) {
        var prop = sizingObj[propName];
        if (prop === undefined || prop === "" || isBoolValid && prop === false) return false;
        if (prop == "auto") return true;

        if (isNaN(prop) && (isBoolValid ? typeof prop !== "boolean" : true) || prop <= 0 || prop > 12) {
          Adapt.log.error("Invalid value provided for _sizing." + propName + ": " + prop + "\n(value must be: [1-12|\"auto\"]" + (isBoolValid ? " | true | false" : "") + ").");
          return false;
        }

        return true;
      }
    }, {
      key: "_getSizingObj",
      value: function _getSizingObj(sizing) {
        if (!sizing) return {};
        if (Array.isArray(sizing)) return {
          _width: sizing[0],
          _maxWidth: sizing[1]
        };
        if (_typeof(sizing) === "object") return sizing;
        if (typeof sizing === "number") return {
          _width: sizing
        };

        if (typeof sizing === "string") {
          if (sizing.match(/^![0-9]+$/g)) {
            sizing = sizing.substring(1);
            if (!isNaN(sizing)) return {
              _width: parseInt(sizing),
              _maxWidth: false
            };else {
              Adapt.log.error("adapt-sizing: 'sizing' parameter provided does not match any of the accepted formats.\n\nSizing value provided: " + JSON.stringify(sizing));
            }
          }

          return {
            _width: isNaN(sizing) ? sizing : parseInt(sizing)
          };
        }

        Adapt.log.error("adapt-sizing: 'sizing' parameter provided does not match any of the accepted formats.\n\nSizing value provided: " + JSON.stringify(sizing));
      }
    }, {
      key: "getSizingClasses",
      value: function getSizingClasses(sizing) {
        sizing = this._getSizingObj(sizing);
        var classNames = [];
        classNames.push("col");
        classNames.push(this._validateProperty(sizing, "_width", false) ? "col-" + sizing._width : undefined);

        if (sizing._maxWidthInner !== undefined) {
          classNames.push("col-maxwidth-inner");

          if (sizing._maxWidth === undefined || !isNaN(sizing._maxWidthInner)) {
            sizing._maxWidth = sizing._maxWidthInner;
          }
        }

        if (sizing._maxWidth === undefined) {
          sizing._maxWidth = sizing._width == "auto" ? false : sizing._width !== undefined;
        } else if (sizing._maxWidth === true && sizing._width === undefined) {
          sizing._width = 6;
        }

        classNames.push(this._validateProperty(sizing, "_maxWidth", true) ? "col-maxwidth" + (sizing._maxWidth === true ? "" : "-" + sizing._maxWidth) : undefined);
        if (sizing._minWidth === undefined) sizing._minWidth = false;
        classNames.push(this._validateProperty(sizing, "_minWidth", true) ? "col-minwidth" + (sizing._minWidth === true ? "" : "-" + sizing._minWidth) : undefined);

        if (sizing._float) {
          classNames.push("col-float");

          switch (sizing._float) {
            case "left":
              classNames.push("col-float-left");
              break;

            default:
              classNames.push("col-float-right");
          }
        }

        return classNames.join(" ").trim();
      }
    }, {
      key: "getSizingGridClasses",
      value: function getSizingGridClasses(sizing) {
        var classNames = [];
        classNames.push(this._validateProperty(sizing, "_maxCols", false) ? "sg-maxcols-" + sizing._maxCols : undefined);
        classNames.push(this._validateProperty(sizing, "_width", false) ? "sg-cols-" + sizing._width : undefined);
        return classNames.join(" ").trim();
      }
    }, {
      key: "setUpGridListeners",
      value: function setUpGridListeners($grid) {
        var _this = this;

        if (!$grid.length) {
          Adapt.log.error("adapt-sizing: Could not initialize $grid listeners ($grid element not found).");
          return;
        }

        Adapt.on("device:resize", function () {
          _this.updateGridEl($grid);
        });

        _.delay(function () {
          _this.updateGridEl($grid);
        });
      }
    }, {
      key: "updateGridEl",
      value: function updateGridEl($grid) {
        var $items = $grid.children();
        $items.removeClass(function (idx, className) {
          return (className.match(/(^|\s)sg-orphan-\S+/g) || []).join(' ');
        });
        var columnGap = parseInt($grid.css("column-gap"), 10);
        var THRESHOLD = columnGap / 2;
        var gridWidth = $grid.outerWidth();
        var itemWidth = $items.first().outerWidth();
        var itemCount = $items.length;
        var w = -columnGap;
        var columnCount = 0;

        while (Math.round(w) < gridWidth - THRESHOLD) {
          w += itemWidth + columnGap;
          columnCount++;
        }

        var orphanCount = itemCount % columnCount;
        if (orphanCount == 0) return;
        $items.eq(itemCount - orphanCount).addClass("sg-orphan-" + (columnCount - orphanCount));
      }
    }, {
      key: "getParentClasses",
      value: function getParentClasses(sizing) {
        sizing = this._getSizingObj(sizing);
        var classNames = [];

        if (Boolean(sizing._float)) {
          classNames.push("par-contains-float");
          classNames.push("u-clearfix");
        } else {
          classNames.push("par-contains-flex");
        }

        return classNames.join(" ").trim();
      }
    }, {
      key: "getSizingClass",
      value: function getSizingClass() {
        return this.getSizingClasses.apply(this, arguments);
      }
    }, {
      key: "hasFloatingChildren",
      value: function hasFloatingChildren(sizing) {
        return Boolean(sizing._float);
      }
    }, {
      key: "hasFloat",
      value: function hasFloat() {
        return this.hasFloatingChildren.apply(this, arguments);
      }
    }]);

    return Sizing;
  }(Backbone.Controller);

  var sizing = new Sizing();
  Adapt.sizing = sizing;

  var MODE = __AMD("extensions/adapt-stickyBlock/js/modeEnum", new ENUM(['SMALL', 'LARGE']));

  var componentInviewThreshold = 85;

  var StickyBlockView = function (_Backbone$View) {
    _inherits(StickyBlockView, _Backbone$View);

    var _super = _createSuper(StickyBlockView);

    function StickyBlockView() {
      _classCallCheck(this, StickyBlockView);

      return _super.apply(this, arguments);
    }

    _createClass(StickyBlockView, [{
      key: "className",
      value: function className() {
        var _this$model$get$_time;

        var classes = ["stickyblock", "layout-" + (this.model.get("_stickyBlock")._layout || "left"), (_this$model$get$_time = this.model.get("_stickyBlock")._timeline) !== null && _this$model$get$_time !== void 0 && _this$model$get$_time._isEnabled ? "has-timeline" : ""];
        return classes.join(" ");
      }
    }, {
      key: "events",
      value: function events() {}
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpModelData();
        this.setUpEventListeners();
        this.render();
        this.setUpIntersectionObserver();
        this.setUpTimeline();
      }
    }, {
      key: "setUpTimeline",
      value: function setUpTimeline() {
        var _this$model$get$_time2;

        if (!((_this$model$get$_time2 = this.model.get("_stickyBlock")._timeline) !== null && _this$model$get$_time2 !== void 0 && _this$model$get$_time2._isEnabled)) return;
        this.getStaticChildren().each(function (childModel) {
          var _childModel$get, _childModel$get$_time;

          var timelineTitle = (_childModel$get = childModel.get("_stickyBlock")) === null || _childModel$get === void 0 ? void 0 : (_childModel$get$_time = _childModel$get._timeline) === null || _childModel$get$_time === void 0 ? void 0 : _childModel$get$_time.title;

          if (timelineTitle) {
            childModel.get("_componentRow").set("_divider", {
              title: timelineTitle,
              _classes: "is-stickyblock-timeline-divider"
            });
          }
        });
      }
    }, {
      key: "setUpIntersectionObserver",
      value: function setUpIntersectionObserver() {
        var _this = this;

        var stickyColObserver = new IntersectionObserver(function (entries) {
          entries.forEach(_this.onStickyColIntersection.bind(_this));
        }, {
          root: null,
          rootMargin: '-1px 0px 0px 0px',
          threshold: [0.9]
        });
        stickyColObserver.observe(this.$(".stickyblock__col.is-sticky")[0]);
        var stickyBlockObserver = new IntersectionObserver(function (entries) {
          entries.forEach(_this.onIntersection.bind(_this));
        }, {
          root: null,
          rootMargin: '0px',
          threshold: [0]
        });
        stickyBlockObserver.observe(this.$el[0]);
      }
    }, {
      key: "onStickyColIntersection",
      value: function onStickyColIntersection(entry) {
        this.model.set("_isStickyColInview", entry.isIntersecting);
        if (!entry.isIntersecting) return;
        this.triggerStickyChildInview(true, entry.intersectionRect.top <= 2 ? this.model.get("_stickyBlock")._children.static.length - 1 : 0);
      }
    }, {
      key: "onIntersection",
      value: function onIntersection(entry) {
        var staticChildren = this.getStaticChildren();

        if (entry.isIntersecting) {
          this.model.get("_stickyBlock")._isInview = true;

          if (entry.boundingClientRect.top < 0) {
            staticChildren.last().set("_stickyBlockStaticChildInview", true);
          } else {
              staticChildren.first().set("_stickyBlockStaticChildInview", true);
            }
        } else {
            this.model.get("_stickyBlock")._isInview = false;
            this.getStickyChildren().each(function (childModel) {
              childModel.trigger("stickyBlock:outview");
            });
          }
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        this.model.get("_stickyBlock");

        var _layout = "left";
        var c = {};
        c["left"] = [];
        c["right"] = [];
        var blockComponentRow = this.model.get("_componentRow");
        blockComponentRow.get("_children").each(function (componentRow) {
          var _children = componentRow.get("_children");

          var child0;
          var child1;

          if (_children.length !== 2) {
            child0 = _children.models[0];

            var layout = _children.models[0].get("_layout");

            layout = layout == "left" ? "right" : "left";
            child1 = c[layout][c[layout].length - 1];
          } else {
            child0 = _children.models[0];
            child1 = _children.models[1];
          }

          var layout0 = child0.get("_layout");
          var layout1 = child1.get("_layout");

          if (layout0 != "left" && layout0 != "right") {
            throw "_stickyBlock can't have a component with \"_layout\": \"" + _layout0 + "\"";
          }

          if (layout1 != "left" && layout1 != "right") {
            throw "_stickyBlock can't have a component with \"_layout\": \"" + _layout0 + "\"";
          }

          if (!child0.get("_stickyBlockSiblings")) child0.set("_stickyBlockSiblings", new Backbone.Collection());
          if (!child1.get("_stickyBlockSiblings")) child1.set("_stickyBlockSiblings", new Backbone.Collection());
          child0.get("_stickyBlockSiblings").push(child1);
          child1.get("_stickyBlockSiblings").push(child0);
          if (child0.get("_stickyBlockIndex") === undefined) child0.set("_stickyBlockIndex", componentRow.get("_index"));
          if (child1.get("_stickyBlockIndex") === undefined) child1.set("_stickyBlockIndex", componentRow.get("_index"));
          c[layout0].push(child0);
          c[layout1].push(child1);
        });
        c.left = new Backbone.Collection(c.left);
        c.right = new Backbone.Collection(c.right);
        c.static = c[_layout];
        c.sticky = c["right"];

        var _sizing = this.model.get("_sizing");

        _.each(c.sticky.models, function (model) {
          var modelSizing = model.get("_sizing");
          modelSizing = _.extend({}, _sizing, _sizing ? {
            _maxWidth: _sizing._maxWidth === true ? _sizing._width : _sizing._maxWidth
          } : {}, modelSizing);
          model.set("_sizing", modelSizing);
        });

        this.model.get("_componentRow").get("_children").each(function (componentRow) {
          componentRow.set("_isSingle", false);
        });
        this.model.get("_stickyBlock")._children = c;
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model.getChildren(), {
          "change:_stickyBlockStaticChildInview": this.onStaticChildInviewChange.bind(this),
          "change:_isVisible": this.onChildVisibleChange.bind(this)
        });
        this.listenToOnce(this.model, "blockView:childrenReady", this.onChildrenReady.bind(this));
      }
    }, {
      key: "onChildrenReady",
      value: function onChildrenReady() {
        this.listenTo(Adapt, {
          'device:changed': this.onDeviceChanged
        });
        this.listenTo(this.model, "change:_mode", this.reRender);
        this.calculateMode();
      }
    }, {
      key: "calculateMode",
      value: function calculateMode() {
        var mode = Adapt.device.screenSize === 'large' ? MODE.LARGE : MODE.SMALL;
        this.model.set('_mode', mode);
      }
    }, {
      key: "onDeviceChanged",
      value: function onDeviceChanged(width) {
        this.calculateMode();
      }
    }, {
      key: "onChildVisibleChange",
      value: function onChildVisibleChange(model, isVisible) {
        var $child = Adapt.findViewByModelId(model.get("_id")).$el;
        $child.closest(".js-stickyblock-item").toggleClass("is-visible", isVisible).toggleClass("is-hidden", !isVisible);
      }
    }, {
      key: "reRender",
      value: function reRender(model, mode) {
        if (!this.isLargeMode()) {
          this.renderModeSmall();
          return;
        }

        this.renderModeLarge();
        Adapt.trigger('device:resize');
        Adapt.trigger('device:changed');
      }
    }, {
      key: "removeClones",
      value: function removeClones() {
        var $block = this.$el.closest(".block");
        $block.find(".js-stickyblock-clone").remove();
      }
    }, {
      key: "renderModeSmall",
      value: function renderModeSmall() {
        var _this2 = this;

        var $container = Adapt.findViewByModelId(this.model.get("_id")).$(".component__container");
        this.model.getChildren().each(function (model) {
          var view = Adapt.findViewByModelId(model.get("_id"));
          model.set("_isVisible", true);
          $container.append(view.$el);

          _this2.removeChildInview(view);

          view.$el.attr("data-stickyblock-index", model.get("_stickyBlockIndex"));
        });
        this.$el.hide(0);
        this.removeClones();
        this.model.get("_componentRow").set("_isEnabled", true);
        var $block = this.$el.closest(".block");
        this._cloneModels = new Backbone.Collection();
        this.model.get("_componentRow").get("_children").each(function (componentRow) {
          if (componentRow.getChildren().length != 1) return;
          var componentRowIndex = componentRow.get("_index");
          var staticChild = componentRow.getChildren().first();
          var stickyChild = staticChild.get("_stickyBlockSiblings").first();
          var view = Adapt.getViewClass(stickyChild.get("_component"));

          _.each(Adapt.stickyBlock.getResetOnReRender(), function (propertyName) {
            stickyChild.set(propertyName, null);
          });

          var cloneModel = stickyChild.clone();

          _this2._cloneModels.push(cloneModel);

          var cloneView = new view({
            model: cloneModel
          });
          var $componentRow = $block.find(".componentrow").filter("[data-componentrow-index=" + componentRowIndex + "]");
          cloneView.isClone = true;
          var $container = $componentRow.find(".js-componentrow-items");
          cloneView.$el.addClass("js-stickyblock-clone").attr("data-adapt-id", cloneModel.get("_id") + "--stickyblock-clone").attr("data-stickyblock-index", staticChild.get("_stickyBlockIndex"));
          var cr = cloneModel.get("_componentRow");
          var originalIndex = cr.getChildren().indexOf(cloneModel);

          if (originalIndex == 0) {
            $container.prepend(cloneView.$el);
          } else {
            $container.append(cloneView.$el);
          }
        });
        Adapt.log.info("StickyBlock: Cleared component properties on reRender: [".concat(Adapt.stickyBlock.getResetOnReRender().join(","), "]"));

        _.delay(function () {
          _this2.getStickyChildren().each(function (stickyChild) {
            stickyChild.trigger("stickyBlock:inview");
          });

          _this2._cloneModels.each(function (model) {
            model.trigger("stickyBlock:inview");
          });
        }, 0);

        return;
      }
    }, {
      key: "renderModeLarge",
      value: function renderModeLarge() {
        var _this3 = this;

        this.removeClones();
        this.$el.show(0);
        this.model.get("_componentRow").set("_isEnabled", false);
        var staticChildren = this.getStaticChildren();
        var viewportHeight = window.innerHeight;
        var scrollTop = window.scrollY;
        var onscreenView = undefined;
        this.model.getChildren().each(function (model, i) {
          var _id = model.get("_id");

          var view = Adapt.findViewByModelId(_id);

          _this3.$(".js-stickyblock-item." + _id).find(".stickyblock__item-inner").append(view.$el);

          view.$el.attr("data-stickyblock-index", model.get("_stickyBlockIndex"));

          if (staticChildren.includes(model)) {
            _this3.initChildInview(view);

            model.set("_stickyBlockStaticChildInview", false);
            var bb = view.$el[0].getBoundingClientRect();
            var offsetTop = bb.top;
            var height = bb.height;
            var inviewTop = scrollTop + viewportHeight - offsetTop;
            var inviewPercent = inviewTop / ((viewportHeight + height) / 100);
            view.inviewPercent = inviewPercent;

            if (onscreenView == undefined || Math.abs(view.inviewPercent) < Math.abs(onscreenView.inviewPercent)) {
              onscreenView = view;
            }
          } else {
              model.set("_isVisible", false);
            }
        });
        onscreenView.model.set("_stickyBlockStaticChildInview", true);
      }
    }, {
      key: "isLargeMode",
      value: function isLargeMode() {
        return Adapt.device.screenSize === "large";
      }
    }, {
      key: "getStickyBlockData",
      value: function getStickyBlockData() {
        return this.model.get("_stickyBlock");
      }
    }, {
      key: "getStaticChildren",
      value: function getStaticChildren() {
        return this.getStickyBlockData()._children.static;
      }
    }, {
      key: "getStickyChildren",
      value: function getStickyChildren() {
        return this.getStickyBlockData()._children.sticky;
      }
    }, {
      key: "initChildInview",
      value: function initChildInview(view) {
        view.$el.on('onscreen.stickyBlockView', function (event, m) {
          var threshold = componentInviewThreshold;

          if (m.percentFromTop < threshold && m.percentFromBottom < threshold) {
            view.model.set("_stickyBlockStaticChildInview", true);
          }
        });
      }
    }, {
      key: "removeChildInview",
      value: function removeChildInview(view) {
        view.$el.off("onscreen.stickyBlockView");
      }
    }, {
      key: "remove",
      value: function remove() {
        var _this4 = this;

        this.getStaticChildren().each(function (model) {
          _this4.removeChildInview(Adapt.findViewByModelId(model.get("_id")));
        });
        Backbone.View.remove.apply(this, arguments);
      }
    }, {
      key: "getActiveStaticChild",
      value: function getActiveStaticChild() {
        return this.getStaticChildren().find(function (childModel) {
          return childModel.get("_stickyBlockStaticChildInview");
        });
      }
    }, {
      key: "triggerStickyChildInview",
      value: function triggerStickyChildInview(isInview, staticChildIndex) {
        if (!this.model.get("_isStickyColInview")) return;
        var activeStaticChild = this.getActiveStaticChild();
        if (!activeStaticChild) return;
        activeStaticChild.get("_stickyBlockSiblings").each(function (model) {
          var view = Adapt.findViewByModelId(model.get("_id"));
          view.$el.attr("data-stickyblock-index", staticChildIndex);
          model.trigger("stickyBlock:inview", staticChildIndex);
        });
      }
    }, {
      key: "onStaticChildInviewChange",
      value: function onStaticChildInviewChange(childModel, isInview) {
        childModel.get("_stickyBlockSiblings").each(function (model) {
          var isVisible = false;
          model.get("_stickyBlockSiblings").find(function (staticChildModel) {
            if (staticChildModel.get("_stickyBlockStaticChildInview")) {
              isVisible = true;
              return;
            }
          });
          model.set("_isVisible", isVisible);
        });
        if (!isInview) return;
        Adapt.trigger("annotation:toggle");
        this.model.get("_stickyBlock").activeItem = childModel;

        _.each(this.getStaticChildren().models, function (model) {
          if (childModel == model) return;
          model.set("_stickyBlockStaticChildInview", false);
        });

        this.triggerStickyChildInview(isInview, childModel.get("_stickyBlockIndex"));
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates['stickyBlock'];
        var data = this.model.toJSON();
        data._stickyBlock._children.left = data._stickyBlock._children.left.toJSON();
        data._stickyBlock._children.right = data._stickyBlock._children.right.toJSON();
        this.$el.html(template(data));
      }
    }]);

    return StickyBlockView;
  }(Backbone.View);
  var StickyBlockView$1 = __AMD("extensions/adapt-stickyBlock/js/stickyBlockView", StickyBlockView);

  var StickyBlockEpubView = function (_StickyBlockView) {
    _inherits(StickyBlockEpubView, _StickyBlockView);

    var _super = _createSuper(StickyBlockEpubView);

    function StickyBlockEpubView() {
      _classCallCheck(this, StickyBlockEpubView);

      return _super.apply(this, arguments);
    }

    _createClass(StickyBlockEpubView, [{
      key: "className",
      value: function className() {
        var classes = _get(_getPrototypeOf(StickyBlockEpubView.prototype), "className", this).call(this);

        return classes + " is-epub-stickyblock";
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.model.get("_stickyBlock")._isEpubMode = true;

        _get(_getPrototypeOf(StickyBlockEpubView.prototype), "initialize", this).call(this);
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        _get(_getPrototypeOf(StickyBlockEpubView.prototype), "setUpEventListeners", this).call(this);

        this.listenTo(this.model, "change:_epubHelperInview", this.onEpubHelperInviewChange);
      }
    }, {
      key: "render",
      value: function render() {
        _get(_getPrototypeOf(StickyBlockEpubView.prototype), "render", this).call(this);

        var $inviewHelper = $("<div>", {
          class: "stickyblock__epub-inview-helper"
        });
        var $blockPar = Adapt.findViewByModelId(this.model.get("_id")).$el;
        $blockPar.append($inviewHelper);
        this.$inviewHelper = $inviewHelper;
        this.setEpubHelperInview(false, true);
      }
    }, {
      key: "setEpubHelperInview",
      value: function setEpubHelperInview(isInview, isTop) {
        if (isInview) {
          this.model.set("_epubHelperInview", "inview" + (isTop ? "Top" : "Bottom"));
        } else {
          this.model.set("_epubHelperInview", "outview" + (isTop ? "Top" : "Bottom"));
        }
      }
    }, {
      key: "onEpubIntersection",
      value: function onEpubIntersection(entry) {
        if (!this.isLargeMode()) return;
        if (!entry.rootBounds) return;
        var isIntersecting = entry.isIntersecting;

        if (isIntersecting) {
          var isBottom = entry.boundingClientRect.top <= 0;
          this.setEpubHelperInview(true, !isBottom);
        } else {
          var _isBottom = entry.boundingClientRect.bottom <= 0;

          this.setEpubHelperInview(false, !_isBottom);
        }
      }
    }, {
      key: "_isInview",
      value: function _isInview() {
        return Boolean(this.model.get("_epubHelperInview").match(/^inview/g));
      }
    }, {
      key: "_isTop",
      value: function _isTop() {
        return Boolean(this.model.get("_epubHelperInview").match(/Top$/g));
      }
    }, {
      key: "initEpubHelperInview",
      value: function initEpubHelperInview() {
        var _this = this;

        this._isEpubHelperInview = undefined;
        this.$inviewHelper.on('inview.stickyBlockHelper', function (event, isInview) {
          if (!_this.isLargeMode()) return;
          if (_this._isInview() === isInview) return;

          var helperBB = _this.$inviewHelper[0].getBoundingClientRect();

          if (isInview) {
            var isBottom = helperBB.top <= 0;

            _this.setEpubHelperInview(true, !isBottom);
          } else {
            var _isBottom2 = helperBB.bottom <= 0;

            _this.setEpubHelperInview(false, !_isBottom2);
          }
        });
      }
    }, {
      key: "removeEpubHelperInview",
      value: function removeEpubHelperInview() {
        this.$(".stickyblock__epub-inview-helper").off("inview.stickyBlockHelper");
      }
    }, {
      key: "renderModeSmall",
      value: function renderModeSmall() {
        this.removeEpubHelperInview();

        _get(_getPrototypeOf(StickyBlockEpubView.prototype), "renderModeSmall", this).call(this);
      }
    }, {
      key: "renderModeLarge",
      value: function renderModeLarge() {
        _get(_getPrototypeOf(StickyBlockEpubView.prototype), "renderModeLarge", this).call(this);

        this.initEpubHelperInview();
      }
    }, {
      key: "remove",
      value: function remove() {
        _get(_getPrototypeOf(StickyBlockEpubView.prototype), "remove", this).call(this);

        this.removeEpubHelperInview();
      }
    }, {
      key: "onEpubHelperInviewChange",
      value: function onEpubHelperInviewChange(model, epubHelperInview) {
        Adapt.log.debug("StickyBlockEpubView: " + epubHelperInview);
        var staticChildren = this.getStaticChildren();

        var isInview = this._isInview();

        var isBottom = !this._isTop();
        var $componentContainer = this.$(".js-stickyblock-epub-component-container");
        var fromTop = $componentContainer[0].getBoundingClientRect().top;
        this.$el.toggleClass("is-epub-stuck", isInview).toggleClass("is-epub-free", !isInview);

        if (isInview) {
          if (isBottom) {
            staticChildren.last().set("_stickyBlockStaticChildInview", true);
            this.triggerStickyChildInview(true, staticChildren.length - 1);
          } else {
              staticChildren.first().set("_stickyBlockStaticChildInview", true);
              this.triggerStickyChildInview(true, 0);
            }
        }

        if (!isInview) {
          this.$el.toggleClass("is-top", !isBottom).toggleClass("is-bottom", isBottom);
        }

        var toTop = $componentContainer[0].getBoundingClientRect().top;
        var topDiff = fromTop - toTop;
        var $epubBlock = this.$(".js-stickyblock-epub-block");
        $epubBlock.css("transform", "translateY(" + topDiff + "px)").hide(0).show(0);
        $epubBlock.css("transform", "translateY(0px)");
      }
    }]);

    return StickyBlockEpubView;
  }(StickyBlockView$1);
  var StickyBlockEpubView$1 = __AMD("extensions/adapt-stickyBlock/js/stickyBlockEpubView", StickyBlockEpubView);

  Adapt.on("app:dataReady", function () {
    Adapt.blocks.each(function (model) {
      var _stickyBlock = model.get("_stickyBlock");

      if (!_stickyBlock || _stickyBlock._isEnabled === false) return;

      var _componentRow = model.get("_componentRow");

      model.set("_componentRow", _.extend(_componentRow || {}, {
        _isEnabled: false
      }));
    });
  });
  Adapt.on("blockView:postRender", function (blockView) {
    var blockModel = blockView.model;

    var _stickyBlock = blockModel.get("_stickyBlock");

    if (!_stickyBlock || _stickyBlock._isEnabled === false) return;
    blockView.$el.addClass("is-stickyblock");
    var view = StickyBlockView$1;
    if (Adapt.isEpubMode()) view = StickyBlockEpubView$1;
    blockView.$(".component__container").append(new view({
      model: blockModel
    }).$el);
  });

  $.fn.getParentStickyBlockIndex = function () {
    var $component = $(this).closest(".component");
    if (!$component.length) Adapt.log.error("$.fn.getStickyBlockIndex(): could not find closest \".component\" for selector:", $(this));
    return $component.attr("data-stickyblock-index");
  };

  var StickyBlock = function (_Backbone$Controller) {
    _inherits(StickyBlock, _Backbone$Controller);

    var _super = _createSuper(StickyBlock);

    function StickyBlock() {
      _classCallCheck(this, StickyBlock);

      return _super.apply(this, arguments);
    }

    _createClass(StickyBlock, [{
      key: "initialize",
      value: function initialize() {
        this._resetOnReRender = [];
        this.inviewEvent = "stickyBlock:inview";
      }
    }, {
      key: "addResetOnReRender",
      value: function addResetOnReRender(propertyName) {
        this._resetOnReRender.push(propertyName);

        this._resetOnReRender = _.uniq(this._resetOnReRender);
      }
    }, {
      key: "getResetOnReRender",
      value: function getResetOnReRender() {
        return this._resetOnReRender;
      }
    }]);

    return StickyBlock;
  }(Backbone.Controller);

  Adapt.stickyBlock = new StickyBlock();

  var StickyElementAttributeClasses = {
    "data-stickyelement-active-idx": "is-se-active",
    "data-stickyelement-mark-idx": "is-se-mark",
    "data-stickyelement-hide-idx": "is-se-hide",
    "data-stickyelement-fold-idx": "is-se-fold",
    "data-stickyelement-slideleft-idx": "is-se-slideleft",
    "data-stickyelement-slidedown-idx": "is-se-slidedown"
  };

  var StickyElementItemView = function (_Backbone$View) {
    _inherits(StickyElementItemView, _Backbone$View);

    var _super = _createSuper(StickyElementItemView);

    function StickyElementItemView() {
      _classCallCheck(this, StickyElementItemView);

      return _super.apply(this, arguments);
    }

    _createClass(StickyElementItemView, [{
      key: "className",
      value: function className() {
        return "stickyelement u-visibility-hidden";
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          "data-stickyelement-id": this.model.get("_id"),
          "data-item-index": this.model.get("_componentItem").get("_index")
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _this = this;

        this._toggleCount = 0;
        this.setUpEventListeners();
        this.render();

        if (this.model.get("_isActive")) {
          this.onActiveChange(this.model, this.model.get("_isActive"));
        } else {
          _.delay(function () {
            _this.toggleAttributes(_this.$el, _this.model.get("_componentItemIndex"), _this._stickyBlockPrevIdx);
          }, 0);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates['stickyElement'];
        this.$el.html(new Handlebars.SafeString(template(this.model.toJSON())).string);
        this.postRender();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        _.delay(this.setUpScrolling.bind(this), 0);
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        if (this.model.get("_parentHasTransitions")) {
          this.onActiveChange = _.debounce(this.onActiveChange.bind(this), 0);
        }

        this.listenTo(this.model, "change:_isActive", this.onActiveChange);
        this.listenTo(this.model, "change:_componentItemIndex", this.onComponentItemIndexChange);
        this.listenTo(this.getParentModel(), "change:_itemScrollTop", this.synchronizeScrollTop.bind(this));
        this.listenTo(this.getParentModel(), "change:_itemScrollLeft", this.synchronizeScrollLeft.bind(this));
      }
    }, {
      key: "_isPropertyScrollable",
      value: function _isPropertyScrollable(propertyVal) {
        if (propertyVal == "auto" || propertyVal == "scroll") return true;
        return false;
      }
    }, {
      key: "synchronizeScrollLeft",
      value: function synchronizeScrollLeft(model, scrollLeft) {
        var _this$$scroll;

        if (!((_this$$scroll = this.$scroll) !== null && _this$$scroll !== void 0 && _this$$scroll.length)) return;
        this.$scroll[0].scrollLeft = scrollLeft;
      }
    }, {
      key: "synchronizeScrollTop",
      value: function synchronizeScrollTop(model, scrollTop) {
        var _this$$scroll2;

        if (!((_this$$scroll2 = this.$scroll) !== null && _this$$scroll2 !== void 0 && _this$$scroll2.length)) return;
        this.$scroll[0].scrollTop = scrollTop;
      }
    }, {
      key: "setUpScrolling",
      value: function setUpScrolling() {
        var _this2 = this;

        var found = false;
        this.$scroll = this.$("*").filter(function (i, e) {
          if (found) return;

          if (_this2._isPropertyScrollable($(e).css("overflow"))) {
            found = true;
            return true;
          }

          if (_this2._isPropertyScrollable($(e).css("overflow-x"))) {
            found = true;
            return true;
          }

          if (_this2._isPropertyScrollable($(e).css("overflow-y"))) {
            found = true;
            return true;
          }

          return false;
        }).first();
        if (!this.$scroll.length) return;
        this.$scroll.addClass("js-stickyelement-scroll");
        this.$scroll[0].addEventListener("scroll", _.debounce(function (event) {
          _this2.getParentModel().set("_itemScrollTop", event.target.scrollTop);

          _this2.getParentModel().set("_itemScrollLeft", event.target.scrollLeft);
        }, 100), {
          passive: true
        });
      }
    }, {
      key: "onComponentItemIndexChange",
      value: function onComponentItemIndexChange(model, itemIdx) {
        this._stickyBlockPrevIdx = model.previous("_componentItemIndex");
        this.onActiveChange(this.model, true);
      }
    }, {
      key: "onActiveChange",
      value: function onActiveChange(model, isActive, _force) {
        if (isActive) {
          this.$el.toggleClass("u-visibility-hidden", false);
        } else {
          if (this.$clone) this.$clone.remove();
        }

        this.$el.toggleClass("is-stickyelement-active", isActive);
        if (!isActive) return;
        var curCIndex = this.model.get("_componentItemIndex");
        this.$el.attr("data-stickyelement-curidx", curCIndex);
        var itemPrevModel = this.model.getItemPrev();

        if (!itemPrevModel) {
            this.toggleAttributes(this.$el, curCIndex, this._stickyBlockPrevIdx);
            return;
          }

        var prevCIndex = itemPrevModel.get("_componentItemIndex");
        if (curCIndex == prevCIndex) return;
        this.transitionFromEl(itemPrevModel.get("_view").$el, curCIndex, prevCIndex);
      }
    }, {
      key: "getActiveIdxs",
      value: function getActiveIdxs(attrString) {
        var itemsCount = this.model.getItemsCount();
        var inverted = false;

        if (attrString[0] == '!') {
          inverted = true;
          attrString = attrString.substring(1);
        }

        var _idxs = attrString.split(",");

        var idxs = [];

        _.each(_idxs, function (idx) {
          if (idx.includes("+")) {
            var from = idx.split("+")[0];

            for (var i = parseInt(from); i < itemsCount; i++) {
              idxs.push(i + "");
            }
          } else if (idx.includes("-")) {
              var _from = idx.split("-")[0];
              var to = idx.split("-")[1];

              for (var _i = parseInt(_from); _i <= parseInt(to); _i++) {
                idxs.push(_i + "");
              }
            } else {
                idxs.push(idx + "");
              }
        });

        if (!inverted) return idxs;
        var invertedIdxs = [];

        for (var i = 0; i < itemsCount; i++) {
          invertedIdxs.push(i + "");
        }

        invertedIdxs = _.filter(invertedIdxs, function (e) {
          return !_.contains(idxs, e);
        });
        return invertedIdxs;
      }
    }, {
      key: "toggleAttributes",
      value: function toggleAttributes($targetEl, curCIndex, prevCIndex) {
        var _this3 = this;

        var isStickyBlock = this.model.get("_isStickyBlock");

        _.each(StickyElementAttributeClasses, function (className, attrName) {
          var $els = $targetEl.find("[" + attrName + "]");
          $els.each(function (i, e) {
            var activeIdxs = _this3.getActiveIdxs($(e).attr(attrName));

            var curActive = _.includes(activeIdxs, "" + curCIndex);

            if (prevCIndex === undefined) {
              $(e).toggleClass(className + "-transition", false).toggleClass(className, curActive);

              if (className == "is-se-slidedown") {
                if (_this3._toggleCount === 0) {
                  $(e).toggle(curActive);
                } else {
                  if (curActive) {
                    $(e).hide(0).slideDown(400);
                  } else {
                    $(e).show(0).slideUp(400);
                  }
                }
              }

              return;
            }

            var prevActive = _.includes(activeIdxs, "" + prevCIndex);

            var hasTransition = prevActive != curActive;
            if (isStickyBlock) hasTransition = true;

            if (hasTransition) {
              if (!isStickyBlock) {
                $(e).toggleClass(className + "-transition", false).toggleClass(className, !curActive);
              }

              _.debounce(function () {
                $(e).toggleClass(className + "-transition", hasTransition).toggleClass(className, curActive);
              }, 0)();

              if (className == "is-se-slidedown") {
                if (curActive) {
                  $(e).hide(0).slideDown(400);
                } else {
                  $(e).show(0).slideUp(400);
                }
              }
            } else {
              $(e).toggleClass(className + "-transition", hasTransition).toggleClass(className, curActive);

              if (className == "is-se-slidedown") {
                $(e).toggle(curActive);
              }
            }
          });
        });

        this._toggleCount++;
      }
    }, {
      key: "getParentModel",
      value: function getParentModel() {
        return this.model.get("_parent");
      }
    }, {
      key: "transitionFromEl",
      value: function transitionFromEl($otherEl, curCIndex, prevCIndex) {
        var _this$getParentModel$,
            _this4 = this;

        if ((_this$getParentModel$ = this.getParentModel().get("_$clone")) !== null && _this$getParentModel$ !== void 0 && _this$getParentModel$.length) {
          this.getParentModel().get("_$clone").remove();
        }

        var $clone = this.$el.clone();
        this.$clone = $clone;
        $clone.width(this.$el.width());
        this.$el.closest(".component__widget").append($clone.addClass("is-clone"));
        this.getParentModel().set("_$clone", this.$clone);
        var $cloneScroll = $clone.find(".js-stickyelement-scroll");

        if ($cloneScroll.length) {
          $cloneScroll[0].scrollTop = this.getParentModel().get("_itemScrollTop");
          $cloneScroll[0].scrollLeft = this.getParentModel().get("_itemScrollLeft");
        }

        var removeClone = function () {
          $clone.remove();

          _this4.$el.toggleClass("u-visibility-hidden", false).hide(0).show(0);
        };

        if (this.getParentModel().get("_fallbackTimeout")) {
          clearTimeout(this.getParentModel().get("_fallbackTimeout"));
        }

        var fallbackTimeout = setTimeout(removeClone, 1500);
        this.getParentModel().set("_fallbackTimeout", fallbackTimeout);
        $clone.on('transitionend', function (event) {
          if (event.target != event.currentTarget) return;

          _.debounce(removeClone, 50)();

          clearTimeout(_this4.getParentModel().get("_fallbackTimeout"));

          _this4.getParentModel().set("_fallbackTimeout", undefined);
        });

        _.delay(function () {
          _this4.$el.toggleClass("u-visibility-hidden", true);

          $otherEl.toggleClass("u-visibility-hidden", true);
        }, 0);

        var thisBB = this.$el[0].getBoundingClientRect();
        var cloneBB = $clone[0].getBoundingClientRect();
        var otherBB = $otherEl[0].getBoundingClientRect();
        var cloneOffsetBefore = {
          top: Math.round(otherBB.top - cloneBB.top),
          left: Math.round(otherBB.left - cloneBB.left)
        };
        var cloneOffsetAfter = {
          top: Math.round(thisBB.top - cloneBB.top),
          left: Math.round(thisBB.left - cloneBB.left)
        };
        var scale = 1;
        $clone.css({
          "transform": "translate(" + cloneOffsetBefore.left + "px, " + cloneOffsetBefore.top + "px) translateZ(1px) scale(" + scale + ")"
        });
        cloneOffsetAfter.left += otherBB.left - thisBB.left;
        $clone.hide(0).show(0);
        $clone.css("transform", "translate(" + cloneOffsetAfter.left + "px, " + cloneOffsetAfter.top + "px)  translateZ(0px) scale(" + scale + ")");
        this.toggleAttributes($clone, curCIndex, prevCIndex);
        this.toggleAttributes(this.$el, curCIndex, undefined);
      }
    }]);

    return StickyElementItemView;
  }(Backbone.View);
  var StickyElementItemView$1 = __AMD("extensions/adapt-stickyElement/js/stickyElementItemView", StickyElementItemView);

  var StickyElementItemModel = function (_Backbone$Model) {
    _inherits(StickyElementItemModel, _Backbone$Model);

    var _super = _createSuper(StickyElementItemModel);

    function StickyElementItemModel() {
      _classCallCheck(this, StickyElementItemModel);

      return _super.apply(this, arguments);
    }

    _createClass(StickyElementItemModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _parent: undefined,
          _id: "",
          _componentItemIndex: "",
          _componentItem: undefined,
          _view: undefined,
          _isActive: false,
          _isStickyBlock: false
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.set("_componentItemIndex", this.get("_componentItem").get("_index"));
        this.set("_isActive", this.get("_componentItem").get(this.get("_isStickyBlock") ? "_isVisible" : "_isActive"));
        this.setUpEventListeners();
      }
    }, {
      key: "getItemsCount",
      value: function getItemsCount() {
        if (this.get("_isStickyBlock")) {
          var _this$get$get;

          return (_this$get$get = this.get("_componentItem").get("_stickyBlockSiblings")) === null || _this$get$get === void 0 ? void 0 : _this$get$get.length;
        }

        return this.get("_parent").get("_items").length;
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        if (!this.get("_isStickyBlock")) {
          this.listenTo(this.get("_componentItem"), "change:_isActive", this.onComponentItemActiveChange);
        } else {
            this.listenTo(this.get("_componentItem"), "stickyBlock:inview", this.onStickyBlockInview);
          }

        this.listenTo(this, "change:_isActive", this.onActiveChange);
      }
    }, {
      key: "onComponentItemActiveChange",
      value: function onComponentItemActiveChange(itemModel, isActive) {
        this.set("_isActive", isActive);
      }
    }, {
      key: "onStickyBlockInview",
      value: function onStickyBlockInview() {
        var view = this.get("_view");
        if (!view) return;
        var activeIndex = view.$el.getParentStickyBlockIndex();
        this.set("_isActive", true);
        this.set("_componentItemIndex", activeIndex);
      }
    }, {
      key: "onActiveChange",
      value: function onActiveChange(model, isActive) {
        if (isActive) this.get("_parent").setItemActive(this);
      }
    }, {
      key: "getItemPrev",
      value: function getItemPrev() {
        return this.get("_parent").get("_itemPrev");
      }
    }, {
      key: "refresh",
      value: function refresh() {
        console.log("REFRESH WON'T DO ANYTHING YET");
      }
    }, {
      key: "getPrevActiveStickyElementItem",
      value: function getPrevActiveStickyElementItem() {}
    }]);

    return StickyElementItemModel;
  }(Backbone.Model);
  var StickyElementItemModel$1 = __AMD("extensions/adapt-stickyElement/js/stickyElementItemModel", StickyElementItemModel);

  var CompatibleComponents = {
    "tabs": {
      "_hasTransitions": false
    },
    "narrativePlus": {
      "_hasTransitions": true
    }
  };

  var StickyElementModel = function (_Backbone$Model) {
    _inherits(StickyElementModel, _Backbone$Model);

    var _super = _createSuper(StickyElementModel);

    function StickyElementModel() {
      _classCallCheck(this, StickyElementModel);

      return _super.apply(this, arguments);
    }

    _createClass(StickyElementModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _parent: undefined,
          _id: "",
          body: "",
          _items: new Backbone.Collection(),
          _itemScrollTop: 0,
          _itemScrollLeft: 0,
          _itemActive: undefined,
          _itemPrev: undefined
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(this.get("_parent").getChildren(), "change:_isActive", this.onComponentItemActiveChange);
        this.listenTo(this, "change:_itemActive", this.onItemActiveChange);
      }
    }, {
      key: "checkValidParent",
      value: function checkValidParent() {
        var parentType = this.get("_parent").get("_component");
        var cc = CompatibleComponents[parentType];

        if (cc === undefined) {
          throw "adapt-stickyElement: this extension is not compatible with the \"" + parentType + "\" component.";
        }

        this.set("_parentHasTransitions", cc._hasTransitions);
      }
    }, {
      key: "setItemActive",
      value: function setItemActive(itemActiveModel) {
        this.set("_itemActive", itemActiveModel);
      }
    }, {
      key: "onComponentItemActiveChange",
      value: function onComponentItemActiveChange(componentItem, isActive) {
        if (this.get("_items").find(function (item) {
          return item.get("_componentItem") === componentItem;
        })) return;
        this.setItemActive(undefined);
      }
    }, {
      key: "onItemActiveChange",
      value: function onItemActiveChange(model) {
        this.set("_itemPrev", model._previousAttributes._itemActive);
      }
    }, {
      key: "registerComponentItemModel",
      value: function registerComponentItemModel(componentItemModel, options) {
        var model = new StickyElementItemModel$1({
          _parent: this,
          _id: this.get("_id"),
          body: this.get("body"),
          _componentItem: componentItemModel,
          _isStickyBlock: Boolean(options === null || options === void 0 ? void 0 : options._isStickyBlock)
        });
        var view = new StickyElementItemView$1({
          model: model
        });
        model.set("_view", view);
        this.get("_items").push(model);
        return view;
      }
    }, {
      key: "refresh",
      value: function refresh() {
        var _this = this;

        this.get("_itemModels").find(function (model) {
          if (model.get("_isActive")) {
            _this.trigger("stickyElement:itemShow", model.get("_index"));

            _this.set("_itemCur", model);

            return true;
          }
        });
      }
    }]);

    return StickyElementModel;
  }(Backbone.Model);
  var StickyElementModel$1 = __AMD("extensions/adapt-stickyElement/js/stickyElementModel", StickyElementModel);

  Adapt.on('router:page', function () {
    Handlebars__default['default'].registerHelperEl("stickyElement", function () {
      var context = arguments[arguments.length - 1];
      var hash = context.hash;
      var id = hash.id;
      if (id === undefined) throw "{{#stickyElement}} helper must have the \"id\" parameter defined.";
      var itemIdx = hash.itemIdx;
      var isStickyBlock = itemIdx == "stickyBlock";

      if (!isStickyBlock) {
        itemIdx = parseInt(itemIdx);
        if (hash.itemIdx === undefined) throw "{{#stickyElement}} helper must have the \"itemIdx\" parameter defined.";
      }

      var componentModel = Handlebars__default['default'].getComponentModelFromContext(context);
      var se = componentModel.get("_stickyElement");

      if (!se) {
        throw "Could not render {{#stickyElement}} helper in component " + componentModel.get("_id") + ": component has no \"_stickyElement\" property defined.";
      }

      if (!se._isEnabled) return $();

      var item = _.find(se._items, function (item) {
        return item._id == id;
      });

      if (item === undefined) {
        throw componentModel.get("_id") + ": component._stickyElement._items does not have an item with \"_id\": \"" + id + "\"";
      }

      if (!item._model) {
        item._model = new StickyElementModel$1({
          _id: id,
          _parent: componentModel,
          body: item.body
        });
      }

      if (componentModel.getChildren === undefined) throw "The {{#stickyElement}} helper cannot be used in a \"" + componentModel.get("_component") + "\" component.";

      if (isStickyBlock) {
        return item._model.registerComponentItemModel(componentModel, {
          _isStickyBlock: true
        }).$el;
      }

      return item._model.registerComponentItemModel(componentModel.getChildren().models[itemIdx]).$el;
    });
  });
  var helpers$1 = {
    se_active: function (idx) {
      var context = arguments[arguments.length - 1];

      var _idx = context.hash.idx !== undefined ? context.hash.idx : idx;

      return 'data-stickyelement-active-idx="' + _idx + '"';
    },
    se_mark: function (idx) {
      var context = arguments[arguments.length - 1];

      var _idx = context.hash.idx !== undefined ? context.hash.idx : idx;

      return "data-stickyelement-mark-idx=\"".concat(_idx, "\"").concat(context.hash.theme ? "data-theme=\"".concat(context.hash.theme, "\"") : "");
    },
    se_hide: function (idx) {
      var context = arguments[arguments.length - 1];

      var _idx = context.hash.idx !== undefined ? context.hash.idx : idx;

      return 'data-stickyelement-hide-idx="' + _idx + '"';
    },
    se_fold: function (idx) {
      var context = arguments[arguments.length - 1];

      var _idx = context.hash.idx !== undefined ? context.hash.idx : idx;

      return 'data-stickyelement-fold-idx="' + _idx + '"';
    },
    se_slideleft: function (idx) {
      var context = arguments[arguments.length - 1];

      var _idx = context.hash.idx !== undefined ? context.hash.idx : idx;

      return 'data-stickyelement-slideleft-idx="' + _idx + '"';
    },
    se_slidedown: function (idx) {
      var context = arguments[arguments.length - 1];

      var _idx = context.hash.idx !== undefined ? context.hash.idx : idx;

      return 'data-stickyelement-slidedown-idx="' + _idx + '"';
    }
  };

  for (var name$1 in helpers$1) {
    if (!helpers$1.hasOwnProperty(name$1)) continue;
    Handlebars__default['default'].registerHelper(name$1, helpers$1[name$1]);
  }

  var CLICK_ANYWHERE_EVENTS = "click touch mouseup touchend";

  var TooltipPopupView = function (_Backbone$View) {
    _inherits(TooltipPopupView, _Backbone$View);

    var _super = _createSuper(TooltipPopupView);

    function TooltipPopupView() {
      _classCallCheck(this, TooltipPopupView);

      return _super.apply(this, arguments);
    }

    _createClass(TooltipPopupView, [{
      key: "tagName",
      value: function tagName() {
        return "div";
      }
    }, {
      key: "className",
      value: function className() {
        var classes = ["tooltip-popup", this.model.get("type") || this.model.get("_type") ? "is-" + (this.model.get("type") || this.model.get("_type")) : ""];
        return classes.join(" ");
      }
    }, {
      key: "events",
      value: function events() {
        return {};
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpEventListeners();
        this.render();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        var _this = this;

        this.listenTo(Adapt, {
          'device:resize': this.onDeviceResize
        });

        _.debounce(function () {
          _this.onClickAnywhereEvent = _this.onClickAnywhere.bind(_this);
          $(document).on(CLICK_ANYWHERE_EVENTS, _this.onClickAnywhereEvent);
        }, 0)();
      }
    }, {
      key: "onClickAnywhere",
      value: function onClickAnywhere(event) {
        var innerEl = this.$(".tooltip-popup__inner")[0];
        if (event.target == innerEl || $.contains(innerEl, event.target)) return;
        this.close();
      }
    }, {
      key: "onDeviceResize",
      value: function onDeviceResize() {
        this.close();
      }
    }, {
      key: "close",
      value: function close() {
        this.model.set("_isActive", false);
        this.remove();
      }
    }, {
      key: "remove",
      value: function remove() {
        this.model.set("_isActive", false);
        $(document).off(CLICK_ANYWHERE_EVENTS, this.onClickAnywhereEvent);
        Backbone.View.prototype.remove.apply(this, arguments);
      }
    }, {
      key: "render",
      value: function render() {
        this.$el.html(new Handlebars.SafeString(Handlebars.templates['tooltipPopup'](this.model.toJSON())).string);
        this.$parent = this.model.get("$target").closest(".notify__popup, #app, .sidemenu");
        this.$parent.append(this.$el);
        this.alignToTarget();
      }
    }, {
      key: "alignToTarget",
      value: function alignToTarget() {
        var $target = this.model.get("$target");

        if (!$target || !$target.length) {
          throw "toolipPopupView needs an existing $target element to align to";
        }

        $target = $target.first();
        var targetBB = $target[0].getClientRects()[0];
        var elBB = this.el.getBoundingClientRect();
        var parentWidth = this.$parent[0].clientWidth;
        var left = targetBB.left - (elBB.width - targetBB.width) / 2;
        var _left = left;
        left = Math.min(parentWidth - elBB.width, left);
        left = Math.max(0, left);
        var tailOffset = _left - left;
        this.$(".tooltip-popup__tail-container").css({
          "transform": "translateX(" + tailOffset + "px)"
        });
        this.$el.offset({
          left: left,
          top: $target.offset().top
        });

        try {
          Adapt.navigateToElement(this.$(".tooltip-popup__inner"), {
            duration: 400,
            align: "inview",
            notifyEnabled: true
          });
        } catch (err) {}
      }
    }]);

    return TooltipPopupView;
  }(Backbone.View);
  var TooltipPopupView$1 = __AMD("extensions/adapt-tooltip/js/tooltipPopupView", TooltipPopupView);

  var TooltipView = function (_Backbone$View) {
    _inherits(TooltipView, _Backbone$View);

    var _super = _createSuper(TooltipView);

    function TooltipView() {
      _classCallCheck(this, TooltipView);

      return _super.apply(this, arguments);
    }

    _createClass(TooltipView, [{
      key: "tagName",
      value: function tagName() {
        return "span";
      }
    }, {
      key: "className",
      value: function className() {
        return "tooltip";
      }
    }, {
      key: "events",
      value: function events() {
        return {
          "click .js-tooltip": "onClick"
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.setUpEventListeners();
        this.render();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(this.model, "change:_isActive", this.onActiveChange);
      }
    }, {
      key: "render",
      value: function render() {
        this.$el.html(new Handlebars.SafeString(Handlebars.templates['tooltip'](this.model.toJSON())).string);
      }
    }, {
      key: "onClick",
      value: function onClick(event) {
        if (Adapt.config.get("_isEpub")) {
          event.stopPropagation();
        }

        Adapt.createTooltip(this.$(".js-tooltip-target"), this.model.attributes);
      }
    }, {
      key: "onActiveChange",
      value: function onActiveChange(model, isActive) {
        this.$(".tooltip__content").toggleClass("is-active", isActive);

        if (isActive) {
          Adapt.createTooltip(this.$el, this.model.attributes);
          return;
        }
      }
    }]);

    return TooltipView;
  }(Backbone.View);
  var TooltipView$1 = __AMD("extensions/adapt-tooltip/js/tooltipView", TooltipView);

  Adapt.on('router:page', function () {
    Handlebars__default['default'].registerHelperEl("reference", function () {
      var context = arguments[arguments.length - 1];

      if (Adapt.isPDFMode()) {
        var html = Handlebars__default['default'].templates["reference-pdf"]({
          example: "EXAMPLE"
        });
        return new Handlebars__default['default'].SafeString(html);
      }

      var modelJSON = _.extend({}, context.hash, {
        buttonText: "",
        content: context.fn(this),
        _img: "reference",
        type: "reference"
      });

      return new TooltipView$1({
        model: new Backbone.Model(modelJSON)
      }).$el;
    });
    Handlebars__default['default'].registerHelperEl("glossary", function () {
      var context = arguments[arguments.length - 1];
      var glossaryTerm = context.hash.term || context.fn(this);
      glossaryTerm = glossaryTerm.trim();
      if (!glossaryTerm) throw "{{#glossary}}: Must have a valid \'term\' property.";
      var pageModel = Adapt.findById(Adapt.location._currentId);

      var glossaries = pageModel.get("_menuData")._glossaries;

      var glossaryData = _.find(glossaries._items, function (g) {
        return g.title.toLowerCase() == glossaryTerm.toLowerCase();
      });

      if (!glossaryData) throw "{{#glossary}}: Could not find glossary definition for \"" + glossaryTerm + "\".";

      var modelJSON = _.extend({}, context.hash, {
        buttonText: context.fn(this),
        title: glossaryData.title,
        content: glossaryData.body,
        _icon: "",
        type: "glossary"
      });

      return new TooltipView$1({
        model: new Backbone.Model(modelJSON)
      }).$el;
    });
  });

  Adapt.createTooltip = function (element) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (typeof settings === "string") {
      settings = {
        content: settings
      };
    }

    var tooltipPopupView = new TooltipPopupView$1({
      model: new Backbone.Model(_.extend(settings || {}, {
        $target: $(element)
      }))
    });
    return tooltipPopupView;
  };

  var MenuItemView = function (_AdaptView) {
    _inherits(MenuItemView, _AdaptView);

    var _super = _createSuper(MenuItemView);

    function MenuItemView() {
      _classCallCheck(this, MenuItemView);

      return _super.apply(this, arguments);
    }

    _createClass(MenuItemView, [{
      key: "attributes",
      value: function attributes() {
        return AdaptView$1.resultExtend('attributes', {
          'role': 'listitem',
          'aria-labelledby': this.model.get('_id') + '-heading'
        }, this);
      }
    }, {
      key: "className",
      value: function className() {
        return ['menu-item', this.constructor.className, this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), this.model.get('_isVisited') ? 'is-visited' : '', this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isLocked') ? 'is-locked' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.model.checkCompletionStatus();
        this.model.checkInteractionCompletionStatus();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$el.imageready(this.setReadyStatus.bind(this));
      }
    }]);

    return MenuItemView;
  }(AdaptView$1);

  MenuItemView.type = 'menuItem';
  var MenuItemView$1 = __AMD("core/js/views/menuItemView", MenuItemView);

  var MenuView = function (_ContentObjectView) {
    _inherits(MenuView, _ContentObjectView);

    var _super = _createSuper(MenuView);

    function MenuView() {
      _classCallCheck(this, MenuView);

      return _super.apply(this, arguments);
    }

    return MenuView;
  }(ContentObjectView);

  Object.assign(MenuView, {
    childContainer: '.js-children',
    childView: MenuItemView$1,
    type: 'menu',
    template: 'menu'
  });
  var MenuView$1 = __AMD("core/js/views/menuView", MenuView);

  var BoxMenuItemView = MenuItemView$1.extend({
    events: {
      'click .js-btn-click': 'onClickMenuItemButton'
    },
    onClickMenuItemButton: function (event) {
      if (event && event.preventDefault) event.preventDefault();
      if (this.model.get('_isLocked')) return;
      Backbone.history.navigate('#/id/' + this.model.get('_id'), {
        trigger: true
      });
    }
  }, {
    className: 'boxmenu-item',
    template: 'boxMenuItem'
  });
  var BoxMenuItemView$1 = __AMD("menu/adapt-contrib-boxMenu/js/adapt-contrib-boxMenuItemView", BoxMenuItemView);

  var BoxMenuView = MenuView$1.extend({
    initialize: function () {
      MenuView$1.prototype.initialize.apply(this);
      this.setStyles();
      this.listenTo(Adapt, {
        "device:changed": this.onDeviceResize
      });
    },
    onDeviceResize: function () {
      this.setStyles();
    },
    setStyles: function () {
      this.setBackgroundImage();
      this.setBackgroundStyles();
      this.processHeader();
    },
    setBackgroundImage: function () {
      var config = this.model.get('_boxMenu');
      var backgroundImages = config && config._backgroundImage;
      if (!backgroundImages) return;
      var backgroundImage;

      switch (Adapt.device.screenSize) {
        case "large":
          backgroundImage = backgroundImages._large;
          break;

        case "medium":
          backgroundImage = backgroundImages._medium;
          break;

        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        this.$el.addClass("has-bg-image").css("background-image", "url(" + backgroundImage + ")");
      } else {
        this.$el.removeClass("has-bg-image").css("background-image", "");
      }
    },
    setBackgroundStyles: function () {
      var config = this.model.get('_boxMenu');
      var styles = config && config._backgroundStyles;
      if (!styles) return;
      this.$el.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },
    processHeader: function () {
      var config = this.model.get('_boxMenu');
      var header = config && config._menuHeader;
      if (!header) return;
      var $header = this.$('.menu__header');
      this.setHeaderBackgroundImage(header, $header);
      this.setHeaderBackgroundStyles(header, $header);
      this.setHeaderMinimumHeight(header, $header);
    },
    setHeaderBackgroundImage: function (config, $header) {
      var backgroundImages = config._backgroundImage;
      if (!backgroundImages) return;
      var backgroundImage;

      switch (Adapt.device.screenSize) {
        case "large":
          backgroundImage = backgroundImages._large;
          break;

        case "medium":
          backgroundImage = backgroundImages._medium;
          break;

        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        $header.addClass("has-bg-image").css("background-image", "url(" + backgroundImage + ")");
      } else {
        $header.removeClass("has-bg-image").css("background-image", "");
      }
    },
    setHeaderBackgroundStyles: function (config, $header) {
      var styles = config._backgroundStyles;
      if (!styles) return;
      $header.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },
    setHeaderMinimumHeight: function (config, $header) {
      var minimumHeights = config._minimumHeights;
      if (!minimumHeights) return;
      var minimumHeight;

      switch (Adapt.device.screenSize) {
        case "large":
          minimumHeight = minimumHeights._large;
          break;

        case "medium":
          minimumHeight = minimumHeights._medium;
          break;

        default:
          minimumHeight = minimumHeights._small;
      }

      if (minimumHeight) {
        $header.addClass("has-min-height").css("min-height", minimumHeight + "px");
      } else {
        $header.removeClass("has-min-height").css("min-height", "");
      }
    }
  }, {
    childView: BoxMenuItemView$1,
    className: 'boxmenu',
    template: 'boxMenu'
  });
  Adapt.on('router:menu', function (model) {
    $('#wrapper').append(new BoxMenuView({
      model: model
    }).$el);

    _.debounce(function () {
      Adapt.router.model.set('_canNavigate', true, {
        pluginName: 'adapt'
      });
      var newRouteId = 'co-05';
      Backbone.history.navigate('#/id/' + newRouteId, true);
    }, 0)();
  });

  var ThemeView = Backbone.View.extend({
    className: function () {},
    initialize: function () {
      this.init();
      this.setStyles();
      this.listenTo(Adapt, {
        "device:changed": this.onDeviceResize,
        "remove": this.remove
      });
    },
    onDeviceResize: function () {
      this.setStyles();
    },
    remove: function () {
      Backbone.View.prototype.remove.call(this);
      this.onRemove();
    },
    setStyles: function () {
      this.setClasses();
      this.setBackgroundImage();
      this.setBackgroundStyles();
      this.setMinimumHeight();
      this.setCustomStyles();
    },
    setClasses: function () {
      this.$el.addClass(this.className());
    },
    setBackgroundImage: function () {
      var backgroundImages = this.model.get("_backgroundImage");
      if (!backgroundImages) return;
      var backgroundImage;
      var backgroundRepeat = backgroundImages._repeat ? "repeat" : "";
      var backgroundSize = backgroundImages._repeat ? "auto" : "";

      switch (Adapt.device.screenSize) {
        case "large":
          backgroundImage = backgroundImages._large;
          break;

        case "medium":
          backgroundImage = backgroundImages._medium;
          break;

        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        this.$el.addClass("has-bg-image").css("background-image", "url(" + backgroundImage + ")").css("background-repeat", backgroundRepeat).css("background-size", backgroundSize);
      } else {
        this.$el.removeClass("has-bg-image").css("background-image", "").css("background-repeat", "").css("background-size", "");
      }
    },
    setBackgroundStyles: function () {
      var styles = this.model.get("_backgroundStyles");
      if (!styles) return;
      this.$el.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },
    setMinimumHeight: function () {
      var minimumHeights = this.model.get("_minimumHeights");
      if (!minimumHeights) return;
      var minimumHeight;

      switch (Adapt.device.screenSize) {
        case "large":
          minimumHeight = minimumHeights._large;
          break;

        case "medium":
          minimumHeight = minimumHeights._medium;
          break;

        default:
          minimumHeight = minimumHeights._small;
      }

      if (minimumHeight) {
        this.$el.addClass("has-min-height").css("min-height", minimumHeight + "px");
      } else {
        this.$el.removeClass("has-min-height").css("min-height", "");
      }
    },
    init: function () {},
    setCustomStyles: function () {},
    onRemove: function () {}
  });
  var ThemeView$1 = __AMD("theme/adapt-didasko/js/themeView", ThemeView);

  var ThemePageView = ThemeView$1.extend({
    className: function () {},
    setCustomStyles: function () {
      this.processHeader();
    },
    processHeader: function () {
      var header = this.model.get('_pageHeader');

      if (!header || header._isEnabled === false) {
        this.$('.page__header, .page__overview').hide();
        return;
      }

      var $header = this.$('.page__header');
      var $headerBG = this.$('.page__header-bg');
      this.setHeaderBackgroundImage(header, $headerBG);
      this.setHeaderBackgroundStyles(header, $headerBG);
      this.setHeaderMinimumHeight(header, $header);
    },
    setHeaderBackgroundImage: function (config, $header) {
      var backgroundImages = config._backgroundImage;
      if (!backgroundImages) return;
      var backgroundImage;

      switch (Adapt.device.screenSize) {
        case "large":
          backgroundImage = backgroundImages._large;
          break;

        case "medium":
          backgroundImage = backgroundImages._medium;
          break;

        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        $header.css("background-image", "url(" + backgroundImage + ")").parent().addClass("has-bg-image");
      } else {
        $header.css("background-image", "").parent().removeClass("has-bg-image");
      }
    },
    setHeaderBackgroundStyles: function (config, $header) {
      var styles = config._backgroundStyles;
      if (!styles) return;
      $header.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },
    setHeaderMinimumHeight: function (config, $header) {
      var minimumHeights = config._minimumHeights;
      if (!minimumHeights) return;
      var minimumHeight;

      switch (Adapt.device.screenSize) {
        case "large":
          minimumHeight = minimumHeights._large;
          break;

        case "medium":
          minimumHeight = minimumHeights._medium;
          break;

        default:
          minimumHeight = minimumHeights._small;
      }

      if (minimumHeight) {
        $header.addClass("has-min-height").css("min-height", minimumHeight + "px");
      } else {
        $header.removeClass("has-min-height").css("min-height", "");
      }
    },
    onRemove: function () {}
  });
  var ThemePageView$1 = __AMD("theme/adapt-didasko/js/themePageView", ThemePageView);

  var ThemeArticleView = ThemeView$1.extend({
    className: function () {},
    setCustomStyles: function () {},
    onRemove: function () {}
  });
  var ThemeArticleView$1 = __AMD("theme/adapt-didasko/js/themeArticleView", ThemeArticleView);

  var ThemeBlockView = ThemeView$1.extend({
    className: function () {
      return this.model.get("_isDividerBlock") ? "is-divider-block" : "";
    },
    setCustomStyles: function () {},
    onRemove: function () {}
  });
  var ThemeBlockView$1 = __AMD("theme/adapt-didasko/js/themeBlockView", ThemeBlockView);

  var ThemeComponentView = ThemeView$1.extend({
    className: function () {
      return this.model.get("_isDividerBlock") ? "is-divider-block" : "";
    },
    init: function () {},
    onRemove: function () {}
  });
  var ThemeComponentView$1 = __AMD("theme/adapt-didasko/js/themeComponentView", ThemeComponentView);

  function onDataReady() {
    var _Adapt$course$get;

    $("html").addClass(Adapt.course.get("_courseStyle"));
    var propOverrides = ((_Adapt$course$get = Adapt.course.get("_propOverride")) === null || _Adapt$course$get === void 0 ? void 0 : _Adapt$course$get._items) || [];
    Adapt.log.debug("Build overrides: ", propOverrides);
  }

  function onPostRender(view) {
    var model = view.model;
    var theme = model.get("_didasko");
    if (!theme) return;

    switch (model.get("_type")) {
      case "page":
        new ThemePageView$1({
          model: new Backbone.Model(theme),
          el: view.$el
        });
        break;

      case "article":
        new ThemeArticleView$1({
          model: new Backbone.Model(theme),
          el: view.$el
        });
        break;

      case "block":
        new ThemeBlockView$1({
          model: new Backbone.Model(theme),
          el: view.$el
        });
        break;

      case "component":
        new ThemeComponentView$1({
          model: new Backbone.Model(theme),
          el: view.$el
        });
        break;

      default:
        new ThemeView$1({
          model: new Backbone.Model(theme),
          el: view.$el
        });
    }
  }

  Adapt.on({
    "app:dataReady": onDataReady,
    "pageView:postRender articleView:postRender blockView:postRender componentView:postRender": onPostRender
  });

  var helpers = {
    "c-example": function () {
      var context = arguments[arguments.length - 1];
      var content = context.fn(this);
      var html = Handlebars.templates["c-example"](_.extend(context.hash, {
        content: content
      }));
      return new Handlebars.SafeString(html);
    }
  };

  for (var name in helpers) {
    if (helpers.hasOwnProperty(name)) {
      Handlebars.registerHelper(name, helpers[name]);
    }
  }

  var partials = {
    "c-partial": "<strong><u>Shortcut!</u></strong>",
    "c-withParam": "<strong><u>{{./param}}</u></strong>"
  };

  for (var name in partials) {
    Handlebars.registerPartial(name, partials[name]);
  }

  register("header", function Header(props) {
    var jsxHeading = React.useRef(null);
    var jsxComponentDescription = React.useRef(null);
    var _id = props._id,
        displayTitle = props.displayTitle,
        body = props.body,
        instruction = props.instruction,
        mobileInstruction = props.mobileInstruction,
        _type = props._type,
        _component = props._component,
        _disableAccessibilityState = props._disableAccessibilityState,
        _props$classNamePrefi = props.classNamePrefixes,
        classNamePrefixes = _props$classNamePrefi === void 0 ? [_type && _type.toLowerCase(), _component && _component.toLowerCase()].filter(Boolean) : _props$classNamePrefi;
    var sizedInstruction = mobileInstruction && Adapt.device.screenSize !== 'large' ? mobileInstruction : instruction;
    var isSet = displayTitle || body || sizedInstruction;
    if (!isSet) return null;
    return React__default['default'].createElement("div", {
      id: "".concat(_id, "-header"),
      className: prefixClasses(classNamePrefixes, ['__header'])
    }, React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__header-inner'])
    }, displayTitle && React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__title'])
    }, !_disableAccessibilityState && React__default['default'].createElement("div", {
      className: "js-heading",
      ref: jsxHeading
    }), React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__title-inner']),
      "aria-hidden": !_disableAccessibilityState
    }, html(compile(displayTitle, props)))), html(helper('component_description', props), jsxComponentDescription), body && React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__body'])
    }, React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__body-inner'])
    }, html(compile(body, props)))), sizedInstruction && React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__instruction'])
    }, React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__instruction-inner'])
    }, html(compile(sizedInstruction, props))))));
  });

  register("image", function Image(props) {
    var screenSize = Adapt.device.screenSize;
    var src = props["_".concat(screenSize)] || props["".concat(screenSize)] || props._src || props.src;
    var hasSource = Boolean(src);
    if (!hasSource) return null;
    var attributionClassNamePrefixes = props.attributionClassNamePrefixes || props.classNamePrefixes;
    return React__default['default'].createElement("div", {
      className: classes([prefixClasses(props.classNamePrefixes, ['-image-container']), props.attribution && 'has-attribution'])
    }, React__default['default'].createElement("img", {
      className: prefixClasses(props.classNamePrefixes, ['-image']),
      src: src,
      "aria-label": Adapt.a11y.normalize(props.alt),
      "aria-hidden": !props.alt,
      loading: "eager"
    }), props.attribution && React__default['default'].createElement("div", {
      className: prefixClasses(attributionClassNamePrefixes, ['__attribution'])
    }, React__default['default'].createElement("div", {
      className: prefixClasses(attributionClassNamePrefixes, ['__attribution-inner'])
    }, html(props.attribution))));
  });

  $('body').append(Handlebars.templates.loading());
  Adapt.data.on('ready', function triggerInit() {
    Adapt.log.debug('Calling Adapt.init');
    Adapt.init();
    Adapt.off('adaptCollection:dataLoaded courseModel:dataLoaded');
  }).init();

});
// Allow ES export default to be exported as amd modules
window.__AMD = function(id, value) {
  window.define(id, function() { return value; }); // define for external use
  window.require([id]); // force module to load
  return value; // return for export
};
//# sourceMappingURL=adapt.min.js.map
